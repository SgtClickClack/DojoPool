import React, { Suspense, useEffect } from 'react';
import { Navigate, Outlet, Route, Routes } from 'react-router-dom';
// AuthContext is likely provided in main.tsx now, so useAuth can be imported directly.
// If AuthProvider is NOT moved to main.tsx, you'd keep the import { AuthProvider, useAuth } from './contexts/AuthContext';
import { SocketProvider } from './contexts/SocketContext';
import { useAuth } from './hooks/useAuth'; // Fixed import path to match main.tsx
// CssBaseline and ThemeProvider will be in main.tsx.
// import { CssBaseline, ThemeProvider, createTheme } from '@mui/material';
import './three-extensions';

// Import new services for SPRINT 9
import { deploymentManager } from './config/deployment';
// import { trackPageView } from './services/AnalyticsService';
// import { OnboardingService } from './services/OnboardingService';
// import { bundleOptimizer } from './utils/bundleOptimizer';
// import { logger } from './utils/logger';
// import { registerServiceWorker } from './utils/serviceWorker';

// Lazy load components
const AvatarCreation = React.lazy(
  () => import('./components/Avatar/AvatarCreation')
);
const GameView = React.lazy(() => import('./components/Game/GameView'));
const Ledger = React.lazy(() => import('./components/wallet/Ledger'));
const TournamentDetail = React.lazy(
  () => import('./components/tournaments/TournamentDetail')
);
const SocialFeed = React.lazy(() => import('./components/Social/Feed'));

// Match Components
// const MatchPage = React.lazy(() => import('./pages/matches/[id]'));

// Player Components
// const PlayerProfile = React.lazy(() => import('./pages/players/[id]'));

// AI Feature Components
// const MatchAnalysis = React.lazy(() => import('./pages/ai/match-analysis'));
// const Coaching = React.lazy(() => import('./pages/ai/coaching'));
// const AdvancedMatchAnalysis = React.lazy(() => import('./pages/ai/advanced-match-analysis'));

// Performance Components
// const TournamentPerformance = React.lazy(() => import('./pages/performance/tournament-performance'));

// Tournament Components
// const BracketVisualization = React.lazy(() => import('./pages/tournaments/bracket-visualization'));

// Social Components
// const TournamentSocial = React.lazy(() => import('./pages/social/tournament-social'));

// Analytics Components
// const TournamentAnalytics = React.lazy(() => import('./pages/analytics/tournament-analytics'));

// Mobile Components
// const TournamentMobile = React.lazy(() => import('./pages/mobile/tournament-mobile'));

// Streaming Components
// const TournamentStreaming = React.lazy(() => import('./pages/streaming/tournament-streaming'));

// Venue Components
// const VenueManagement = React.lazy(() => import('./pages/venue/venue-management'));

// Theme definition should be moved to a separate file (e.g., theme.ts) and imported in main.tsx
// const theme = createTheme({
//   palette: {
//     mode: 'dark', // Or 'light'
//   },
// });

// import AdvancedAIRefereePage from '../pages/AdvancedAIRefereePage';
// import AdvancedGameReplayPage from '../pages/AdvancedGameReplayPage';
// import SocialCommunityPage from '../pages/SocialCommunityPage';
// import AdvancedAnalyticsPage from '../pages/advanced-analytics';
// import AdvancedVenueAnalyticsPage from '../pages/advanced-venue-analytics';
// import TournamentBlockchainPage from '../pages/blockchain/tournament-blockchain';
// import TournamentCompliancePage from '../pages/compliance/tournament-compliance';
// import TournamentMobilePage from '../pages/mobile/tournament-mobile';
// import NFTMarketplacePage from '../pages/nft-marketplace';
// import AIRefereePage from '../pages/referee/ai-referee';
// import TournamentSecurityPage from '../pages/security/tournament-security';
// import TournamentCommentaryPage from '../pages/tournaments/tournament-commentary';
// import TournamentPredictionPage from '../pages/tournaments/tournament-prediction';
// import DojoCoinRewardsPage from '../pages/venue/dojo-coin-rewards';
// import DojoProfilePage from '../pages/venue/dojo-profile';
// import DojoProfileCustomizationPage from '../pages/venue/dojo-profile-customization';
// import EquipmentManagementPage from '../pages/venue/equipment-management';
// import VenueAnalyticsPage from '../pages/venue/venue-analytics';
// import VenueManagementPage from '../pages/venue/venue-management';
// import VenueSpecialsPage from '../pages/venue/venue-specials';
// import VoiceAssistantPage from '../pages/voice-assistant';

// New Narrative Features
// const AvatarProgression = React.lazy(() => import('../pages/avatar-progression'));
// const ClanWars = React.lazy(() => import('../pages/clan-wars'));
// const Tournaments = React.lazy(() => import('../pages/tournament-management'));
// const AICommentary = React.lazy(() => import('../pages/ai-commentary'));
// const AdvancedMatchCommentary = React.lazy(() => import('../pages/ai-commentary'));
// const GameMechanics = React.lazy(() => import('../pages/game-mechanics'));

// Core Game Features
// const BattlePage = React.lazy(() => import("../../pages/game/battle"));
// const AvatarEvolutionPage = React.lazy(() => import("../pages/avatar/evolution"));
// const ClanWarsPage = React.lazy(() => import("../pages/clan/wars"));

// Onboarding Components
// const ChooseDojoScreen = React.lazy(() => import('../../pages/onboarding/choose-dojo'));

// Diception AI Integration
// const DiceptionTest = React.lazy(() => import('../pages/diception-test'));

interface ProtectedRouteProps {
  // children?: React.ReactNode; // Outlet will handle children for layout routes
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = () => {
  const { user, loading } = useAuth();

  if (loading) {
    // Use the same LoadingFallback or a specific one for auth checking
    return <LoadingFallback message="Authenticating..." />;
  }

  return user ? <Outlet /> : <Navigate to="/login" replace />;
};

// A more specific or shared loading fallback
const LoadingFallback = ({
  message = 'Loading content...',
}: {
  message?: string;
}) => (
  <div
    style={{
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      height: '100vh',
      fontSize: '1.2rem', // Adjusted size
    }}
  >
    {message}
  </div>
);

// const VenueDashboardWrapper = () => {
//   const { venueId } = useParams();
//   return <VenueDashboard venueId={venueId as string} />;
// };

// const SpectatorViewWrapper = () => {
//   const { gameId } = useParams();
//   return <SpectatorView gameId={gameId as string} />;
// };

const SocialFeedWrapper = () => <SocialFeed />;

// Main route component that handles onboarding flow
const MainRoute: React.FC = () => {
  const { user, loading } = useAuth();

  if (loading) {
    return <LoadingFallback message="Loading..." />;
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  return <div>Main Route - User authenticated</div>;
};

// This App component assumes ThemeProvider, CssBaseline, AuthProvider, and BrowserRouter
// are wrapping it from main.tsx (or your root index file)
const App: React.FC = () => {
  // Initialize SPRINT 9 services
  useEffect(() => {
    const initializeServices = async () => {
      try {
        // Initialize deployment manager
        if (deploymentManager.isFeatureEnabled('serviceWorkerEnabled')) {
          console.log('Service Worker feature enabled');
        }

        if (deploymentManager.isFeatureEnabled('analyticsEnabled')) {
          console.log('Analytics feature enabled');
        }

        if (deploymentManager.isFeatureEnabled('securityEnabled')) {
          console.log('Security feature enabled');
        }

        if (deploymentManager.isFeatureEnabled('monitoringEnabled')) {
          console.log('Monitoring feature enabled');
        }

        console.log('All SPRINT 9 services initialized successfully');
      } catch (error) {
        console.error('Failed to initialize services', {
          error: error instanceof Error ? error.message : String(error),
        });
      }
    };

    initializeServices();
  }, []);

  return (
    <SocketProvider>
      <Suspense fallback={<LoadingFallback message="Loading page..." />}>
        <Routes>
          {/* Main entry route */}
          <Route path="/" element={<MainRoute />} />
          {/* Public routes */}
          {/* <Route path="/login" element={<Login />} /> */}
          {/* <Route path="/register" element={<Register />} /> */}
          {/* <Route path="/diception-test" element={<DiceptionTest />} /> */}
          {/* <Route path="/avatar-progression" element={<AvatarProgression />} /> */}
          {/* <Route path="/clan-wars" element={<ClanWars />} /> */}
          {/* <Route path="/tournaments" element={<Tournaments />} /> */}
          {/* <Route path="/ai-commentary" element={<AICommentary />} /> */}
          {/* <Route path="/game-mechanics" element={<GameMechanics />} /> */}
          {/* <Route path="/onboarding/choose-dojo" element={<ChooseDojoScreen />} /> */}

          {/* Protected routes using an element for layout/protection */}
          <Route element={<ProtectedRoute />}>
            <Route path="/avatar-creation" element={<AvatarCreation />} />
            <Route path="/ledger" element={<Ledger />} />
            <Route path="/game/:gameId" element={<GameView />} />
            <Route path="/tournaments/:id" element={<TournamentDetail />} />
            <Route path="/feed" element={<SocialFeedWrapper />} />
          </Route>

          {/* Catch all route - should be last */}
          <Route path="*" element={<NotFoundRedirect />} />
        </Routes>
      </Suspense>
    </SocketProvider>
  );
};

// Helper component for the catch-all route to provide a better UX
const NotFoundRedirect: React.FC = () => {
  const { user, loading } = useAuth();

  if (loading) {
    return <LoadingFallback message="Loading..." />;
  }
  // Redirect all unknown routes to the Living World prototype
  return <Navigate to="/" replace />;
  // For a true 404 page experience, you'd render a NotFoundPage component:
  // return <NotFoundPage />;
};

export default App;
