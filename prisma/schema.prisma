// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
  settings  UserSettings?
  sponsorshipProgress PlayerSponsorshipProgress[]

  @@map("users")
}

model Profile {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName   String?
  bio           String?
  avatarUrl     String?
  location      String?
  skillLevel    Int      @default(0)
  preferredGame String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("profiles")
}

model UserSettings {
  id                    String   @id @default(uuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  darkMode              Boolean  @default(false)
  language              String   @default("en")
  timezone              String   @default("UTC")
  privacySettings       Json     @default("{}")
  notificationSettings  Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("user_settings")
}

model SponsorshipBracket {
  id                  String   @id @default(uuid())
  bracketId           String   @unique
  sponsorName         String
  sponsorLogo         String?
  inGameTitle         String
  requiredLevel       Int
  narrativeIntro      String
  narrativeOutro      String
  challenges          Json     // Array of SponsorshipChallenge objects
  digitalReward       Json     // DigitalReward object
  physicalReward      Json     // PhysicalReward object
  isActive            Boolean  @default(true)
  startDate           DateTime?
  endDate             DateTime?
  maxParticipants     Int?
  currentParticipants Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  playerProgress      PlayerSponsorshipProgress[]

  @@map("sponsorship_brackets")
}

model PlayerSponsorshipProgress {
  id                      String             @id @default(uuid())
  playerId                String
  bracketId               String
  bracketTitle            String
  status                  String             // 'locked' | 'unlocked' | 'in_progress' | 'completed' | 'redeemed'
  challengeProgress       Json               // Record of challenge progress
  startedAt               DateTime?
  completedAt             DateTime?
  digitalRewardClaimed    Boolean            @default(false)
  physicalRewardRedeemed  Boolean            @default(false)
  redemptionCode          String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  
  user                    User               @relation(fields: [playerId], references: [id], onDelete: Cascade)
  bracket                 SponsorshipBracket @relation(fields: [bracketId], references: [bracketId], onDelete: Cascade)

  @@unique([playerId, bracketId])
  @@map("player_sponsorship_progress")
}

model SponsorshipEvent {
  id          String   @id @default(uuid())
  eventType   String
  playerId    String
  bracketId   String
  challengeId String?
  timestamp   DateTime @default(now())
  metadata    Json?
  createdAt   DateTime @default(now())

  @@map("sponsorship_events")
}
