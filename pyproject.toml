[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "dojopool"
version = "0.1.0"
description = "Next generation pool gaming platform"
authors = [
    {name = "DojoPool Team", email = "team@dojopool.com"}
]
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "flask",
    "flask-sqlalchemy",
    "flask-migrate",
    "flask-login",
    "flask-cors",
    "waitress",
    "flask-caching",
]

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.py$'
exclude = '''
/(
    venv|
    venv311|
    \.venv|
    \.git|
    \.mypy_cache|
    \.tox|
    build|
    dist|
    \[.*\]        # Exclude files with square brackets in their names.
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
]
ignore = []

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["dojopool"]
combine-as-imports = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = [
    "sqlalchemy.*",
    "flask_sqlalchemy.*",
    "flask.*",
    "celery.*",
    "redis.*",
    "jwt.*",
    "pkg_resources.*",
    "setuptools.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=dojopool --cov-report=term-missing"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
source = ["dojopool"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 100 