generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  USER
  ADMIN
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  PAUSED
  COMPLETED
  CANCELLED
}

model User {
  id            String                 @id @default(uuid())
  email         String                 @unique
  username      String                 @unique
  passwordHash  String
  role          Role                   @default(USER)
  isBanned      Boolean                @default(false)
  dojoCoinBalance Int                  @default(0)
  profile       Profile?
  settings      UserSettings?
  wallets       Wallet[]
  nfts          UserNFT[]
  achievements  UserAchievement[]
  memberships   ClanMember[]
  territories   Territory[]            @relation("TerritoryOwner")
  checkIns      CheckIn[]
  dojoCheckIns DojoCheckIn[]
  challengesAsChallenger Challenge[]   @relation("ChallengeChallenger")
  challengesAsDefender   Challenge[]   @relation("ChallengeDefender")
  ledClans      Clan[]                 @relation("ClanLeader")
  matchesAsPlayerA Match[]             @relation("PlayerA")
  matchesAsPlayerB Match[]             @relation("PlayerB")
  matchesAsWinner  Match[]             @relation("MatchWinner")
  matchesAsLoser   Match[]             @relation("MatchLoser")
  tournaments   TournamentParticipant[]
  transactions  Transaction[]
  notifications Notification[]
  auditLogs     AuditLog[]
  venues        Venue[]
  friendshipsAsRequester Friendship[]  @relation("FriendRequester")
  friendshipsAsAddressee Friendship[]  @relation("FriendAddressee")
  activityEvents ActivityEvent[]       @relation("UserActivityEvents")
  inventoryItems UserInventoryItem[]
  sentMessages   DirectMessage[]        @relation("DM_Sender")
  receivedMessages DirectMessage[]      @relation("DM_Receiver")
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}



model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String?
  bio         String?
  avatarUrl   String?
  location    String?
  skillRating Int      @default(0)
  clanTitle   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserSettings {
  id                 String   @id @default(uuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("en")
  timezone           String   @default("UTC")
  privacySettings    String   @default("{}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Venue {
  id                String        @id @default(uuid())
  name              String
  description       String?
  lat               Float
  lng               Float
  address           String?
  photos            Json?
  openingHours      Json?
  ownerId           String?
  owner             User?         @relation(fields: [ownerId], references: [id])
  tables            Table[]
  tournaments       Tournament[]
  territories       Territory[]
  checkIns          CheckIn[]
  dojoCheckIns      DojoCheckIn[]
  challenges        Challenge[]
  matches           Match[]
  gameSessions      GameSession[]
  specials          VenueSpecial[]
  quests            VenueQuest[]
  shadowRunsTargeted ShadowRun[]  @relation("TargetVenue")
  controllingClanId String?
  controllingClan   Clan?         @relation("ClanControlsVenues", fields: [controllingClanId], references: [id])
  activityEvents    ActivityEvent[] @relation("VenueActivityEvents")
  incomeModifier    Float         @default(1.0)
  defenseLevel      Int           @default(1)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  @@index([controllingClanId])
}

model VenueSpecial {
  id          String   @id @default(uuid())
  venueId     String
  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  title       String
  description String?
  validUntil  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Table {
  id        String      @id @default(uuid())
  venueId   String
  venue     Venue       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  name      String
  status    String      @default("AVAILABLE")
  matches   Match[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}



model Tournament {
  id          String                 @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  venueId     String
  venue       Venue                  @relation(fields: [venueId], references: [id])
  participants TournamentParticipant[]
  matches     Match[]
  status      String                 @default("REGISTRATION")
  maxPlayers  Int?
  entryFee    Int?
  prizePool   Int?
  isSponsored Boolean                @default(false)
  sponsorBannerUrl String?
  activityEvents ActivityEvent[]     @relation("TournamentActivityEvents")
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}



model TournamentParticipant {
  id           String     @id @default(uuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  finalRank    Int?
  joinedAt     DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([tournamentId, userId])
}

model Match {
  id           String        @id @default(uuid())
  tournamentId String
  tournament   Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  venueId      String
  venue        Venue         @relation(fields: [venueId], references: [id])
  playerAId    String
  playerA      User          @relation("PlayerA", fields: [playerAId], references: [id])
  playerBId    String
  playerB      User          @relation("PlayerB", fields: [playerBId], references: [id])
  winnerId     String?
  winner       User?         @relation("MatchWinner", fields: [winnerId], references: [id])
  loserId      String?
  loser        User?         @relation("MatchLoser", fields: [loserId], references: [id])
  scoreA       Int?
  scoreB       Int?
  round        Int
  wager        Int?          @default(0)
  status       MatchStatus   @default(IN_PROGRESS)
  startedAt    DateTime?
  endedAt      DateTime?
  tableId      String?
  table        Table?        @relation(fields: [tableId], references: [id])
  aiAnalysisJson String?
  activityEvents ActivityEvent[] @relation("MatchActivityEvents")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}



model Territory {
  id        String   @id @default(uuid())
  name      String
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  ownerId   String
  owner     User     @relation("TerritoryOwner", fields: [ownerId], references: [id])
  clanId    String?
  clan      Clan?    @relation(fields: [clanId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Challenge {
  id          String        @id @default(uuid())
  challengerId String
  challenger  User          @relation("ChallengeChallenger", fields: [challengerId], references: [id])
  defenderId  String
  defender    User          @relation("ChallengeDefender", fields: [defenderId], references: [id])
  venueId     String
  venue       Venue         @relation(fields: [venueId], references: [id])
  status      String          @default("PENDING")
  expiresAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}



model CheckIn {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id])
  createdAt DateTime @default(now())
}

model DojoCheckIn {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([venueId])
}

model Clan {
  id                String        @id @default(uuid())
  name              String        @unique
  description       String?
  leaderId          String
  leader            User          @relation("ClanLeader", fields: [leaderId], references: [id])
  members           ClanMember[]
  territories       Territory[]
  venues            Venue[]       @relation("ClanControlsVenues")
  activityEvents    ActivityEvent[] @relation("ClanActivityEvents")
  dojoCoinBalance   Int           @default(0)
  seasonalPoints    Int           @default(0)
  shadowRunsInitiated ShadowRun[] @relation("InitiatingClan")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}



model ClanMember {
  id        String   @id @default(uuid())
  clanId    String
  clan      Clan     @relation(fields: [clanId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   @default("MEMBER")
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clanId, userId])
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain     String
  address   String
  createdAt DateTime @default(now())

  @@unique([chain, address])
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Int
  currency  String   @default("DOJO")
  type      String
  metadata  String
  createdAt DateTime @default(now())
}

model NFT {
  id        String    @id @default(uuid())
  contract  String
  tokenId   String
  chain     String
  metadata  String
  users     UserNFT[]
  createdAt DateTime  @default(now())

  @@unique([contract, tokenId, chain])
}

model UserNFT {
  id        String   @id @default(uuid())
  userId    String
  nftId     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nft       NFT      @relation(fields: [nftId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, nftId])
}

model Achievement {
  id          String            @id @default(uuid())
  key         String            @unique
  name        String
  desc        String?
  description String?
  icon        String?
  criteria    String?
  points      Int               @default(0)
  users       UserAchievement[]
  createdAt   DateTime          @default(now())
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt      DateTime    @default(now())

  @@unique([userId, achievementId])
}

enum NotificationType {
  FRIEND_REQUEST
  CHALLENGE_RECEIVED
  TERRITORY_CHANGED
  SYSTEM
  TOURNAMENT_INVITE
  CLAN_INVITE
  ACHIEVEMENT_UNLOCKED
  MATCH_RESULT
  VENUE_CHECKIN
  CLAN_WAR_UPDATE
}

model Notification {
  id           String            @id @default(uuid())
  recipientId  String
  recipient    User              @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  type         NotificationType
  message      String
  isRead       Boolean           @default(false)
  payload      String?
  createdAt    DateTime          @default(now())

  @@index([recipientId, isRead])
  @@index([recipientId, createdAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String
  target    String?
  metadata  String
  ts        DateTime @default(now())
}



model GameSession {
  id              String            @id @default(uuid())
  gameId          String
  venueId         String?
  venue           Venue?            @relation(fields: [venueId], references: [id])
  status          String            @default("ACTIVE")
  gameType        String
  rules           String            @default("{}")
  startTime       DateTime          @default(now())
  endTime         DateTime?
  duration        Int?              // Duration in seconds
  lastUpdated     DateTime          @updatedAt

  // Player management
  playerIds       String
  currentPlayerId String?

  // Game state
  ballStates      String            @default("{}") // Record of ball positions/status
  fouls           String            @default("{}") // Player foul counts
  score           String            @default("{}") // Player scores
  events          String            @default("[]") // Game events (shots, fouls, etc.)

  // Analytics
  totalShots      Int               @default(0)
  totalFouls      Int               @default(0)
  totalFrames     Int               @default(0)

  // Performance metrics
  avgShotTime     Float?
  avgFrameTime    Float?
  peakViewers     Int               @default(0)

  // Network metrics
  connectionQuality Float?          // 0-1 scale
  latencyStats     String             @default("{}")
  droppedFrames    Int              @default(0)

  // Winner tracking
  winnerId        String?

  @@index([gameId])
  @@index([status])
  @@index([venueId])
  @@index([startTime])
}

model Friendship {
  id           String            @id @default(uuid())
  requesterId  String
  addresseeId  String
  requester    User              @relation("FriendRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee    User              @relation("FriendAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  status       String            @default("PENDING")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([requesterId, addresseeId])
  @@index([addresseeId, status])
  @@index([requesterId, status])
}

model ActivityEvent {
  id          String   @id @default(uuid())
  type        String
  message     String
  userId      String?
  user        User?    @relation("UserActivityEvents", fields: [userId], references: [id])
  venueId     String?
  venue       Venue?   @relation("VenueActivityEvents", fields: [venueId], references: [id])
  tournamentId String?
  tournament  Tournament? @relation("TournamentActivityEvents", fields: [tournamentId], references: [id])
  matchId     String?
  match       Match?   @relation("MatchActivityEvents", fields: [matchId], references: [id])
  clanId      String?
  clan        Clan?    @relation("ClanActivityEvents", fields: [clanId], references: [id])
  metadata    String   @default("{}") // JSON string for additional data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DirectMessage {
  id          String   @id @default(uuid())
  content     String
  timestamp   DateTime @default(now())
  isRead      Boolean  @default(false)
  senderId    String
  receiverId  String
  sender      User     @relation("DM_Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("DM_Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId, timestamp])
}

model MarketplaceItem {
  id          String              @id @default(uuid())
  name        String
  description String?
  price       Int
  imageUrl    String?
  inventory   UserInventoryItem[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model UserInventoryItem {
  id        String           @id @default(uuid())
  userId    String
  itemId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      MarketplaceItem  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())

  @@unique([userId, itemId])
  @@index([userId])
  @@index([itemId])
}


// Shadow Run feature

enum ShadowRunStatus {
  IN_PROGRESS
  SUCCESS
  FAILED
}

enum ShadowRunType {
  DATA_HEIST
  SABOTAGE
}

model ShadowRun {
  id               String           @id @default(uuid())
  initiatingClanId String
  initiatingClan   Clan             @relation("InitiatingClan", fields: [initiatingClanId], references: [id])
  targetVenueId    String
  targetVenue      Venue            @relation("TargetVenue", fields: [targetVenueId], references: [id])
  type             ShadowRunType
  status           ShadowRunStatus  @default(IN_PROGRESS)
  cost             Int              @default(0)
  outcome          Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([initiatingClanId])
  @@index([targetVenueId])
}


model Season {
  id              String    @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean   @default(true)
  finalStandings  Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([isActive])
}


model VenueQuest {
  id               String   @id @default(uuid())
  venueId          String
  venue            Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  title            String
  description      String?
  rewardDojoCoins  Int
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
