generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String                 @id @default(uuid())
  email         String                 @unique
  username      String                 @unique
  passwordHash  String
  role          String                 @default("USER") // Changed from enum to String
  profile       Profile?
  settings      UserSettings?
  wallets       Wallet[]
  nfts          UserNFT[]
  achievements  UserAchievement[]
  memberships   ClanMember[]
  territories   Territory[]            @relation("TerritoryOwner")
  checkIns      CheckIn[]
  challengesAsChallenger Challenge[]   @relation("ChallengeChallenger")
  challengesAsDefender   Challenge[]   @relation("ChallengeDefender")
  ledClans      Clan[]                 @relation("ClanLeader")
  matchesAsPlayerA Match[]             @relation("PlayerA")
  matchesAsPlayerB Match[]             @relation("PlayerB")
  matchesAsWinner  Match[]             @relation("MatchWinner")
  matchesAsLoser   Match[]             @relation("MatchLoser")
  tournaments   TournamentParticipant[]
  transactions  Transaction[]
  notifications Notification[]
  auditLogs     AuditLog[]
  venues        Venue[]
  // Friendship relations
  friendshipsAsRequester Friendship[] @relation("FriendRequester")
  friendshipsAsAddressee Friendship[] @relation("FriendAddressee")
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String?
  bio         String?
  avatarUrl   String?
  location    String?
  skillRating Int      @default(0)
  clanTitle   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserSettings {
  id                 String   @id @default(uuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("en")
  timezone           String   @default("UTC")
  privacySettings    String   @default("{}") // Changed from Json to String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Venue {
  id          String        @id @default(uuid())
  name        String
  description String?
  lat         Float
  lng         Float
  address     String?
  ownerId     String?
  owner       User?         @relation(fields: [ownerId], references: [id])
  tables      Table[]
  tournaments Tournament[]
  territories Territory[]
  checkIns    CheckIn[]
  challenges  Challenge[]
  matches     Match[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Table {
  id        String      @id @default(uuid())
  venueId   String
  venue     Venue       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  name      String
  status    String      @default("AVAILABLE") // Changed from enum to String
  matches   Match[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Tournament {
  id              String                 @id @default(uuid())
  name            String
  status          String                 @default("REGISTRATION") // Changed from enum to String
  tournamentType  String                 @default("SINGLE_ELIMINATION")
  gameType        String                 @default("EIGHT_BALL")
  venueId         String
  venue           Venue                  @relation(fields: [venueId], references: [id])
  maxParticipants Int                    @default(32)
  entryFee        Float                  @default(0)
  prizePool       Float                  @default(0)
  startDate       DateTime?
  endDate         DateTime?
  participants    TournamentParticipant[]
  matches         Match[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
}

model TournamentParticipant {
  id            String      @id @default(uuid())
  tournamentId  String
  userId        String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt      DateTime   @default(now())
  status        String     @default("ACTIVE") // Changed from enum to String

  @@unique([tournamentId, userId])
}

model Match {
  id            String      @id @default(uuid())
  tournamentId  String?
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  venueId       String
  venue         Venue       @relation(fields: [venueId], references: [id])
  tableId       String?
  table         Table?      @relation(fields: [tableId], references: [id])
  playerAId     String
  playerBId     String
  playerA       User        @relation("PlayerA", fields: [playerAId], references: [id])
  playerB       User        @relation("PlayerB", fields: [playerBId], references: [id])
  winnerId      String?
  winner        User?       @relation("MatchWinner", fields: [winnerId], references: [id])
  loserId       String?
  loser         User?       @relation("MatchLoser", fields: [loserId], references: [id])
  scoreA        Int         @default(0)
  scoreB        Int         @default(0)
  status        String      @default("PENDING") // Changed from enum to String
  round         Int?
  startedAt     DateTime?
  endedAt       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Challenge {
  id            String      @id @default(uuid())
  challengerId  String
  challenger    User        @relation("ChallengeChallenger", fields: [challengerId], references: [id])
  defenderId    String
  defender      User        @relation("ChallengeDefender", fields: [defenderId], references: [id])
  venueId       String
  venue         Venue       @relation(fields: [venueId], references: [id])
  status        String      @default("PENDING") // Changed from enum to String
  message       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Territory {
  id          String   @id @default(uuid())
  name        String
  description String?
  venueId     String
  venue       Venue    @relation(fields: [venueId], references: [id])
  ownerId     String
  owner       User     @relation("TerritoryOwner", fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CheckIn {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id])
  checkedInAt DateTime @default(now())
}

model Clan {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  leaderId    String
  leader      User          @relation("ClanLeader", fields: [leaderId], references: [id])
  members     ClanMember[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ClanMember {
  id        String   @id @default(uuid())
  clanId    String
  clan      Clan     @relation(fields: [clanId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   @default("MEMBER") // Changed from enum to String
  joinedAt  DateTime @default(now())

  @@unique([clanId, userId])
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address   String   @unique
  chain     String
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(uuid())
  walletId  String
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  amount    Float
  type      String   @default("DEBIT") // Changed from enum to String
  metadata  String   @default("{}") // Changed from Json to String
  createdAt DateTime @default(now())
}

model NFT {
  id        String    @id @default(uuid())
  contract  String
  tokenId   String
  chain     String
  metadata  String    @default("{}") // Changed from Json to String
  users     UserNFT[]
  createdAt DateTime  @default(now())

  @@unique([contract, tokenId, chain])
}

model UserNFT {
  id        String   @id @default(uuid())
  userId    String
  nftId     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nft       NFT      @relation(fields: [nftId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, nftId])
}

model Achievement {
  id          String            @id @default(uuid())
  key         String            @unique
  name        String
  desc        String?
  description String?
  icon        String?
  criteria    String?           @default("{}") // Changed from Json to String
  points      Int               @default(0)
  users       UserAchievement[]
  createdAt   DateTime          @default(now())
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt      DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  payload   String   @default("{}") // Changed from Json to String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String
  target    String?
  metadata  String   @default("{}") // Changed from Json to String
  ts        DateTime @default(now())
}

model Friendship {
  id           String   @id @default(uuid())
  requesterId  String
  addresseeId  String
  requester    User     @relation("FriendRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee    User     @relation("FriendAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  status       String   @default("PENDING") // Changed from enum to String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([requesterId, addresseeId])
  @@index([addresseeId, status])
  @@index([requesterId, status])
}
