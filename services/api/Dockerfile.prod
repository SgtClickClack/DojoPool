# DojoPool API Service Dockerfile
FROM node:20-alpine AS base
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl \
    libc6-compat

# Copy workspace configuration
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn ./.yarn

# Copy package.json files for dependency resolution
COPY services/api/package.json ./services/api/
COPY packages/prisma/package.json ./packages/prisma/
COPY packages/types/package.json ./packages/types/
COPY packages/config/package.json ./packages/config/

# Install dependencies with proper caching
RUN yarn install --check-cache

# Copy source code
COPY packages/ ./packages/
COPY services/api/ ./services/api/

# Generate Prisma client
WORKDIR /app/services/api
ENV DATABASE_URL="postgresql://postgres:postgres@localhost:5432/dojopool_test"
RUN yarn prisma:generate

# Build the application
RUN yarn build

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache openssl libc6-compat

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Create logs directory with proper permissions
RUN mkdir -p logs && chown -R nestjs:nodejs logs

# Copy built application
COPY --from=base --chown=nestjs:nodejs /app/services/api/dist ./dist
COPY --from=base --chown=nestjs:nodejs /app/services/api/package.json ./
COPY --from=base --chown=nestjs:nodejs /app/node_modules ./node_modules

# Set environment
ENV NODE_ENV=production
ENV PORT=3002

USER nestjs
EXPOSE 3002

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["node", "dist/main.js"]