// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(uuid())
  email                  String        @unique
  password               String
  role                   String        @default("user")
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  profile                Profile?
  settings               UserSettings?
  territories            Territory[]   @relation("TerritoryOwner")
  nfts                   UserNFT[]
  challengesAsChallenger Challenge[]   @relation("ChallengeChallenger")
  challengesAsDefender   Challenge[]   @relation("ChallengeDefender")
  nominations            Nomination[]
  playerAchievements    PlayerAchievement[] @relation("PlayerAchievements")
  friendshipsAsRequester Friendship[] @relation("FriendshipRequester")
  friendshipsAsAddressee Friendship[] @relation("FriendshipAddressee")

  // Phase 4 additions
  homeDojoId    String? // references Territory.id
  homeDojo      Territory? @relation("UserHomeDojo", fields: [homeDojoId], references: [id])
  unlockedZones String     @default("[]") // Array of zone IDs as JSON string
  relationships String     @default("{}") // { friends: [userId], rivals: [userId] } as JSON string

  @@map("users")
}

model Profile {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName   String?
  bio           String?
  avatarUrl     String?
  location      String?
  skillLevel    Int      @default(0)
  preferredGame String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("profiles")
}

model UserSettings {
  id                   String   @id @default(uuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(true)
  darkMode             Boolean  @default(false)
  language             String   @default("en")
  timezone             String   @default("UTC")
  privacySettings      String   @default("{}") // JSON string
  notificationSettings String   @default("{}") // JSON string
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("user_settings")
}

model Territory {
  id            String      @id @default(uuid())
  name          String      @unique
  description   String?
  coordinates   String // Array of {lat: number, lng: number} as JSON string
  requiredNFT   String      @unique
  influence     Int         @default(0)
  ownerId       String?
  owner         User?       @relation("TerritoryOwner", fields: [ownerId], references: [id])
  clan          String?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  nfts          UserNFT[]
  challenges    Challenge[]
  homeDojoUsers User[]      @relation("UserHomeDojo")
  customizations DojoCustomization[] @relation("DojoCustomizations")

  // Phase 4 additions
  venueOwnerId    String?
  status          String  @default("unconfirmed") // verified, unconfirmed, pending_verification
  leaderboard     String  @default("[]") // Array of player objects as JSON string
  allegianceMeter Int     @default(0)
  tournaments     Tournament[] @relation("TournamentVenue")

  @@map("territories")
}

model UserNFT {
  id          String     @id @default(uuid())
  tokenId     String     @unique
  name        String
  description String?
  imageUrl    String?
  metadata    String     @default("{}") // JSON string
  acquiredAt  DateTime   @default(now())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  territoryId String?
  territory   Territory? @relation(fields: [territoryId], references: [id])
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("user_nfts")
}

model Tournament {
  id              String    @id @default(uuid())
  name            String
  format          String // SINGLE_ELIMINATION, DOUBLE_ELIMINATION, ROUND_ROBIN, etc.
  venueId         String
  venue           Territory @relation("TournamentVenue", fields: [venueId], references: [id])
  startDate       DateTime
  endDate         DateTime
  maxParticipants Int
  entryFee        Float
  prizePool       Float
  status          String    @default("OPEN") // OPEN, ACTIVE, COMPLETED, CANCELLED
  participants    String    @default("[]") // Array of participant IDs as JSON string
  matches         String    @default("[]") // Array of match IDs as JSON string
  winnerId        String?
  finalStandings  String    @default("[]") // Array of player IDs in final order as JSON string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  endedAt         DateTime?

  @@map("tournaments")
}

model Challenge {
  id           String    @id @default(uuid())
  type         String // pilgrimage, gauntlet, duel
  challengerId String
  challenger   User      @relation("ChallengeChallenger", fields: [challengerId], references: [id])
  defenderId   String
  defender     User      @relation("ChallengeDefender", fields: [defenderId], references: [id])
  dojoId       String
  dojo         Territory @relation(fields: [dojoId], references: [id])
  status       String    @default("active") // active, accepted, declined, completed
  outcome      String? // win, loss, draw, pending
  winnerId     String?
  requirements String    @default("{}") // { wins: number, topTenDefeats: number, masterDefeat: number } as JSON string
  matchData    String? // Match result data as JSON string
  expiresAt    DateTime
  acceptedAt   DateTime?
  declinedAt   DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("challenges")
}

model Nomination {
  id          String   @id @default(uuid())
  playerId    String
  player      User     @relation("ChallengeDefender", fields: [playerId], references: [id], onDelete: Cascade)
  name        String
  address     String
  latitude    Float
  longitude   Float
  description String?
  contactInfo String?
  status      String   @default("pending_community_verification")
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("nominations")
}

model Achievement {
  id          String   @id @default(uuid())
  name        String
  description String?
  icon        String?
  points      Int      @default(0)
  category    String?  // e.g., "game", "tournament", "social", "milestone"
  criteria    String   @default("{}") // JSON string of unlock conditions
  rarity      Float    @default(0.0) // Percentage of users who have this
  isSecret    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  playerAchievements PlayerAchievement[]

  @@map("achievements")
}

model PlayerAchievement {
  id            String      @id @default(uuid())
  playerId      String
  player        User        @relation("PlayerAchievements", fields: [playerId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation("PlayerAchievements", fields: [achievementId], references: [id], onDelete: Cascade)
  dateUnlocked  DateTime    @default(now())
  progress      Int?        // Current progress towards achievement (if applicable)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([playerId, achievementId])
  @@map("player_achievements")
}

model Friendship {
  id            String   @id @default(uuid())
  requesterId   String
  requester     User     @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  addresseeId   String
  addressee     User     @relation("FriendshipAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  status        String   @default("PENDING") // PENDING, ACCEPTED, DECLINED, BLOCKED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  acceptedAt    DateTime?
  declinedAt    DateTime?
  blockedAt     DateTime?

  @@unique([requesterId, addresseeId])
  @@map("friendships")
}

model CustomizationItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String   // FLOOR, WALL, DECORATION, LIGHTING, SOUND, etc.
  category    String   // BASIC, PREMIUM, LEGENDARY, etc.
  imageUrl    String?
  previewUrl  String?
  rarity      Float    @default(0.0) // Percentage of users who have this
  unlockCost  Int      @default(0) // Cost in Dojo Coins or other currency
  requirements String  @default("{}") // JSON string of unlock conditions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  dojoCustomizations DojoCustomization[]

  @@map("customization_items")
}

model DojoCustomization {
  id                  String            @id @default(uuid())
  dojoId              String
  dojo                Territory         @relation("DojoCustomizations", fields: [dojoId], references: [id], onDelete: Cascade)
  customizationItemId String
  customizationItem   CustomizationItem @relation(fields: [customizationItemId], references: [id], onDelete: Cascade)
  isApplied           Boolean           @default(false) // Whether this item is currently active on the dojo
  appliedAt           DateTime?
  unlockedAt          DateTime          @default(now())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([dojoId, customizationItemId])
  @@map("dojo_customizations")
}
