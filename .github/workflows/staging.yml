name: Staging Deployment
on:
  push:
    paths:
      - 'src/**'
      - '.github/workflows/staging.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'docker/**'
      - 'docker-compose.staging.yml'
    branches:
      - staging
  pull_request:
    paths:
      - 'src/**'
      - '.github/workflows/staging.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'docker/**'
      - 'docker-compose.staging.yml'
    branches:
      - staging

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: npm
      
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: nextjs-${{runner.os}}-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            nextjs-${{runner.os}}-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/
          retention-days: 30

  security-scan:
    name: Security Scan
    needs: test
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Cache Snyk CLI
        uses: actions/cache@v3
        with:
          path: ~/.snyk
          key: snyk-${{runner.os}}-${{hashFiles('**/package.json')}}
          restore-keys: |
            snyk-${{runner.os}}-
      
      - name: Run security scan
        uses: snyk/actions-node@v3
        env:
          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}
        with:
          args: --severity-threshold=high
      
      - name: Cache OWASP dependency check
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: owasp-${{runner.os}}-${{hashFiles('**/package.json')}}
          restore-keys: |
            owasp-${{runner.os}}-
      
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DojoPool'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired
        
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            reports/
            dependency-check-report.html
          retention-days: 30

  build:
    name: Build and Push
    needs: [test, security-scan]
    timeout-minutes: 30
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.docker_build.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{runner.os}}-${{github.sha}}
          restore-keys: |
            buildx-${{runner.os}}-
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: dojopoolapp/staging:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to Staging
    needs: build
    timeout-minutes: 30
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.set_url.outputs.url }}
    outputs:
      deployment_url: ${{ steps.set_url.outputs.url }}
    steps:
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{secrets.STAGING_SSH_KEY}}
      
      - name: Deploy to staging
        run: |
          ssh ${{secrets.STAGING_SERVER_USER}}@${{secrets.STAGING_SERVER_HOST}} << 'ENDSSH'
            cd /opt/dojopool
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f
          ENDSSH
      
      - name: Set deployment URL
        id: set_url
        run: echo "url=https://${{secrets.STAGING_DOMAIN}}" >> $GITHUB_OUTPUT
      
      - name: Run health check
        run: |
          for i in {1..12}; do
            if curl --silent --fail "https://${{secrets.STAGING_DOMAIN}}/health"; then
              echo "Health check passed"
              exit 0
            fi
            echo "Waiting for service to be healthy... (attempt $i/12)"
            sleep 10
          done
          echo "Health check failed after 2 minutes"
          exit 1
      
      - name: Verify deployment
        run: |
          # Check if main page is accessible
          curl --fail --silent "https://${{secrets.STAGING_DOMAIN}}" > /dev/null
          
          # Check if API is responsive
          curl --fail --silent "https://${{secrets.STAGING_DOMAIN}}/api/health" > /dev/null
      
      - name: Notify deployment status
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK}}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{job.status == 'success' && 'good' || 'danger'}}
          SLACK_TITLE: Staging Deployment ${{job.status == 'success' && 'Successful' || 'Failed'}}
          SLACK_MESSAGE: |
            Environment: ${{secrets.STAGING_DOMAIN}}
            Image: dojopoolapp/staging@${{needs.build.outputs.image_tag}}
            Branch: ${{github.ref_name}}
            Commit: ${{github.sha}}

  smoke-test:
    name: Smoke Tests
    needs: deploy
    if: success()
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Run smoke tests
        run: |
          # Basic endpoint checks
          curl -sSf "${{needs.deploy.outputs.deployment_url}}/health" > /dev/null
          curl -sSf "${{needs.deploy.outputs.deployment_url}}/api/health" > /dev/null
          
          # Check response times
          time curl -sSf "${{needs.deploy.outputs.deployment_url}}" > /dev/null
          time curl -sSf "${{needs.deploy.outputs.deployment_url}}/api/health" > /dev/null
