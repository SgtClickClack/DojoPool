name: Staging Deployment
on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '**.txt'
    branches:
      - staging
  pull_request:
    branches:
      - staging

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check

  security-scan:
    needs: test
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache Snyk CLI
        uses: actions/cache@v4
        with:
          path: ~/.snyk
          key: snyk-${{runner.os}}-${{hashFiles('**/package.json')}}
      
      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}
      
      - name: Cache OWASP dependency check
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: owasp-${{runner.os}}-${{hashFiles('**/package.json')}}
      
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: DojoPool
          path: .
          format: HTML

  build:
    needs: [test, security-scan]
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: dojopoolapp/staging:latest
          cache-from: type=registry,ref=dojopoolapp/staging:buildcache
          cache-to: type=registry,ref=dojopoolapp/staging:buildcache,mode=max

  deploy:
    needs: build
    timeout-minutes: 30
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{steps.deploy.outputs.url}}
    steps:
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{secrets.STAGING_SSH_KEY}}
      
      - name: Deploy to staging
        run: |
          ssh ${{secrets.STAGING_SERVER_USER}}@${{secrets.STAGING_SERVER_HOST}} << 'ENDSSH'
            cd /opt/dojopool
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f
          ENDSSH
      
      - name: Run health check
        run: |
          curl --retry 5 --retry-delay 10 -f https://${{secrets.STAGING_DOMAIN}}/health
      
      - name: Notify deployment status
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.1
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK}}
          SLACK_MESSAGE: Staging deployment ${{job.status}}
          SLACK_COLOR: ${{job.status == 'success' && 'good' || 'danger'}}
