name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Linter (flake8)
        run: |
          if [ -f .flake8 ] || [ -f setup.cfg ]; then
              pip install flake8
              flake8 .
          else
              echo "No flake8 config found, skipping linting."
          fi

      - name: Run Backend Tests
        run: |
          if [ -d tests ]; then
              pip install pytest
              pytest --maxfail=1 --disable-warnings -q
          else
              echo "No tests found for backend."
          fi

  frontend:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Frontend Dependencies
        run: npm install

      - name: Run Linter (ESLint)
        run: |
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
              npm run lint || true
          else
              echo "No ESLint configuration found, skipping linting."
          fi

      - name: Run Frontend Tests
        run: |
          if [ -f package.json ]; then
              npm test -- --watchAll=false
          else
              echo "No package.json found, skipping frontend tests."
          fi

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r dev-requirements.txt
        pip install pytest-cov codecov

    - name: Run tests with coverage
      run: |
        pytest --cov=src/dojopool --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
        retention-days: 14

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor

    - name: Run Bandit
      run: |
        pip install bandit
        bandit -r src/dojopool -f json -o security-report.json
        
    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: security-report.json
        retention-days: 14

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort

    - name: Run black
      run: black --check src/dojopool

    - name: Run flake8
      run: flake8 src/dojopool

    - name: Run mypy
      run: mypy src/dojopool

    - name: Run isort
      run: isort --check-only src/dojopool

  build:
    needs: [test, security, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: dojopool/backend:latest
        cache-from: type=registry,ref=dojopool/backend:buildcache
        cache-to: type=registry,ref=dojopool/backend:buildcache,mode=max

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: dojopool/frontend:latest
        cache-from: type=registry,ref=dojopool/frontend:buildcache
        cache-to: type=registry,ref=dojopool/frontend:buildcache,mode=max 