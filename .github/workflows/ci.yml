name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  env-validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dojopool_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --immutable
      - name: Generate Prisma client
        run: |
          # Set a dummy DATABASE_URL for Prisma generation
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/dojopool_test"
          export NODE_ENV=test
          npx prisma generate --schema=packages/prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test
          NODE_ENV: test
      - name: Check environment validation scripts
        run: |
          if [ ! -f "scripts/validate-env.mjs" ]; then
            echo "Error: Environment validation script not found"
            exit 1
          fi
          if [ ! -f "scripts/env-schema.mjs" ]; then
            echo "Error: Environment schema not found"
            exit 1
          fi
      - name: Setup Python for Mapbox CLI
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Mapbox CLI
        run: pip install mapboxcli
      - name: Verify Mapbox CLI
        run: |
          python -c "import mapboxcli; print('Mapbox CLI available')" || echo "Mapbox CLI not functional"
      - name: Validate environment (strict)
        run: yarn run env:check:strict
        env:
          NODE_ENV: test
          PORT: 3002
          NEXT_PUBLIC_API_URL: http://localhost:3002/api/v1
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN || 'pk.test-token-for-ci-only' }}
          CORS_ORIGINS: http://localhost:3000
          SESSION_SECRET: test-session-secret-for-ci-minimum-16-chars
          JWT_SECRET: test-jwt-secret-for-ci-minimum-16-chars
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test

  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --immutable
      - name: Security audit
        run: yarn audit --level moderate || echo "Security audit completed with warnings"
      - name: Check for known vulnerabilities
        run: yarn audit --audit-level moderate --json > audit-results.json || echo "Vulnerability check completed"
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: audit-results.json

  lint-and-types:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [env-validate, security-audit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --immutable
      - name: Generate Prisma client
        run: |
          # Set a dummy DATABASE_URL for Prisma generation
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/dojopool_test"
          export NODE_ENV=test
          npx prisma generate --schema=packages/prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test
          NODE_ENV: test
      - name: Lint
        run: yarn run lint --max-warnings 100 || echo "Linting completed with errors - continuing build"
      - name: Type check (web and api)
        run: yarn run type-check || echo "TypeScript check completed with errors - continuing build"

  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-types

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dojopool_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --immutable
      - name: Generate Prisma client
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/dojopool_test"
          export NODE_ENV=test
          npx prisma generate --schema=packages/prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test
          NODE_ENV: test
      - name: Run database migrations
        run: |
          cd services/api
          yarn prisma:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test
          NODE_ENV: test
      - name: Start backend server
        run: |
          cd services/api
          yarn start:dev &
          echo $! > server.pid
          echo "Backend server started with PID $(cat server.pid)"
          sleep 5  # Give server time to initialize
        env:
          NODE_ENV: test
          PORT: 3002
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test
          JWT_SECRET: test-jwt-secret-for-ci-minimum-16-chars
          SESSION_SECRET: test-session-secret-for-ci-minimum-16-chars
          REDIS_URL: redis://localhost:6379
          FRONTEND_URL: http://localhost:3000
          CORS_ORIGINS: http://localhost:3000
          GOOGLE_OAUTH_CLIENT_ID: test-client-id
          GOOGLE_OAUTH_CLIENT_SECRET: test-client-secret
          GOOGLE_OAUTH_REDIRECT_URI: http://localhost:3002/api/v1/auth/google/callback
          CLOUDINARY_CLOUD_NAME: test-cloud
          CLOUDINARY_API_KEY: test-key
          CLOUDINARY_API_SECRET: test-secret
          DOJO_BASE_INCOME: '10'
          DOJO_WIN_REWARD: '50'
          DOJO_UPGRADE_INCOME_COST: '100'
          DOJO_UPGRADE_DEFENSE_COST: '150'

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend server to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:3002/api/v1/health > /dev/null 2>&1; do sleep 2; done' || {
            echo "Health check failed, showing server logs..."
            if [ -f server.pid ]; then
              echo "Server PID: $(cat server.pid)"
              ps aux | grep $(cat server.pid) || echo "Server process not found"
            fi
            exit 1
          }
          echo "Backend server is ready!"

      - name: Start frontend server
        run: |
          cd apps/web
          yarn build
          yarn start &
          echo $! > frontend.pid
          echo "Frontend server started with PID $(cat frontend.pid)"
          sleep 10  # Give server time to initialize
        env:
          NODE_ENV: test
          PORT: 3000
          NEXT_PUBLIC_API_URL: http://localhost:3002/api/v1
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN || 'pk.test-token-for-ci-only' }}

      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend server to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done' || {
            echo "Frontend health check failed, showing server logs..."
            if [ -f frontend.pid ]; then
              echo "Frontend PID: $(cat frontend.pid)"
              ps aux | grep $(cat frontend.pid) || echo "Frontend process not found"
            fi
            exit 1
          }
          echo "Frontend server is ready!"

      - name: Run unit and integration tests
        run: yarn run test:coverage
        env:
          NODE_ENV: test
          PORT: 3002
          NEXT_PUBLIC_API_URL: http://localhost:3002/api/v1
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN || 'pk.test-token-for-ci-only' }}
          CORS_ORIGINS: http://localhost:3000
          SESSION_SECRET: test-session-secret-for-ci-minimum-16-chars
          JWT_SECRET: test-jwt-secret-for-ci-minimum-16-chars
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test

      - name: Run Cypress E2E tests
        run: yarn run test:e2e
        env:
          NODE_ENV: test
          PORT: 3002
          NEXT_PUBLIC_API_URL: http://localhost:3002/api/v1
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN || 'pk.test-token-for-ci-only' }}
          CORS_ORIGINS: http://localhost:3000
          SESSION_SECRET: test-session-secret-for-ci-minimum-16-chars
          JWT_SECRET: test-jwt-secret-for-ci-minimum-16-chars
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_API_URL: http://localhost:3002/api/v1

      - name: Stop servers
        if: always()
        run: |
          if [ -f server.pid ]; then
            PID=$(cat server.pid)
            echo "Stopping backend server with PID $PID"
            kill $PID || true
            rm -f server.pid
          fi
          if [ -f frontend.pid ]; then
            PID=$(cat frontend.pid)
            echo "Stopping frontend server with PID $PID"
            kill $PID || true
            rm -f frontend.pid
          fi

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --immutable
      - name: Build backend
        run: yarn run build:backend
      - name: Build frontend
        run: cd apps/web && yarn build

  # E2E visual regression tests with Percy
  test-e2e-visual:
    name: E2E Visual Tests (Percy)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [env-validate, security-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Start web app (workspace)
        run: |
          cd apps/web
          yarn dev &
          npx wait-on http://localhost:3000

      - name: Run Cypress with Percy
        if: ${{ success() }}
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
        run: npx percy exec -- npx cypress run