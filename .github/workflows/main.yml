on:name: CI
on:
  push:
    branches:
    - main
    paths:
    - src/**
    - package.json
    - package-lock.json
    - next.config.js
    - tsconfig.json
    - cypress/**
    - tests/**
  pull_request:
    branches:
    - main
    paths:
    - src/**
    - package.json
    - package-lock.json
    - next.config.js
    - tsconfig.json
    - cypress/**
    - tests/**
permissions:
  contents: read
  actions: write
  checks: write
  pull-requests: write
  security-events: write
  issues: write
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
      continue-on-error: true
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: npm
      continue-on-error: true
    - name: Cache dependencies
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: '~/.npm

          node_modules

          .next/cache

          '
        key: ${{{ runner.os }}-node-${{{ hashFiles('**/package-lock.json') }}
        restore-keys: '${{{ runner.os }}-node-

          '
      continue-on-error: true
    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true''
      run: "for i in {1..3}}; do\n  echo \"Attempt $i of 3\"\n  if npm ci; then\n\
        \    exit 0\n  fi\n  echo \"npm ci failed, retrying...\"\n  sleep 5\ndone\n\
        exit 1\n"
      continue-on-error: true
      timeout-minutes: 10
    - name: Run linter
      run: npm run lint
      continue-on-error: true
      timeout-minutes: 10
    - name: Run tests
      id: test
      run: "for i in {1..3}}; do\n  echo \"Attempt $i of 3\"\n  if npm run test --\
        \ --coverage; then\n    echo \"Tests passed on attempt $i\"\n    exit 0\n\
        \  fi\n  echo \"Tests failed on attempt $i\"\n  sleep 10\ndone\necho \"All\
        \ test attempts failed\"\nexit 1\n"
      continue-on-error: true
      timeout-minutes: 10
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: coverage/
        retention-days: 30
        if-no-files-found: warn
      continue-on-error: true
    - name: Report test status
      if: failure()
      run: 'echo "::error::Tests failed after 3 attempts"

        echo "::group::Test Logs"

        cat test.log || true

        echo "::endgroup::"

        '
      continue-on-error: true
      timeout-minutes: 10
    strategy:
      fail-fast: false
    retry-strategy:
      max-attempts: 2
      retry-on:
      - error
      - timeout
  security:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
      continue-on-error: true
    - name: Cache Snyk CLI
      uses: actions/cache@v3
      with:
        path: ~/.snyk
        key: snyk-${{{ runner.os }}-${{{ hashFiles('**/package.json') }}
      continue-on-error: true
    - name: Install Snyk CLI
      run: npm install -g snyk
      continue-on-error: true
    - name: Run Snyk to check for vulnerabilities
      run: snyk test --severity-threshold=high
      env:
        SNYK_TOKEN: ${{{ secrets.SNYK_TOKEN }}
      continue-on-error: true
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: DojoPool
        path: .
        format: HTML
        args: '--failOnCVSS 7 --enableRetired

          '
      continue-on-error: true
    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: 'reports/

          snyk-*.json

          '
        retention-days: 30
        if-no-files-found: warn
      continue-on-error: true
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name,
      'security') }}
  deploy-staging:
    name: Deploy to Staging
    needs:
    - test
    - security
    if: github.event_name == 'push' && github.ref == 'refs/heads/main''
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment:
      name: staging
      url: ${{{ steps.deploy.outputs.url }}
    steps:
    - uses: actions/checkout@v4
      continue-on-error: true
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: npm
      continue-on-error: true
    - name: Install dependencies
      run: npm ci
      continue-on-error: true
    - name: Build
      run: npm run build
      env:
        NODE_ENV: staging
        NEXT_PUBLIC_API_URL: ${{{ secrets.STAGING_API_URL }}
      continue-on-error: true
    - name: Deploy to Vercel
      id: deploy
      uses: amondnet/vercel-action@v20
      with:
        zeit-token: ${{{ secrets.VERCEL_TOKEN }}
        vercel-token: ${{{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: --prod
        working-directory: .
      continue-on-error: true
    - name: Health check
      run: "for i in {1..12}}; do\n  if curl -sSf \"${{{ steps.deploy.outputs.url\
        \ }}/health\" > /dev/null; then\n    echo \"Health check passed\"\n    exit\
        \ 0\n  fi\n  echo \"Waiting for service to be healthy... (attempt $i/12)\"\
        \n  sleep 10\ndone\necho \"Health check failed after 2 minutes\"\nexit 1\n"
      continue-on-error: true
    - name: Notify Slack
      if: always()
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_WEBHOOK: ${{{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{{ job.status == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: Staging Deployment ${{{ job.status == 'success' && 'Successful''
          || 'Failed' }}
        SLACK_MESSAGE: 'Environment: Staging

          Branch: ${{{ github.ref_name }}

          Commit: ${{{ github.sha }}

          URL: ${{{ steps.deploy.outputs.url }}

          '
      continue-on-error: true
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main''
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment:
      name: production
      url: ${{{ steps.deploy.outputs.url }}
    steps:
    - uses: actions/checkout@v4
      continue-on-error: true
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: npm
      continue-on-error: true
    - name: Install dependencies
      run: npm ci
      continue-on-error: true
    - name: Build
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${{{ secrets.PROD_API_URL }}
      continue-on-error: true
    - name: Deploy to Firebase
      id: deploy
      uses: FirebaseExtended/action-hosting-deploy@v0.7.1
      with:
        repoToken: ${{{ secrets.GITHUB_TOKEN }}
        firebaseServiceAccount: ${{{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        channelId: live
        projectId: ${{{ secrets.FIREBASE_PROJECT_ID }}
      continue-on-error: true
    - name: Health check
      run: "for i in {1..12}}; do\n  if curl -sSf \"${{{ steps.deploy.outputs.url\
        \ }}/health\" > /dev/null; then\n    echo \"Health check passed\"\n    exit\
        \ 0\n  fi\n  echo \"Waiting for service to be healthy... (attempt $i/12)\"\
        \n  sleep 10\ndone\necho \"Health check failed after 2 minutes\"\nexit 1\n"
      continue-on-error: true
    - name: Notify Slack
      if: always()
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_WEBHOOK: ${{{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{{ job.status == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: Production Deployment ${{{ job.status == 'success' && 'Successful''
          || 'Failed' }}
        SLACK_MESSAGE: 'Environment: Production

          Branch: ${{{ github.ref_name }}

          Commit: ${{{ github.sha }}

          URL: ${{{ steps.deploy.outputs.url }}

          '
      continue-on-error: true
