name: CI
on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '**.txt'
    branches:
    - main
    paths:
    - src/**
    - .github/workflows/**
  pull_request:
    branches:
    - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: npm
    - name: Install dependencies
      run: npm ci
    - name: Run linting
      run: npm run lint
    - name: Run unit tests
      run: npm run test
    - name: Run E2E tests
      uses: cypress-io/github-action@v6
      with:
        start: npm run dev
        wait-on: http://localhost:3000
        browser: chrome
        record: true
      env:
        CYPRESS_RECORD_KEY: ${{secrets.CYPRESS_RECORD_KEY}}
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Run Percy visual tests
      run: npx percy exec -- cypress run -s "cypress/e2e/visual.cy.ts"
      env:
        PERCY_TOKEN: ${{secrets.PERCY_TOKEN}}
    - name: Run performance tests
      run: npx cypress run -s "cypress/e2e/performance.cy.ts"
      env:
        CYPRESS_RECORD_KEY: ${{secrets.CYPRESS_RECORD_KEY}}

  deploy-staging:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: npm
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{secrets.NEXT_PUBLIC_FIREBASE_API_KEY}}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID}}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${{secrets.NEXT_PUBLIC_FIREBASE_APP_ID}}
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{secrets.VERCEL_TOKEN}}
        vercel-org-id: ${{secrets.VERCEL_ORG_ID}}
        vercel-project-id: ${{secrets.VERCEL_PROJECT_ID}}
        vercel-args: --prod
        working-directory: ./

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: npm
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{secrets.NEXT_PUBLIC_FIREBASE_API_KEY}}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID}}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${{secrets.NEXT_PUBLIC_FIREBASE_APP_ID}}
    - name: Deploy to Vercel (Production)
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{secrets.VERCEL_TOKEN}}
        vercel-org-id: ${{secrets.VERCEL_ORG_ID}}
        vercel-project-id: ${{secrets.VERCEL_PROJECT_ID}}
        vercel-args: --prod
        working-directory: ./
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v11
      with:
        urls: |
          ${{steps.deploy.outputs.url}}
          ${{steps.deploy.outputs.url}}/auth/signin
          ${{steps.deploy.outputs.url}}/dashboard
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: ./.github/lighthouse/config.json
    - name: Run performance monitoring
      run: |
        npm install -g lighthouse-ci
        lhci autorun --collect.url=${{steps.deploy.outputs.url}} --upload.target=temporary-public-storage
    - name: Monitor deployment health
      run: |
        curl -sSf ${{steps.deploy.outputs.url}} > /dev/null
        curl -sSf ${{steps.deploy.outputs.url}}/api/health > /dev/null

  notify:
    needs:
    - deploy-production
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3.15.0
      with:
        status: ${{job.status}}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
