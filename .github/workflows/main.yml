name: CI

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tsconfig.json'
  pull_request:
    branches:
      - main

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20.x
          cache: npm

      - name: Cache Next.js build
        uses: actions/cache@v2
        with:
          path: |
            .next/cache
          key: nextjs-${{runner.os}}-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            nextjs-${{runner.os}}-

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test -- --coverage

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: coverage/
          retention-days: 30

  security:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}
        with:
          args: --severity-threshold=high

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DojoPool'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload security scan results
        uses: actions/upload-artifact@v2
        with:
          name: security-scan-results
          path: reports/
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: staging
      url: ${{steps.deploy.outputs.url}}

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NODE_ENV: staging
          NEXT_PUBLIC_API_URL: ${{secrets.STAGING_API_URL}}

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          zeit-token: ${{secrets.VERCEL_TOKEN}}
          vercel-token: ${{secrets.VERCEL_TOKEN}}
          vercel-org-id: ${{secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{secrets.VERCEL_PROJECT_ID}}
          vercel-args: '--prod'
          working-directory: .

      - name: Verify Deployment
        run: |
          sleep 30
          curl -sSf ${{steps.deploy.outputs.url}} > /dev/null || exit 1

      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK}}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{job.status == 'success' && 'good' || 'danger'}}
          SLACK_TITLE: Staging Deployment ${{job.status == 'success' && 'Successful' || 'Failed'}}
          SLACK_MESSAGE: |
            Environment: Staging
            Branch: ${{github.ref_name}}
            Commit: ${{github.sha}}
            URL: ${{steps.deploy.outputs.url}}

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production
      url: ${{steps.deploy.outputs.url}}

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{secrets.PROD_API_URL}}

      - name: Deploy to Firebase
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{secrets.GITHUB_TOKEN}}
          firebaseServiceAccount: ${{secrets.FIREBASE_SERVICE_ACCOUNT}}
          channelId: live
          projectId: ${{secrets.FIREBASE_PROJECT_ID}}

      - name: Verify Deployment
        run: |
          sleep 30
          curl -sSf ${{steps.deploy.outputs.url}} > /dev/null || exit 1
          curl -sSf "https://${{secrets.FIREBASE_PROJECT_ID}}.web.app/__/firebase/init.json" > /dev/null || exit 1

      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK}}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{job.status == 'success' && 'good' || 'danger'}}
          SLACK_TITLE: Production Deployment ${{job.status == 'success' && 'Successful' || 'Failed'}}
          SLACK_MESSAGE: |
            Environment: Production
            Branch: ${{github.ref_name}}
            Commit: ${{github.sha}}
            URL: ${{steps.deploy.outputs.url}}
