name: CI

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tsconfig.json'
      - 'cypress/**'
      - 'tests/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tsconfig.json'
      - 'cypress/**'
      - 'tests/**'

permissions:
  contents: read
  actions: write
  checks: write
  pull-requests: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if npm ci; then
              exit 0
            fi
            echo "npm ci failed, retrying..."
            sleep 5
          done
          exit 1

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        id: test
        run: |
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if npm run test -- --coverage; then
              echo "Tests passed on attempt $i"
              exit 0
            fi
            echo "Tests failed on attempt $i"
            sleep 10
          done
          echo "All test attempts failed"
          exit 1

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/
          retention-days: 30
          if-no-files-found: warn

      - name: Report test status
        if: failure()
        run: |
          echo "::error::Tests failed after 3 attempts"
          echo "::group::Test Logs"
          cat test.log || true
          echo "::endgroup::"

  security:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Snyk CLI
        uses: actions/cache@v3
        with:
          path: ~/.snyk
          key: snyk-${{ runner.os }}-${{ hashFiles('**/package.json') }}

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        run: snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DojoPool'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired
        continue-on-error: true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            reports/
            snyk-*.json
          retention-days: 30
          if-no-files-found: warn

  deploy-staging:
    name: Deploy to Staging
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NODE_ENV: staging
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          zeit-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: .

      - name: Health check
        run: |
          for i in {1..12}; do
            if curl -sSf "${{ steps.deploy.outputs.url }}/health" > /dev/null; then
              echo "Health check passed"
              exit 0
            fi
            echo "Waiting for service to be healthy... (attempt $i/12)"
            sleep 10
          done
          echo "Health check failed after 2 minutes"
          exit 1

      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Staging Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}
          SLACK_MESSAGE: |
            Environment: Staging
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: ${{ steps.deploy.outputs.url }}

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}

      - name: Deploy to Firebase
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0.7.1
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Health check
        run: |
          for i in {1..12}; do
            if curl -sSf "${{ steps.deploy.outputs.url }}/health" > /dev/null; then
              echo "Health check passed"
              exit 0
            fi
            echo "Waiting for service to be healthy... (attempt $i/12)"
            sleep 10
          done
          echo "Health check failed after 2 minutes"
          exit 1

      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Production Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}
          SLACK_MESSAGE: |
            Environment: Production
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: ${{ steps.deploy.outputs.url }}
