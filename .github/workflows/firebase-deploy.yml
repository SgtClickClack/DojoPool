name: Firebase Deployment

on:
  push:
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'firebase.json'
      - '.firebaserc'
      - 'public/**'
    branches:
      - main
      - staging

permissions:
  contents: read
  actions: write
  deployments: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if npm ci; then
              exit 0
            fi
            echo "npm ci failed, retrying..."
            sleep 5
          done
          exit 1

      - name: Build
        run: npm run build
        env:
          NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          NEXT_PUBLIC_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}

      - name: Deploy to Firebase
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0.7.1
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: ${{ github.ref == 'refs/heads/main' && 'live' || 'staging' }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          target: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: Health check
        run: |
          for i in {1..12}; do
            if curl -sSf "${{ steps.deploy.outputs.url }}/health" > /dev/null; then
              echo "Health check passed"
              exit 0
            fi
            echo "Waiting for service to be healthy... (attempt $i/12)"
            sleep 10
          done
          echo "Health check failed after 2 minutes"
          exit 1

      - name: Verify deployment
        run: |
          # Check if main page is accessible
          curl -sSf "${{ steps.deploy.outputs.url }}" > /dev/null
          
          # Check if Firebase config is accessible
          curl -sSf "${{ steps.deploy.outputs.url }}/__/firebase/init.json" > /dev/null
          
          # Check if API is responsive
          curl -sSf "${{ steps.deploy.outputs.url }}/api/health" > /dev/null

      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Firebase Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}
          SLACK_MESSAGE: |
            Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            URL: ${{ steps.deploy.outputs.url }}
