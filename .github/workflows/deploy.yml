name: Deploy and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dojopool_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --immutable

      - name: Run type checking
        run: yarn type-check

      - name: Run unit tests
        run: yarn test:unit

      - name: Run integration tests
        run: yarn test:int
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool_test
          REDIS_URL: redis://localhost:6379

      - name: Build application
        run: yarn build

      - name: Run E2E tests against Docker stack
        run: |
          # Start Docker Compose stack
          docker-compose -f docker-compose.yml up -d --build

          # Wait for services to be ready
          timeout 120 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 5; done'

          # Run Cypress tests
          yarn cypress:run
        env:
          CYPRESS_baseUrl: http://localhost:3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dojopool
          REDIS_URL: redis://localhost:6379

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.yml down

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Enable Corepack
        run: corepack enable
      - name: Install dependencies
        run: yarn install --immutable

      - name: Build application
        run: yarn build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
