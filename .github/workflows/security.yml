name: Security Scan

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write

env:
  MAX_RETRIES: 3
  RETRY_INTERVAL: 10
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  security-checks:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements/security.txt
        shell: pwsh
      
      - name: Run Security Checks
        run: |
          # NPM security audit
          npm audit --audit-level=moderate
          
          # Python dependency check
          pip list --outdated
          pip check
          
          # Run custom security script
          python scripts/bulk_fix_workflows.py
        shell: pwsh
        continue-on-error: true

      - name: Run ESLint Security Rules
        run: |
          npm run lint
        shell: pwsh
        continue-on-error: true

  notify:
    needs: [security-checks]
    runs-on: windows-latest
    if: always()
    steps:
      - name: Check workflow status
        id: check
        run: |
          if ("${{ needs.security-checks.result }}" -eq "success") {
            echo "status=success" >> $env:GITHUB_OUTPUT
            echo "severity=low" >> $env:GITHUB_OUTPUT
          } else {
            echo "status=failure" >> $env:GITHUB_OUTPUT
            echo "severity=high" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Send Notification
        if: env.SLACK_BOT_TOKEN != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SECURITY_SLACK_CHANNEL || 'general' }}
          slack-message: |
            *Security Scan Status*: ${{ steps.check.outputs.status == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
            *Severity*: ${{ steps.check.outputs.severity == 'high' && 'üî¥ High' || 'üü¢ Low' }}
            *Triggered By*: ${{ github.actor }}
            *Event*: ${{ github.event_name }}
            
            ${{ github.server_url }}/${{ github.repository }}/security/code-scanning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
