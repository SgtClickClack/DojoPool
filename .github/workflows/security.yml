name: Security Scan

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours instead of daily
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write

env:
  MAX_RETRIES: 3
  RETRY_INTERVAL: 10
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  verify-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Verify Required Secrets
        id: verify_secrets
        run: |
          missing_secrets=()
          
          # Check security tokens
          if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
            missing_secrets+=("SNYK_TOKEN")
          fi
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            missing_secrets+=("SONAR_TOKEN")
          fi
          if [ -z "${{ secrets.CODACY_TOKEN }}" ]; then
            missing_secrets+=("CODACY_TOKEN")
          fi
          
          # Check notification tokens
          if [ -z "${{ secrets.SLACK_BOT_TOKEN }}" ]; then
            missing_secrets+=("SLACK_BOT_TOKEN")
          fi
          if [ -z "${{ secrets.SLACK_CHANNEL }}" ]; then
            missing_secrets+=("SLACK_CHANNEL")
          fi
          if [ -z "${{ secrets.SECURITY_SLACK_CHANNEL }}" ]; then
            missing_secrets+=("SECURITY_SLACK_CHANNEL")
          fi
          
          # Report missing secrets
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi
          
          echo "All required secrets are configured"

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          npm install -g npm@latest
          npm install -g audit-ci
          pip install safety
      
      - name: Review Dependencies
        id: review
        run: |
          # NPM audit with stricter settings
          audit-ci --high --critical
          
          # Python safety check
          safety check
          
          # Check for outdated dependencies
          npm outdated || true
          pip list --outdated
      
      - name: Run Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  code-scanning:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python security tools
        if: matrix.language == 'python'
        run: |
          pip install bandit pylint safety
          
      - name: Run Bandit
        if: matrix.language == 'python'
        run: bandit -r . -ll -ii -x tests/
        
      - name: Run PyLint Security Checks
        if: matrix.language == 'python'
        run: |
          pylint --disable=all --enable=security,authentication . || true
      
      - name: Setup Node.js
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Node.js security tools
        if: matrix.language == 'javascript'
        run: |
          npm install -g eslint-plugin-security
          
      - name: Run ESLint Security Rules
        if: matrix.language == 'javascript'
        run: |
          eslint . -c .eslintrc.js --plugin security --rule 'security/detect-possible-timing-attacks: error'
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  secret-scanning:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          
      - name: Run trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          
      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan > secrets.baseline
          detect-secrets audit secrets.baseline

  infrastructure-scanning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: all
          
      - name: Run KICS
        uses: Checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          config_path: '.kics/config.yaml'
          exclude_paths: docs,*.md
          output_formats: json,sarif
          output_path: kics-results
          platform_type: terraform,docker,kubernetes
          fail_on: high
          disable_secrets: false
          exclude_categories: ''
          exclude_results: ''
          profiling: false
          
      - name: Run Docker security scan
        uses: azure/container-scan@v0
        with:
          image-name: your-registry/your-image:tag

  notify:
    needs: [dependency-review, code-scanning, secret-scanning, infrastructure-scanning]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check workflow status
        id: check
        run: |
          if [[ "${{ needs.dependency-review.result }}" == "success" && \
                "${{ needs.code-scanning.result }}" == "success" && \
                "${{ needs.secret-scanning.result }}" == "success" && \
                "${{ needs.infrastructure-scanning.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "severity=low" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            if [[ "${{ needs.dependency-review.result }}" == "failure" || \
                  "${{ needs.code-scanning.result }}" == "failure" ]]; then
              echo "severity=high" >> $GITHUB_OUTPUT
            else
              echo "severity=medium" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SECURITY_SLACK_CHANNEL }}
          slack-message: |
            *Security Scan Status*: ${{ steps.check.outputs.status == 'success' && '✅ Passed' || '❌ Failed' }}
            *Severity*: ${{ steps.check.outputs.severity == 'high' && '🔴 High' || steps.check.outputs.severity == 'medium' && '🟡 Medium' || '🟢 Low' }}
            *Triggered By*: ${{ github.actor }}
            *Event*: ${{ github.event_name }}
            
            *Job Results*:
            - Dependency Review: ${{ needs.dependency-review.result }}
            - Code Scanning: ${{ needs.code-scanning.result }}
            - Secret Scanning: ${{ needs.secret-scanning.result }}
            - Infrastructure Scanning: ${{ needs.infrastructure-scanning.result }}
            
            ${{ github.server_url }}/${{ github.repository }}/security/code-scanning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
