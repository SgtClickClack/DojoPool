name: Performance Tests
on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '**.txt'
    branches:
    - main
  pull_request:
    branches:
    - main
  schedule:
  - cron: '0 0 * * *'

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true
jobs:
  timeout-minutes: 60\n  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: npm
    - name: Install dependencies
      run: npm ci
    - name: Install Cypress
      run: npx cypress install
    - name: Run performance tests
      run: |
        npx cypress run --spec "cypress/e2e/performance/**/*.cy.ts" --browser chrome --headless
      env:
        CYPRESS_PERFORMANCE_MODE: true
        CYPRESS_RECORD_KEY: ${{secrets.CYPRESS_RECORD_KEY}}
    - name: Generate performance report
      run: node scripts/generate-performance-report.js
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: cypress/reports/performance
        retention-days: 90
    - name: Check performance thresholds
      run: |
        node scripts/check-performance-thresholds.js
      env:
        FAIL_ON_THRESHOLD_BREACH: true
    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('cypress/reports/performance/report.json', 'utf8'));

          const summary = `## Performance Test Results

          - Total Tests: ${report.summary.totalTests}
          - Passed: ${report.summary.passedTests}
          - Failed: ${report.summary.failedTests}
          - Average Score: ${report.summary.averageScore.toFixed(2)}%

          ${report.summary.failedTests > 0 ? '### Failed Metrics\n\n' + report.metrics
            .filter(m => !m.passed)
            .map(m => `- ${m.name}: ${m.value}${m.unit} (Threshold: ${m.threshold}${m.unit})`)
            .join('\n') : ''}\n`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true
