import { randomBytes } from 'crypto';

interface ScannerConfig {
  target: string;
  excludePaths: string[];
  rateLimit: number;
  concurrent: number;
}

interface TestAccountConfig {
  email: string;
  password: string;
  role: string;
  apiKey: string;
}

interface PentestConfig {
  environment: {
    baseUrl: string;
    apiUrl: string;
    wsUrl: string;
    adminUrl: string;
  };
  scanners: {
    zap: ScannerConfig;
    burp: ScannerConfig;
    acunetix: ScannerConfig;
  };
  testAccounts: {
    admin: TestAccountConfig;
    user: TestAccountConfig;
    readonly: TestAccountConfig;
  };
  rateLimit: {
    auth: number;
    api: number;
    websocket: number;
  };
  timeouts: {
    request: number;
    session: number;
    websocket: number;
  };
  reporting: {
    outputDir: string;
    formats: string[];
    severity: string[];
  };
  tools: {
    zap: {
      port: number;
      apiKey: string;
      timeout: number;
      scanTypes: string[];
      policies: {
        activeScan: {
          maxRuleDuration: number;
          maxScanDuration: number;
          delayInMs: number;
        };
        passiveScan: {
          maxAlertsPerRule: number;
          scanOnlyInScope: boolean;
        };
      };
    };
    nmap: {
      ports: string;
      scanTypes: string[];
      timing: string;
      scripts: string[];
    };
    sqlmap: {
      level: number;
      risk: number;
      techniques: string[];
      dbms: string[];
    };
  };
  authentication: {
    testUsers: {
      role: string;
      username: string;
      password: string;
    }[];
  };
  scope: {
    includedPaths: string[];
    excludedPaths: string[];
  };
  limits: {
    maxRequestsPerSecond: number;
    maxConcurrentScans: number;
    maxScanDuration: number;
    maxReportSize: number;
  };
  notifications: {
    email: {
      enabled: boolean;
      recipients: string[];
      smtp: {
        host: string;
        port: number;
        secure: boolean;
        auth: {
          user: string;
          pass: string;
        };
      };
    };
    slack: {
      enabled: boolean;
      webhookUrl: string;
      channel: string;
    };
  };
}

export const pentestConfig: PentestConfig = {
  environment: {
    baseUrl: 'http://localhost:3000',
    apiUrl: 'http://localhost:3000/api',
    wsUrl: 'wss://staging.dojopool.com/ws',
    adminUrl: process.env.ADMIN_URL || 'http://localhost:3000/admin',
  },

  scanners: {
    zap: {
      target: 'https://staging.dojopool.com',
      excludePaths: [
        '/api/health',
        '/api/metrics',
        '*.js',
        '*.css',
        '*.png',
        '*.jpg',
      ],
      rateLimit: 50, // requests per second
      concurrent: 10,
    },
    burp: {
      target: 'https://staging.dojopool.com',
      excludePaths: [
        '/api/health',
        '/api/metrics',
        '/static/*',
      ],
      rateLimit: 30,
      concurrent: 5,
    },
    acunetix: {
      target: 'https://staging.dojopool.com',
      excludePaths: [
        '/health',
        '/metrics',
        '*.js',
        '*.css',
        '*.png',
        '*.jpg',
      ],
      rateLimit: 40,
      concurrent: 8,
    },
  },

  testAccounts: {
    admin: {
      email: 'admin@dojopool-test.com',
      password: randomBytes(16).toString('hex'),
      role: 'ADMIN',
      apiKey: randomBytes(32).toString('hex'),
    },
    user: {
      email: 'user@dojopool-test.com',
      password: randomBytes(16).toString('hex'),
      role: 'USER',
      apiKey: randomBytes(32).toString('hex'),
    },
    readonly: {
      email: 'readonly@dojopool-test.com',
      password: randomBytes(16).toString('hex'),
      role: 'READONLY',
      apiKey: randomBytes(32).toString('hex'),
    },
  },

  rateLimit: {
    auth: 5, // requests per minute
    api: 100, // requests per minute
    websocket: 50, // messages per minute
  },

  timeouts: {
    request: 30000, // 30 seconds
    session: 3600000, // 1 hour
    websocket: 60000, // 1 minute
  },

  reporting: {
    outputDir: 'security/reports',
    formats: ['html', 'pdf', 'json'],
    severity: ['critical', 'high', 'medium', 'low', 'info'],
  },

  tools: {
    zap: {
      port: 8090,
      apiKey: 'your-api-key',
      timeout: 300000, // 5 minutes
      scanTypes: [
        'active',
        'passive',
        'spider',
        'ajax-spider',
        'ascan',
        'pscan',
      ],
      policies: {
        activeScan: {
          maxRuleDuration: 10,
          maxScanDuration: 60,
          delayInMs: 5,
        },
        passiveScan: {
          maxAlertsPerRule: 10,
          scanOnlyInScope: true,
        },
      },
    },
    nmap: {
      ports: '1-65535',
      scanTypes: ['S', 'V'],
      timing: 'T4',
      scripts: ['vuln', 'default'],
    },
    sqlmap: {
      level: 3,
      risk: 3,
      techniques: ['BEUSTQ'],
      dbms: ['postgresql', 'mysql'],
    },
  },

  authentication: {
    testUsers: [
      {
        role: 'admin',
        username: process.env.TEST_ADMIN_USER || 'admin',
        password: process.env.TEST_ADMIN_PASS || 'admin123',
      },
      {
        role: 'user',
        username: process.env.TEST_USER_USER || 'user',
        password: process.env.TEST_USER_PASS || 'user123',
      },
    ],
  },

  scope: {
    includedPaths: [
      '/api/*',
      '/admin/*',
      '/auth/*',
      '/game/*',
      '/tournament/*',
    ],
    excludedPaths: [
      '/static/*',
      '/_next/*',
      '/favicon.ico',
    ],
  },

  limits: {
    maxRequestsPerSecond: 10,
    maxConcurrentScans: 3,
    maxScanDuration: 3600, // 1 hour
    maxReportSize: 10485760, // 10MB
  },

  notifications: {
    email: {
      enabled: process.env.EMAIL_NOTIFICATIONS === 'true',
      recipients: process.env.EMAIL_RECIPIENTS?.split(',') || [],
      smtp: {
        host: process.env.SMTP_HOST || 'localhost',
        port: parseInt(process.env.SMTP_PORT || '587'),
        secure: process.env.SMTP_SECURE === 'true',
        auth: {
          user: process.env.SMTP_USER || '',
          pass: process.env.SMTP_PASS || '',
        },
      },
    },
    slack: {
      enabled: process.env.SLACK_NOTIFICATIONS === 'true',
      webhookUrl: process.env.SLACK_WEBHOOK_URL || '',
      channel: process.env.SLACK_CHANNEL || '#security',
    },
  },
}; 