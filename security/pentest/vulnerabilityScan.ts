import { pentestConfig } from './config';
import { logger } from '../../src/utils/logger';
import { exec } from 'child_process';
import { promisify } from 'util';
import { writeFile } from 'fs/promises';
import path from 'path';

const execAsync = promisify(exec);

interface ScanResult {
  timestamp: string;
  target: string;
  vulnerabilities: {
    high: Vulnerability[];
    medium: Vulnerability[];
    low: Vulnerability[];
    info: Vulnerability[];
  };
  summary: {
    total: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
}

interface Vulnerability {
  id: string;
  name: string;
  risk: 'High' | 'Medium' | 'Low' | 'Info';
  description: string;
  solution: string;
  reference: string;
  evidence?: string;
}

async function runZapScan(target: string): Promise<ScanResult> {
  try {
    logger.info('Starting OWASP ZAP scan...');

    // Run ZAP scan
    const { stdout, stderr } = await execAsync(
      `zap-cli --zap-url http://localhost:8090 quick-scan --self-contained --start-options "-config api.disablekey=true" ${target}`
    );

    if (stderr) {
      logger.warn('ZAP scan warnings:', stderr);
    }

    // Parse scan results
    const vulnerabilities = parseZapOutput(stdout);

    // Generate summary
    const summary = {
      total:
        vulnerabilities.high.length +
        vulnerabilities.medium.length +
        vulnerabilities.low.length +
        vulnerabilities.info.length,
      high: vulnerabilities.high.length,
      medium: vulnerabilities.medium.length,
      low: vulnerabilities.low.length,
      info: vulnerabilities.info.length,
    };

    const result: ScanResult = {
      timestamp: new Date().toISOString(),
      target,
      vulnerabilities,
      summary,
    };

    // Save results to file
    const reportPath = path.join(
      pentestConfig.reporting.outputDir,
      'json',
      'zap-scan.json'
    );
    await writeFile(reportPath, JSON.stringify(result, null, 2));

    logger.info('ZAP scan completed successfully');
    return result;
  } catch (error) {
    logger.error('ZAP scan failed:', error);
    throw error;
  }
}

function parseZapOutput(output: string): ScanResult['vulnerabilities'] {
  const vulnerabilities = {
    high: [] as Vulnerability[],
    medium: [] as Vulnerability[],
    low: [] as Vulnerability[],
    info: [] as Vulnerability[],
  };

  // Parse ZAP output and categorize vulnerabilities
  // This is a simplified example - actual parsing would be more complex
  const lines = output.split('\n');
  let currentVulnerability: Partial<Vulnerability> = {};

  for (const line of lines) {
    if (line.startsWith('Risk: ')) {
      const risk = line.replace('Risk: ', '') as Vulnerability['risk'];
      currentVulnerability.risk = risk;
    } else if (line.startsWith('Name: ')) {
      currentVulnerability.name = line.replace('Name: ', '');
    } else if (line.startsWith('Description: ')) {
      currentVulnerability.description = line.replace('Description: ', '');
    } else if (line.startsWith('Solution: ')) {
      currentVulnerability.solution = line.replace('Solution: ', '');
    } else if (line.startsWith('Reference: ')) {
      currentVulnerability.reference = line.replace('Reference: ', '');
    } else if (line.startsWith('Evidence: ')) {
      currentVulnerability.evidence = line.replace('Evidence: ', '');
    } else if (line === '---') {
      // End of vulnerability
      if (currentVulnerability.risk && currentVulnerability.name) {
        const vulnerability = currentVulnerability as Vulnerability;
        switch (vulnerability.risk) {
          case 'High':
            vulnerabilities.high.push(vulnerability);
            break;
          case 'Medium':
            vulnerabilities.medium.push(vulnerability);
            break;
          case 'Low':
            vulnerabilities.low.push(vulnerability);
            break;
          case 'Info':
            vulnerabilities.info.push(vulnerability);
            break;
        }
      }
      currentVulnerability = {};
    }
  }

  return vulnerabilities;
}

export async function performVulnerabilityScan(): Promise<ScanResult> {
  try {
    logger.info('Starting vulnerability scanning...');

    // Start ZAP daemon
    await execAsync(
      'zap-cli --zap-url http://localhost:8090 start --start-options "-config api.disablekey=true"'
    );

    // Run scan
    const result = await runZapScan(pentestConfig.environment.baseUrl);

    // Stop ZAP daemon
    await execAsync('zap-cli --zap-url http://localhost:8090 shutdown');

    return result;
  } catch (error) {
    logger.error('Vulnerability scanning failed:', error);
    throw error;
  }
}

// Run vulnerability scan if executed directly
if (require.main === module) {
  performVulnerabilityScan()
    .then((result) => {
      console.log(
        'Vulnerability Scan Results:',
        JSON.stringify(result, null, 2)
      );
    })
    .catch((error) => {
      console.error('Vulnerability scan failed:', error);
      process.exit(1);
    });
}
