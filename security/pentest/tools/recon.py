#!/usr/bin/env python3

import socket
import requests
from urllib.parse import urlparse
import dns.resolver
import concurrent.futures
import json
from datetime import datetime
from typing import Dict, List, Optional, Union, Any

class ReconnaissanceTool:
    def __init__(self, target_url: str):
        self.target_url = target_url
        self.parsed_url = urlparse(target_url)
        self.hostname = self.parsed_url.netloc
        self.results: Dict[str, Union[str, List[int], Dict[str, List[str]], Dict[str, str], List[str]]] = {
            'ip_address': '',
            'open_ports': [],
            'dns_records': {},
            'security_headers': {},
            'technologies': []
        }

    def get_ip_address(self) -> str:
        """Get the IP address of the target host."""
        try:
            ip = socket.gethostbyname(self.hostname)
            self.results['ip_address'] = ip
            return ip
        except socket.gaierror:
            self.results['ip_address'] = "Unknown"
            return "Unknown"

    def scan_ports(self, ports: Optional[List[int]] = None) -> List[int]:
        """Scan common ports on the target host."""
        common_ports = [21, 22, 23, 25, 53, 80, 443, 3306, 3389, 5432]
        ports_to_scan = ports if ports is not None else common_ports
        
        open_ports = []
        for port in ports_to_scan:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((self.hostname, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        
        self.results['open_ports'] = open_ports
        return open_ports

    def check_dns_records(self) -> Dict[str, List[str]]:
        """Check various DNS records for the target domain."""
        records = {}
        record_types = ['A', 'AAAA', 'MX', 'NS', 'TXT', 'CNAME']
        
        for record_type in record_types:
            try:
                answers = dns.resolver.resolve(self.hostname, record_type)
                records[record_type] = [str(rdata) for rdata in answers]
            except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN):
                records[record_type] = []
            except Exception:
                records[record_type] = ["Error resolving record"]
        
        self.results['dns_records'] = records
        return records

    def verify_security_headers(self) -> Dict[str, str]:
        """Verify security headers present in the HTTP response."""
        headers = {}
        try:
            response = requests.get(self.target_url, timeout=5)
            security_headers = [
                'Content-Security-Policy',
                'X-Content-Type-Options',
                'X-Frame-Options',
                'X-XSS-Protection',
                'Strict-Transport-Security',
                'Referrer-Policy',
                'Permissions-Policy'
            ]
            
            for header in security_headers:
                headers[header] = response.headers.get(header, 'Not Present')
            
        except requests.RequestException:
            headers = {header: 'Error checking header' for header in security_headers}
        
        self.results['security_headers'] = headers
        return headers

    def detect_technologies(self) -> List[str]:
        """Detect technologies used by the target website."""
        technologies = []
        try:
            response = requests.get(self.target_url, timeout=5)
            
            # Check for common technology indicators
            if 'X-Powered-By' in response.headers:
                technologies.append(response.headers['X-Powered-By'])
            
            if 'Server' in response.headers:
                technologies.append(response.headers['Server'])
            
            # Check for common framework indicators
            if 'wp-content' in response.text.lower():
                technologies.append('WordPress')
            if 'laravel' in response.text.lower():
                technologies.append('Laravel')
            if 'django' in response.text.lower():
                technologies.append('Django')
            if 'next.js' in response.text.lower():
                technologies.append('Next.js')
            
        except requests.RequestException:
            technologies = ['Error detecting technologies']
        
        self.results['technologies'] = technologies
        return technologies

    def run_reconnaissance(self) -> Dict[str, Union[str, List[int], Dict[str, List[str]], Dict[str, str], List[str]]]:
        """Run all reconnaissance checks and return combined results."""
        self.get_ip_address()
        self.scan_ports()
        self.check_dns_records()
        self.verify_security_headers()
        self.detect_technologies()
        return self.results

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("Usage: python recon.py <target_url>")
        sys.exit(1)
    
    tool = ReconnaissanceTool(sys.argv[1])
    tool.run_reconnaissance() 