import { PrismaClient } from '@prisma/client';
import { createHash } from 'crypto';
import { pentestConfig } from './config';

const prisma = new PrismaClient();

interface SetupResult {
  success: boolean;
  message: string;
  accounts?: Record<string, {
    email: string;
    password: string;
    apiKey: string;
  }>;
}

async function setupTestAccounts(): Promise<SetupResult> {
  try {
    const accounts: Record<string, any> = {};

    // Create test accounts
    for (const [role, config] of Object.entries(pentestConfig.testAccounts)) {
      const hashedPassword = createHash('sha256')
        .update(config.password)
        .digest('hex');

      const user = await prisma.user.create({
        data: {
          email: config.email,
          password: hashedPassword,
          name: `Test ${role.charAt(0).toUpperCase() + role.slice(1)}`,
          role: config.role,
          apiKeys: {
            create: {
              key: config.apiKey,
              description: `Pentest ${role} API key`,
            },
          },
        },
      });

      accounts[role] = {
        email: config.email,
        password: config.password, // Store original password for testing
        apiKey: config.apiKey,
      };
    }

    return {
      success: true,
      message: 'Test accounts created successfully',
      accounts,
    };
  } catch (error) {
    return {
      success: false,
      message: `Failed to create test accounts: ${error instanceof Error ? error.message : 'Unknown error'}`,
    };
  }
}

async function setupTestData(): Promise<SetupResult> {
  try {
    // Create test games
    const adminAccount = pentestConfig.testAccounts.admin;
    const userAccount = pentestConfig.testAccounts.user;

    const admin = await prisma.user.findUnique({
      where: { email: adminAccount.email },
    });

    const user = await prisma.user.findUnique({
      where: { email: userAccount.email },
    });

    if (!admin || !user) {
      throw new Error('Required test accounts not found');
    }

    // Create public game
    await prisma.game.create({
      data: {
        createdBy: admin.id,
        status: 'ACTIVE',
        type: 'EIGHT_BALL',
        isPrivate: false,
      },
    });

    // Create private game
    await prisma.game.create({
      data: {
        createdBy: user.id,
        status: 'ACTIVE',
        type: 'NINE_BALL',
        isPrivate: true,
      },
    });

    // Create tournament
    await prisma.tournament.create({
      data: {
        name: 'Test Tournament',
        description: 'Tournament for penetration testing',
        createdBy: admin.id,
        startDate: new Date(),
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
        maxParticipants: 8,
        gameType: 'EIGHT_BALL',
      },
    });

    return {
      success: true,
      message: 'Test data created successfully',
    };
  } catch (error) {
    return {
      success: false,
      message: `Failed to create test data: ${error instanceof Error ? error.message : 'Unknown error'}`,
    };
  }
}

async function setupReportingDirectory(): Promise<SetupResult> {
  try {
    const fs = require('fs');
    const path = require('path');

    // Create reporting directory if it doesn't exist
    const reportDir = path.resolve(pentestConfig.reporting.outputDir);
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, { recursive: true });
    }

    // Create subdirectories for each report type
    pentestConfig.reporting.formats.forEach(format => {
      const formatDir = path.join(reportDir, format);
      if (!fs.existsSync(formatDir)) {
        fs.mkdirSync(formatDir);
      }
    });

    return {
      success: true,
      message: 'Reporting directories created successfully',
    };
  } catch (error) {
    return {
      success: false,
      message: `Failed to create reporting directories: ${error instanceof Error ? error.message : 'Unknown error'}`,
    };
  }
}

async function main() {
  console.log('Setting up penetration testing environment...');

  // Setup test accounts
  const accountsResult = await setupTestAccounts();
  console.log('\nTest Accounts Setup:', accountsResult.message);
  if (accountsResult.accounts) {
    console.log('Created accounts:', JSON.stringify(accountsResult.accounts, null, 2));
  }

  // Setup test data
  const dataResult = await setupTestData();
  console.log('\nTest Data Setup:', dataResult.message);

  // Setup reporting directory
  const reportingResult = await setupReportingDirectory();
  console.log('\nReporting Setup:', reportingResult.message);

  // Cleanup
  await prisma.$disconnect();
}

// Run setup if executed directly
if (require.main === module) {
  main()
    .catch(error => {
      console.error('Setup failed:', error);
      process.exit(1);
    });
} 