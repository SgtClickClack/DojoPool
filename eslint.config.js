import js from '@eslint/js';
import tseslint from '@typescript-eslint/eslint-plugin';
import tsparser from '@typescript-eslint/parser';
import react from 'eslint-plugin-react';
import reactHooks from 'eslint-plugin-react-hooks';
import prettierConfig from 'eslint-config-prettier';

export default [
  js.configs.recommended,
  prettierConfig,
  {
    files: ['**/*.ts', '**/*.tsx'],
    languageOptions: {
      parser: tsparser,
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
        ecmaVersion: 12,
        sourceType: 'module',
      },
      globals: {
        // Browser globals
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        console: 'readonly',
        confirm: 'readonly',
        alert: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        fetch: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        FormData: 'readonly',
        File: 'readonly',
        Blob: 'readonly',
        // Node.js globals
        process: 'readonly',
        Buffer: 'readonly',
        global: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        require: 'readonly',
        module: 'readonly',
        exports: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': tseslint,
      react: react,
      'react-hooks': reactHooks,
    },
    rules: {
      'react/react-in-jsx-scope': 'off',
      'react/prop-types': 'off',
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-unused-vars': [
        'warn',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/no-explicit-any': 'off',
      'react-hooks/rules-of-hooks': 'off',
      'react-hooks/exhaustive-deps': 'off',
      'no-console': ['warn', { allow: ['warn', 'error', 'log'] }],
      'no-empty': 'off', // Allow empty blocks
      'react/no-unescaped-entities': 'warn', // Warn instead of error for apostrophes
      'react/no-unknown-property': 'warn', // Warn instead of error for custom properties
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
  {
    files: ['apps/web/src/**/*.ts', 'apps/web/src/**/*.tsx'],
    languageOptions: {
      parser: tsparser,
      parserOptions: {
        project: ['apps/web/tsconfig.json'],
      },
    },
    rules: {
      '@typescript-eslint/no-unsafe-assignment': 'off',
      '@typescript-eslint/no-unsafe-member-access': 'off',
      '@typescript-eslint/no-unsafe-call': 'off',
      '@typescript-eslint/no-unsafe-return': 'off',
      '@typescript-eslint/restrict-template-expressions': 'off',
      'react/forbid-dom-props': 'warn',
    },
  },
  {
    files: ['services/api/src/**/*.ts'],
    languageOptions: {
      parser: tsparser,
      parserOptions: {
        project: ['services/api/tsconfig.json'],
      },
    },
    rules: {
      '@typescript-eslint/no-unsafe-assignment': 'off',
      '@typescript-eslint/no-unsafe-member-access': 'off',
      '@typescript-eslint/no-unsafe-call': 'off',
      '@typescript-eslint/no-unsafe-return': 'off',
      '@typescript-eslint/restrict-template-expressions': 'off',
    },
  },
  {
    ignores: [
      'node_modules/**',
      'dist/**',
      'build/**',
      '.next/**',
      '.turbo/**',
      '.cache/**',
      'out/**',
      'coverage/**',
      '**/coverage/**/*',
      'lcov-report/**',
      '**/lcov-report/**/*',
      'cypress/**',
      'packages/**/*',
      'DojoPoolCombined/**/*',
      'DojoPool*/**/*',
      'Dojo_Pool*/**/*',
      'Dojo Pool*/**/*',
      'combined/**/*',
      'generated/**/*',
      'blueprints/**/*',
      'blockchain/**/*',
      'infrastructure/**/*',
      'k8s/**/*',
      'monitoring/**/*',
      'narrative/**/*',
      'ranking/**/*',
      'spectator/**/*',
      'static/**/*',
      'templates/**/*',
      'tests/**/*',
      '**/__tests__/**/*',
      '**/*.test.ts',
      '**/*.test.tsx',
      '**/*.spec.ts',
      '**/*.spec.tsx',
      'utils/**/*',
      'venv/**/*',
      'src/pages-backup/**/*',
      'src/scripts/**/*',
      'src/migrations/**/*',
      'src/logs/**/*',
      'src/instance/**/*',
      'src/firebase/**/*',
      'src/graphql/**/*',
      'src/hooks/**/*',
      'src/security/**/*',
      'src/verification/**/*',
      'src/validation/**/*',
      'src/tournament/**/*',
      'src/performance/**/*',
      'src/frame-processor/**/*',
      'src/screens/**/*',
      'src/components/Tournament/**/*',
      'src/dojopool/frontend/src/**/*',
      'src/dojopool/frontend/components/Monitoring/**/*',
      'src/dojopool/frontend/components/Pages/**/*',
      'src/dojopool/frontend/components/tournaments/**/*',
      'src/dojopool/frontend/cypress/**/*',
      'src/dojopool/frontend/components/Venue/**/*',
      'src/dojopool/frontend/pages/**/*',
    ],
  },
];
