"""
Script to migrate secrets to environment variables and update code references.
"""

import os
import re
import json
from pathlib import Path
from typing import Dict, List, Any

class SecretMigrator:
    def __init__(self, root_dir: Path):
        self.root_dir = root_dir
        self.env_vars = {}
        self.files_to_update = []
        self.secret_patterns = {
            'api_key': r'(?i)(api[_-]?key|apikey)["\']?\s*(?:=|:)\s*["\']([^"\']+)["\']',
            'password': r'(?i)(password|passwd|pwd)["\']?\s*(?:=|:)\s*["\']([^"\']+)["\']',
            'secret': r'(?i)(secret|token)["\']?\s*(?:=|:)\s*["\']([^"\']+)["\']'
        }
        # Directories to ignore
        self.ignored_dirs = {
            'node_modules', 'venv', '.git', '__pycache__', 
            'build', 'dist', '.pytest_cache', '.venv'
        }

    def should_ignore(self, path: Path) -> bool:
        """Check if path should be ignored."""
        return any(ignored in path.parts for ignored in self.ignored_dirs)

    def load_client_secrets(self):
        """Load and process client secrets file."""
        client_secret_path = self.root_dir / 'instance' / 'client_secret.json'
        if client_secret_path.exists():
            try:
                with open(client_secret_path, 'r') as f:
                    secrets = json.load(f)
                    # Extract relevant secrets
                    if 'web' in secrets:
                        self.env_vars['GOOGLE_CLIENT_ID'] = secrets['web'].get('client_id', '')
                        self.env_vars['GOOGLE_CLIENT_SECRET'] = secrets['web'].get('client_secret', '')
                print("Loaded client secrets successfully")
            except Exception as e:
                print(f"Error loading client secrets: {e}")

    def find_files_to_update(self):
        """Find files that need to be updated with environment variables."""
        extensions = {'.py', '.js', '.json', '.yaml', '.yml', '.ini', '.conf'}
        
        for path in self.root_dir.rglob('*'):
            if self.should_ignore(path):
                continue
            if path.suffix in extensions:
                try:
                    content = path.read_text(encoding='utf-8')
                    for pattern in self.secret_patterns.values():
                        if re.search(pattern, content):
                            print(f"Found file with secrets: {path.relative_to(self.root_dir)}")
                            self.files_to_update.append(path)
                            break
                except Exception as e:
                    if 'Permission denied' not in str(e):
                        print(f"Error reading {path}: {e}")

    def generate_env_file(self):
        """Generate a new .env file with found secrets."""
        env_content = []
        
        # Add standard configuration
        env_content.extend([
            "# Generated by migrate_secrets.py",
            "# Replace placeholder values with actual secrets",
            "",
            "# API Keys and Client Secrets"
        ])

        # Add found secrets
        for key, value in sorted(self.env_vars.items()):
            env_content.append(f"{key}={value}")

        # Write to .env file
        env_file = self.root_dir / '.env'
        try:
            env_file.write_text('\n'.join(env_content), encoding='utf-8')
            print(f"Generated .env file at {env_file}")
        except Exception as e:
            print(f"Error writing .env file: {e}")

    def create_backup(self, file_path: Path) -> Path | None:
        """Create a backup of a file before modifying it."""
        try:
            backup_path = file_path.with_suffix(file_path.suffix + '.bak')
            backup_path.write_text(file_path.read_text(encoding='utf-8'))
            return backup_path
        except Exception as e:
            print(f"Error creating backup for {file_path}: {e}")
            return None

    def update_code_references(self):
        """Update code to use environment variables instead of hardcoded secrets."""
        for file_path in self.files_to_update:
            if self.should_ignore(file_path):
                continue
            try:
                print(f"Processing {file_path}")
                content = file_path.read_text(encoding='utf-8')
                original_content = content

                # Create backup
                backup_path = self.create_backup(file_path)
                if not backup_path:
                    continue
                print(f"Created backup at {backup_path}")

                # Replace hardcoded secrets with environment variables
                for secret_type, pattern in self.secret_patterns.items():
                    matches = list(re.finditer(pattern, content))
                    for match in reversed(matches):
                        var_name = match.group(1).upper().replace('-', '_').replace(' ', '_')
                        if file_path.suffix == '.py':
                            replacement = f'os.getenv("{var_name}")'
                        elif file_path.suffix in {'.js', '.jsx', '.ts', '.tsx'}:
                            replacement = f'process.env.{var_name}'
                        else:
                            replacement = f'${{{var_name}}}'
                        
                        content = (
                            content[:match.start()] +
                            content[match.start():match.start(2)].replace(match.group(2), replacement) +
                            content[match.end(2):]
                        )

                # Only write if content changed
                if content != original_content:
                    try:
                        file_path.write_text(content, encoding='utf-8')
                        print(f"Updated {file_path}")
                    except Exception as e:
                        print(f"Error updating {file_path}: {e}")

            except Exception as e:
                if 'Permission denied' not in str(e):
                    print(f"Error processing {file_path}: {e}")

    def run(self):
        """Run the secret migration process."""
        print("Loading client secrets...")
        self.load_client_secrets()

        print("Finding files to update...")
        self.find_files_to_update()

        print("Generating .env file...")
        self.generate_env_file()

        print("Updating code references...")
        self.update_code_references()

def main():
    """Main function to run the secret migration."""
    root_dir = Path(__file__).parent.parent.parent.parent
    migrator = SecretMigrator(root_dir)
    migrator.run()

if __name__ == "__main__":
    main() 