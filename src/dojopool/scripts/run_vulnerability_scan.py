#!/usr/bin/env python3
"""
Script to run automated vulnerability scanning.

This script can be run manually or scheduled via cron/systemd.
"""

import logging
import sys
from datetime import datetime
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from dojopool.config.security_config import SecurityConfig
from dojopool.security.vulnerability_scanner import VulnerabilityScanner

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("vulnerability_scan.log")],
)

logger = logging.getLogger(__name__)


def main():
    """Run vulnerability scan and report results."""
    try:
        logger.info("Starting vulnerability scan...")
        scanner = VulnerabilityScanner()
        results = scanner.run_full_scan()

        # Count issues by severity
        severity_counts = {"critical": 0, "high": 0, "medium": 0, "low": 0}

        # Process dependency vulnerabilities
        for vuln in results.get("dependency_vulnerabilities", []):
            severity = vuln.get("severity", "medium")
            severity_counts[severity] = severity_counts.get(severity, 0) + 1

        # Process code vulnerabilities
        for vuln in results.get("code_vulnerabilities", []):
            severity = vuln.get("severity", "medium")
            severity_counts[severity] = severity_counts.get(severity, 0) + 1

        # Process configuration issues
        for issue in results.get("configuration_issues", []):
            severity = issue.get("severity", "medium")
            severity_counts[severity] = severity_counts.get(severity, 0) + 1

        # Log summary
        logger.info("Vulnerability scan completed.")
        logger.info("Summary of findings:")
        logger.info(f"Critical issues: {severity_counts['critical']}")
        logger.info(f"High severity issues: {severity_counts['high']}")
        logger.info(f"Medium severity issues: {severity_counts['medium']}")
        logger.info(f"Low severity issues: {severity_counts['low']}")

        # Check if we need to alert based on severity thresholds
        should_alert = (
            severity_counts["critical"] > 0
            or severity_counts["high"] >= 2
            or severity_counts["medium"] >= 5
        )

        if should_alert and SecurityConfig.VULNERABILITY_NOTIFICATIONS["email"]:
            logger.warning("Critical or high severity issues found - sending alert!")
            # Here you would implement the alert sending logic
            # For example, sending emails to security team

        return 0 if not should_alert else 1

    except Exception as e:
        logger.error(f"Error during vulnerability scan: {str(e)}", exc_info=True)
        return 2


if __name__ == "__main__":
    sys.exit(main())
