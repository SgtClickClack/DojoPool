"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendors~node_modules_next_dist_shared_lib_router_router_js_1a888ad3"],{

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("// tslint:disable:no-console\n\n\nvar _regeneratorRuntime = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator/index.js */ \"./node_modules/@babel/runtime/regenerator/index.js\");\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\nvar _createClass = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js\");\nvar _asyncToGenerator = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  createKey: function createKey() {\n    return _createKey;\n  },\n  \"default\": function _default() {\n    return Router;\n  },\n  matchesMiddleware: function matchesMiddleware() {\n    return _matchesMiddleware;\n  }\n});\nvar _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nvar _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nvar _removetrailingslash = __webpack_require__(/*! ./utils/remove-trailing-slash */ \"./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\nvar _routeloader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\nvar _script = __webpack_require__(/*! ../../../client/script */ \"./node_modules/next/dist/client/script.js\");\nvar _iserror = /*#__PURE__*/_interop_require_wildcard._(__webpack_require__(/*! ../../../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\nvar _denormalizepagepath = __webpack_require__(/*! ../page-path/denormalize-page-path */ \"./node_modules/next/dist/shared/lib/page-path/denormalize-page-path.js\");\nvar _normalizelocalepath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\nvar _mitt = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! ../mitt */ \"./node_modules/next/dist/shared/lib/mitt.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/next/dist/shared/lib/utils.js\");\nvar _isdynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\");\nvar _parserelativeurl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js\");\nvar _resolverewrites = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! ./utils/resolve-rewrites */ \"?506d\"));\nvar _routematcher = __webpack_require__(/*! ./utils/route-matcher */ \"./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\");\nvar _routeregex = __webpack_require__(/*! ./utils/route-regex */ \"./node_modules/next/dist/shared/lib/router/utils/route-regex.js\");\nvar _formaturl = __webpack_require__(/*! ./utils/format-url */ \"./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\nvar _detectdomainlocale = __webpack_require__(/*! ../../../client/detect-domain-locale */ \"./node_modules/next/dist/client/detect-domain-locale.js\");\nvar _parsepath = __webpack_require__(/*! ./utils/parse-path */ \"./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nvar _addlocale = __webpack_require__(/*! ../../../client/add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\nvar _removelocale = __webpack_require__(/*! ../../../client/remove-locale */ \"./node_modules/next/dist/client/remove-locale.js\");\nvar _removebasepath = __webpack_require__(/*! ../../../client/remove-base-path */ \"./node_modules/next/dist/client/remove-base-path.js\");\nvar _addbasepath = __webpack_require__(/*! ../../../client/add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\nvar _hasbasepath = __webpack_require__(/*! ../../../client/has-base-path */ \"./node_modules/next/dist/client/has-base-path.js\");\nvar _resolvehref = __webpack_require__(/*! ../../../client/resolve-href */ \"./node_modules/next/dist/client/resolve-href.js\");\nvar _isapiroute = __webpack_require__(/*! ../../../lib/is-api-route */ \"./node_modules/next/dist/lib/is-api-route.js\");\nvar _getnextpathnameinfo = __webpack_require__(/*! ./utils/get-next-pathname-info */ \"./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\nvar _formatnextpathnameinfo = __webpack_require__(/*! ./utils/format-next-pathname-info */ \"./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\nvar _comparestates = __webpack_require__(/*! ./utils/compare-states */ \"./node_modules/next/dist/shared/lib/router/utils/compare-states.js\");\nvar _islocalurl = __webpack_require__(/*! ./utils/is-local-url */ \"./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\nvar _isbot = __webpack_require__(/*! ./utils/is-bot */ \"./node_modules/next/dist/shared/lib/router/utils/is-bot.js\");\nvar _omit = __webpack_require__(/*! ./utils/omit */ \"./node_modules/next/dist/shared/lib/router/utils/omit.js\");\nvar _interpolateas = __webpack_require__(/*! ./utils/interpolate-as */ \"./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\");\nvar _handlesmoothscroll = __webpack_require__(/*! ./utils/handle-smooth-scroll */ \"./node_modules/next/dist/shared/lib/router/utils/handle-smooth-scroll.js\");\nfunction buildCancellationError() {\n  return Object.assign(new Error(\"Route Cancelled\"), {\n    cancelled: true\n  });\n}\nfunction _matchesMiddleware(_x) {\n  return _matchesMiddleware2.apply(this, arguments);\n}\nfunction _matchesMiddleware2() {\n  _matchesMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {\n    var matchers, _ref6, asPathname, cleanedAs, asWithBasePathAndLocale;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return Promise.resolve(options.router.pageLoader.getMiddleware());\n        case 2:\n          matchers = _context8.sent;\n          if (matchers) {\n            _context8.next = 5;\n            break;\n          }\n          return _context8.abrupt(\"return\", false);\n        case 5:\n          _ref6 = (0, _parsepath.parsePath)(options.asPath), asPathname = _ref6.pathname; // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`\n          cleanedAs = (0, _hasbasepath.hasBasePath)(asPathname) ? (0, _removebasepath.removeBasePath)(asPathname) : asPathname;\n          asWithBasePathAndLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, options.locale)); // Check only path match on client. Matching \"has\" should be done on server\n          // where we can access more info such as headers, HttpOnly cookie, etc.\n          return _context8.abrupt(\"return\", matchers.some(function (m) {\n            return new RegExp(m.regexp).test(asWithBasePathAndLocale);\n          }));\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _matchesMiddleware2.apply(this, arguments);\n}\nfunction stripOrigin(url) {\n  var origin = (0, _utils.getLocationOrigin)();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  var _ref = (0, _resolvehref.resolveHref)(router, url, true),\n    _ref2 = _slicedToArray(_ref, 2),\n    resolvedHref = _ref2[0],\n    resolvedAs = _ref2[1];\n  var origin = (0, _utils.getLocationOrigin)();\n  var hrefWasAbsolute = resolvedHref.startsWith(origin);\n  var asWasAbsolute = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  var preparedUrl = hrefWasAbsolute ? resolvedHref : (0, _addbasepath.addBasePath)(resolvedHref);\n  var preparedAs = as ? stripOrigin((0, _resolvehref.resolveHref)(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asWasAbsolute ? preparedAs : (0, _addbasepath.addBasePath)(preparedAs)\n  };\n}\nfunction resolveDynamicRoute(pathname, pages) {\n  var cleanPathname = (0, _removetrailingslash.removeTrailingSlash)((0, _denormalizepagepath.denormalizePagePath)(pathname));\n  if (cleanPathname === \"/404\" || cleanPathname === \"/_error\") {\n    return pathname;\n  }\n  // handle resolving href for dynamic routes\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(function (page) {\n      if ((0, _isdynamic.isDynamicRoute)(page) && (0, _routeregex.getRouteRegex)(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n  return (0, _removetrailingslash.removeTrailingSlash)(pathname);\n}\nfunction getMiddlewareData(source, response, options) {\n  var nextConfig = {\n    basePath: options.router.basePath,\n    i18n: {\n      locales: options.router.locales\n    },\n    trailingSlash: Boolean(false)\n  };\n  var rewriteHeader = response.headers.get(\"x-nextjs-rewrite\");\n  var rewriteTarget = rewriteHeader || response.headers.get(\"x-nextjs-matched-path\");\n  var matchedPath = response.headers.get(\"x-matched-path\");\n  if (matchedPath && !rewriteTarget && !matchedPath.includes(\"__next_data_catchall\") && !matchedPath.includes(\"/_error\") && !matchedPath.includes(\"/404\")) {\n    // leverage x-matched-path to detect next.config.js rewrites\n    rewriteTarget = matchedPath;\n  }\n  if (rewriteTarget) {\n    if (rewriteTarget.startsWith(\"/\") || false) {\n      var parsedRewriteTarget = (0, _parserelativeurl.parseRelativeUrl)(rewriteTarget);\n      var pathnameInfo = (0, _getnextpathnameinfo.getNextPathnameInfo)(parsedRewriteTarget.pathname, {\n        nextConfig: nextConfig,\n        parseData: true\n      });\n      var fsPathname = (0, _removetrailingslash.removeTrailingSlash)(pathnameInfo.pathname);\n      return Promise.all([options.router.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)()]).then(function (param) {\n        var _param = _slicedToArray(param, 2),\n          pages = _param[0],\n          rewrites = _param[1].__rewrites;\n        var as = (0, _addlocale.addLocale)(pathnameInfo.pathname, pathnameInfo.locale);\n        if ((0, _isdynamic.isDynamicRoute)(as) || !rewriteHeader && pages.includes((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(as), options.router.locales).pathname)) {\n          var parsedSource = (0, _getnextpathnameinfo.getNextPathnameInfo)((0, _parserelativeurl.parseRelativeUrl)(source).pathname, {\n            nextConfig:  false ? 0 : nextConfig,\n            parseData: true\n          });\n          as = (0, _addbasepath.addBasePath)(parsedSource.pathname);\n          parsedRewriteTarget.pathname = as;\n        }\n        if (false) { var result; } else if (!pages.includes(fsPathname)) {\n          var resolvedPathname = resolveDynamicRoute(fsPathname, pages);\n          if (resolvedPathname !== fsPathname) {\n            fsPathname = resolvedPathname;\n          }\n        }\n        var resolvedHref = !pages.includes(fsPathname) ? resolveDynamicRoute((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(parsedRewriteTarget.pathname), options.router.locales).pathname, pages) : fsPathname;\n        if ((0, _isdynamic.isDynamicRoute)(resolvedHref)) {\n          var matches = (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(resolvedHref))(as);\n          Object.assign(parsedRewriteTarget.query, matches || {});\n        }\n        return {\n          type: \"rewrite\",\n          parsedAs: parsedRewriteTarget,\n          resolvedHref: resolvedHref\n        };\n      });\n    }\n    var src = (0, _parsepath.parsePath)(source);\n    var pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)(_objectSpread(_objectSpread({}, (0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {\n      nextConfig: nextConfig,\n      parseData: true\n    })), {}, {\n      defaultLocale: options.router.defaultLocale,\n      buildId: \"\"\n    }));\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: \"\" + pathname + src.query + src.hash\n    });\n  }\n  var redirectTarget = response.headers.get(\"x-nextjs-redirect\");\n  if (redirectTarget) {\n    if (redirectTarget.startsWith(\"/\")) {\n      var _src = (0, _parsepath.parsePath)(redirectTarget);\n      var _pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)(_objectSpread(_objectSpread({}, (0, _getnextpathnameinfo.getNextPathnameInfo)(_src.pathname, {\n        nextConfig: nextConfig,\n        parseData: true\n      })), {}, {\n        defaultLocale: options.router.defaultLocale,\n        buildId: \"\"\n      }));\n      return Promise.resolve({\n        type: \"redirect-internal\",\n        newAs: \"\" + _pathname + _src.query + _src.hash,\n        newUrl: \"\" + _pathname + _src.query + _src.hash\n      });\n    }\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: redirectTarget\n    });\n  }\n  return Promise.resolve({\n    type: \"next\"\n  });\n}\nfunction withMiddlewareEffects(_x2) {\n  return _withMiddlewareEffects.apply(this, arguments);\n}\nfunction _withMiddlewareEffects() {\n  _withMiddlewareEffects = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(options) {\n    var matches, data, effect;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _matchesMiddleware(options);\n        case 2:\n          matches = _context9.sent;\n          if (!(!matches || !options.fetchData)) {\n            _context9.next = 5;\n            break;\n          }\n          return _context9.abrupt(\"return\", null);\n        case 5:\n          _context9.next = 7;\n          return options.fetchData();\n        case 7:\n          data = _context9.sent;\n          _context9.next = 10;\n          return getMiddlewareData(data.dataHref, data.response, options);\n        case 10:\n          effect = _context9.sent;\n          return _context9.abrupt(\"return\", {\n            dataHref: data.dataHref,\n            json: data.json,\n            response: data.response,\n            text: data.text,\n            cacheKey: data.cacheKey,\n            effect: effect\n          });\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n  return _withMiddlewareEffects.apply(this, arguments);\n}\nvar manualScrollRestoration =  true && \"scrollRestoration\" in window.history && !!function () {\n  try {\n    var v = \"__next\";\n    // eslint-disable-next-line no-sequences\n    return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true;\n  } catch (n) {}\n}();\nvar SSG_DATA_NOT_FOUND = Symbol(\"SSG_DATA_NOT_FOUND\");\nfunction fetchRetry(url, attempts, options) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: \"same-origin\",\n    method: options.method || \"GET\",\n    headers: Object.assign({}, options.headers, {\n      \"x-nextjs-data\": \"1\"\n    })\n  }).then(function (response) {\n    return !response.ok && attempts > 1 && response.status >= 500 ? fetchRetry(url, attempts - 1, options) : response;\n  });\n}\nfunction tryToParseAsJSON(text) {\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    return null;\n  }\n}\nfunction fetchNextData(param) {\n  var dataHref = param.dataHref,\n    inflightCache = param.inflightCache,\n    isPrefetch = param.isPrefetch,\n    hasMiddleware = param.hasMiddleware,\n    isServerRender = param.isServerRender,\n    parseJSON = param.parseJSON,\n    persistCache = param.persistCache,\n    isBackground = param.isBackground,\n    unstable_skipClientCache = param.unstable_skipClientCache;\n  var _URL = new URL(dataHref, window.location.href),\n    cacheKey = _URL.href;\n  var getData = function getData(params) {\n    var _params_method;\n    return fetchRetry(dataHref, isServerRender ? 3 : 1, {\n      headers: Object.assign({}, isPrefetch ? {\n        purpose: \"prefetch\"\n      } : {}, isPrefetch && hasMiddleware ? {\n        \"x-middleware-prefetch\": \"1\"\n      } : {}),\n      method: (_params_method = params == null ? void 0 : params.method) != null ? _params_method : \"GET\"\n    }).then(function (response) {\n      if (response.ok && (params == null ? void 0 : params.method) === \"HEAD\") {\n        return {\n          dataHref: dataHref,\n          response: response,\n          text: \"\",\n          json: {},\n          cacheKey: cacheKey\n        };\n      }\n      return response.text().then(function (text) {\n        if (!response.ok) {\n          /**\n          * When the data response is a redirect because of a middleware\n          * we do not consider it an error. The headers must bring the\n          * mapped location.\n          * TODO: Change the status code in the handler.\n          */\n          if (hasMiddleware && [301, 302, 307, 308].includes(response.status)) {\n            return {\n              dataHref: dataHref,\n              response: response,\n              text: text,\n              json: {},\n              cacheKey: cacheKey\n            };\n          }\n          if (response.status === 404) {\n            var _tryToParseAsJSON;\n            if ((_tryToParseAsJSON = tryToParseAsJSON(text)) == null ? void 0 : _tryToParseAsJSON.notFound) {\n              return {\n                dataHref: dataHref,\n                json: {\n                  notFound: SSG_DATA_NOT_FOUND\n                },\n                response: response,\n                text: text,\n                cacheKey: cacheKey\n              };\n            }\n          }\n          var error = new Error(\"Failed to load static props\");\n          /**\n          * We should only trigger a server-side transition if this was\n          * caused on a client-side transition. Otherwise, we'd get into\n          * an infinite loop.\n          */\n          if (!isServerRender) {\n            (0, _routeloader.markAssetError)(error);\n          }\n          throw error;\n        }\n        return {\n          dataHref: dataHref,\n          json: parseJSON ? tryToParseAsJSON(text) : null,\n          response: response,\n          text: text,\n          cacheKey: cacheKey\n        };\n      });\n    }).then(function (data) {\n      if (!persistCache || true || 0) {\n        delete inflightCache[cacheKey];\n      }\n      return data;\n    })[\"catch\"](function (err) {\n      if (!unstable_skipClientCache) {\n        delete inflightCache[cacheKey];\n      }\n      if (\n      // chrome\n      err.message === \"Failed to fetch\" ||\n      // firefox\n      err.message === \"NetworkError when attempting to fetch resource.\" ||\n      // safari\n      err.message === \"Load failed\") {\n        (0, _routeloader.markAssetError)(err);\n      }\n      throw err;\n    });\n  };\n  // when skipping client cache we wait to update\n  // inflight cache until successful data response\n  // this allows racing click event with fetching newer data\n  // without blocking navigation when stale data is available\n  if (unstable_skipClientCache && persistCache) {\n    return getData({}).then(function (data) {\n      if (data.response.headers.get(\"x-middleware-cache\") !== \"no-cache\") {\n        // only update cache if not marked as no-cache\n        inflightCache[cacheKey] = Promise.resolve(data);\n      }\n      return data;\n    });\n  }\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n  return inflightCache[cacheKey] = getData(isBackground ? {\n    method: \"HEAD\"\n  } : {});\n}\nfunction _createKey() {\n  return Math.random().toString(36).slice(2, 10);\n}\nfunction handleHardNavigation(param) {\n  var url = param.url,\n    router = param.router;\n  // ensure we don't trigger a hard navigation to the same\n  // URL as this can end up with an infinite refresh\n  if (url === (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(router.asPath, router.locale))) {\n    throw new Error(\"Invariant: attempted to hard navigate to the same URL \" + url + \" \" + location.href);\n  }\n  window.location.href = url;\n}\nvar getCancelledHandler = function getCancelledHandler(param) {\n  var route = param.route,\n    router = param.router;\n  var cancelled = false;\n  var cancel = router.clc = function () {\n    cancelled = true;\n  };\n  var handleCancelled = function handleCancelled() {\n    if (cancelled) {\n      var error = new Error('Abort fetching component for route: \"' + route + '\"');\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === router.clc) {\n      router.clc = null;\n    }\n  };\n  return handleCancelled;\n};\nvar Router = /*#__PURE__*/function () {\n  function Router(pathname, query, as, _ref3) {\n    var _this = this;\n    var initialProps = _ref3.initialProps,\n      pageLoader = _ref3.pageLoader,\n      App = _ref3.App,\n      wrapApp = _ref3.wrapApp,\n      Component = _ref3.Component,\n      err = _ref3.err,\n      subscription = _ref3.subscription,\n      isFallback = _ref3.isFallback,\n      locale = _ref3.locale,\n      locales = _ref3.locales,\n      defaultLocale = _ref3.defaultLocale,\n      domainLocales = _ref3.domainLocales,\n      isPreview = _ref3.isPreview;\n    _classCallCheck(this, Router);\n    // Server Data Cache (full data requests)\n    this.sdc = {};\n    // Server Background Cache (HEAD requests)\n    this.sbc = {};\n    this.isFirstPopStateEvent = true;\n    this._key = _createKey();\n    this.onPopState = function (e) {\n      var isFirstPopStateEvent = _this.isFirstPopStateEvent;\n      _this.isFirstPopStateEvent = false;\n      var state = e.state;\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var _pathname2 = _this.pathname,\n          _query = _this.query;\n        _this.changeState(\"replaceState\", (0, _formaturl.formatWithValidation)({\n          pathname: (0, _addbasepath.addBasePath)(_pathname2),\n          query: _query\n        }), (0, _utils.getURL)());\n        return;\n      }\n      // __NA is used to identify if the history entry can be handled by the app-router.\n      if (state.__NA) {\n        window.location.reload();\n        return;\n      }\n      if (!state.__N) {\n        return;\n      }\n      // Safari fires popstateevent when reopening the browser.\n      if (isFirstPopStateEvent && _this.locale === state.options.locale && state.as === _this.asPath) {\n        return;\n      }\n      var forcedScroll;\n      var url = state.url,\n        as = state.as,\n        options = state.options,\n        key = state.key;\n      if (true) {\n        if (manualScrollRestoration) {\n          if (_this._key !== key) {\n            // Snapshot current scroll position:\n            try {\n              sessionStorage.setItem(\"__next_scroll_\" + _this._key, JSON.stringify({\n                x: self.pageXOffset,\n                y: self.pageYOffset\n              }));\n            } catch (e) {}\n            // Restore old scroll position:\n            try {\n              var v = sessionStorage.getItem(\"__next_scroll_\" + key);\n              forcedScroll = JSON.parse(v);\n            } catch (e) {\n              forcedScroll = {\n                x: 0,\n                y: 0\n              };\n            }\n          }\n        }\n      }\n      _this._key = key;\n      var _ref4 = (0, _parserelativeurl.parseRelativeUrl)(url),\n        pathname = _ref4.pathname;\n      // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (_this.isSsr && as === (0, _addbasepath.addBasePath)(_this.asPath) && pathname === (0, _addbasepath.addBasePath)(_this.pathname)) {\n        return;\n      }\n      // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (_this._bps && !_this._bps(state)) {\n        return;\n      }\n      _this.change(\"replaceState\", url, as, Object.assign({}, options, {\n        shallow: options.shallow && _this._shallow,\n        locale: options.locale || _this.defaultLocale,\n        // @ts-ignore internal value not exposed on types\n        _h: 0\n      }), forcedScroll);\n    };\n    // represents the current component key\n    var route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    // set up the component cache (by route keys)\n    this.components = {};\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== \"/_error\") {\n      this.components[route] = {\n        Component: Component,\n        initial: true,\n        props: initialProps,\n        err: err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n    this.components[\"/_app\"] = {\n      Component: App,\n      styleSheets: []\n    };\n    if (true) {\n      var _require = __webpack_require__(/*! ../../lib/bloom-filter */ \"./node_modules/next/dist/shared/lib/bloom-filter.js\"),\n        BloomFilter = _require.BloomFilter;\n      var routerFilterSValue = {\"numItems\":0,\"errorRate\":0.0001,\"numBits\":0,\"numHashes\":null,\"bitArray\":[]};\n      var staticFilterData = routerFilterSValue ? routerFilterSValue : undefined;\n      var routerFilterDValue = {\"numItems\":0,\"errorRate\":0.0001,\"numBits\":0,\"numHashes\":null,\"bitArray\":[]};\n      var dynamicFilterData = routerFilterDValue ? routerFilterDValue : undefined;\n      if (staticFilterData == null ? void 0 : staticFilterData.numHashes) {\n        this._bfl_s = new BloomFilter(staticFilterData.numItems, staticFilterData.errorRate);\n        this._bfl_s[\"import\"](staticFilterData);\n      }\n      if (dynamicFilterData == null ? void 0 : dynamicFilterData.numHashes) {\n        this._bfl_d = new BloomFilter(dynamicFilterData.numItems, dynamicFilterData.errorRate);\n        this._bfl_d[\"import\"](dynamicFilterData);\n      }\n    }\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    var autoExportDynamic = (0, _isdynamic.isDynamicRoute)(pathname) && self.__NEXT_DATA__.autoExport;\n    this.basePath =  false || \"\";\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp;\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true;\n    this.isLocaleDomain = false;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.isExperimentalCompile || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n    if (false) {}\n    this.state = {\n      route: route,\n      pathname: pathname,\n      query: query,\n      asPath: autoExportDynamic ? pathname : as,\n      isPreview: !!isPreview,\n      locale:  false ? 0 : undefined,\n      isFallback: isFallback\n    };\n    this._initialMatchesMiddlewarePromise = Promise.resolve(false);\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (!as.startsWith(\"//\")) {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        var options = {\n          locale: locale\n        };\n        var asPath = (0, _utils.getURL)();\n        this._initialMatchesMiddlewarePromise = _matchesMiddleware({\n          router: this,\n          locale: locale,\n          asPath: asPath\n        }).then(function (matches) {\n          options._shouldResolveHref = as !== pathname;\n          _this.changeState(\"replaceState\", matches ? asPath : (0, _formaturl.formatWithValidation)({\n            pathname: (0, _addbasepath.addBasePath)(pathname),\n            query: query\n          }), asPath, options);\n          return matches;\n        });\n      }\n      window.addEventListener(\"popstate\", this.onPopState);\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (true) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = \"manual\";\n        }\n      }\n    }\n  }\n  _createClass(Router, [{\n    key: \"reload\",\n    value: function reload() {\n      window.location.reload();\n    }\n    /**\n    * Go back in history\n    */\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n    /**\n    * Go forward in history\n    */\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      window.history.forward();\n    }\n    /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  }, {\n    key: \"push\",\n    value: function push(url, as, options) {\n      if (options === void 0) options = {};\n      if (true) {\n        // TODO: remove in the future when we update history before route change\n        // is complete, as the popstate event should handle this capture.\n        if (manualScrollRestoration) {\n          try {\n            // Snapshot scroll position right before navigating to a new page:\n            sessionStorage.setItem(\"__next_scroll_\" + this._key, JSON.stringify({\n              x: self.pageXOffset,\n              y: self.pageYOffset\n            }));\n          } catch (e) {}\n        }\n      }\n      var _prepareUrlAs = prepareUrlAs(this, url, as);\n      url = _prepareUrlAs.url;\n      as = _prepareUrlAs.as;\n      return this.change(\"pushState\", url, as, options);\n    }\n    /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  }, {\n    key: \"replace\",\n    value: function replace(url, as, options) {\n      if (options === void 0) options = {};\n      var _prepareUrlAs2 = prepareUrlAs(this, url, as);\n      url = _prepareUrlAs2.url;\n      as = _prepareUrlAs2.as;\n      return this.change(\"replaceState\", url, as, options);\n    }\n  }, {\n    key: \"_bfl\",\n    value: function () {\n      var _bfl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(as, resolvedAs, locale, skipNavigate) {\n        var matchesBflStatic, matchesBflDynamic, _i, _arr, curAs, asNoSlash, asNoSlashLocale, _this__bfl_s, _this__bfl_s1, _i2, _arr2, normalizedAS, curAsParts, i, _this__bfl_d, currentPart;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (false) {}\n              matchesBflStatic = false;\n              matchesBflDynamic = false;\n              _i = 0, _arr = [as, resolvedAs];\n            case 4:\n              if (!(_i < _arr.length)) {\n                _context.next = 35;\n                break;\n              }\n              curAs = _arr[_i];\n              if (!curAs) {\n                _context.next = 32;\n                break;\n              }\n              asNoSlash = (0, _removetrailingslash.removeTrailingSlash)(new URL(curAs, \"http://n\").pathname);\n              asNoSlashLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asNoSlash, locale || this.locale));\n              if (!(asNoSlash !== (0, _removetrailingslash.removeTrailingSlash)(new URL(this.asPath, \"http://n\").pathname))) {\n                _context.next = 32;\n                break;\n              }\n              matchesBflStatic = matchesBflStatic || !!((_this__bfl_s = this._bfl_s) == null ? void 0 : _this__bfl_s.contains(asNoSlash)) || !!((_this__bfl_s1 = this._bfl_s) == null ? void 0 : _this__bfl_s1.contains(asNoSlashLocale));\n              _i2 = 0, _arr2 = [asNoSlash, asNoSlashLocale];\n            case 12:\n              if (!(_i2 < _arr2.length)) {\n                _context.next = 27;\n                break;\n              }\n              normalizedAS = _arr2[_i2];\n              // if any sub-path of as matches a dynamic filter path\n              // it should be hard navigated\n              curAsParts = normalizedAS.split(\"/\");\n              i = 0;\n            case 16:\n              if (!(!matchesBflDynamic && i < curAsParts.length + 1)) {\n                _context.next = 24;\n                break;\n              }\n              currentPart = curAsParts.slice(0, i).join(\"/\");\n              if (!(currentPart && ((_this__bfl_d = this._bfl_d) == null ? void 0 : _this__bfl_d.contains(currentPart)))) {\n                _context.next = 21;\n                break;\n              }\n              matchesBflDynamic = true;\n              return _context.abrupt(\"break\", 24);\n            case 21:\n              i++;\n              _context.next = 16;\n              break;\n            case 24:\n              _i2++;\n              _context.next = 12;\n              break;\n            case 27:\n              if (!(matchesBflStatic || matchesBflDynamic)) {\n                _context.next = 32;\n                break;\n              }\n              if (!skipNavigate) {\n                _context.next = 30;\n                break;\n              }\n              return _context.abrupt(\"return\", true);\n            case 30:\n              handleHardNavigation({\n                url: (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, locale || this.locale, this.defaultLocale)),\n                router: this\n              });\n              return _context.abrupt(\"return\", new Promise(function () {}));\n            case 32:\n              _i++;\n              _context.next = 4;\n              break;\n            case 35:\n              return _context.abrupt(\"return\", false);\n            case 36:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _bfl(_x3, _x4, _x5, _x6) {\n        return _bfl2.apply(this, arguments);\n      }\n      return _bfl;\n    }()\n  }, {\n    key: \"change\",\n    value: function () {\n      var _change = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(method, url, as, options, forcedScroll) {\n        var _this_components_pathname, isQueryUpdating, shouldResolveHref, nextState, readyStateChange, isSsr, prevLocale, parsedAs, localePathResult, didNavigate, _this_locales, detectedDomain, asNoBasePath, _options$shallow, shallow, _options$scroll, scroll, routeProps, cleanedAs, localeChange, parsed, pathname, query, pages, rewrites, _yield$Promise$all, _yield$Promise$all2, resolvedAs, route, parsedAsPathname, isMiddlewareRewrite, isMiddlewareMatch, rewritesResult, routeMatch, _parsedAs, asPathname, routeRegex, shouldInterpolate, interpolatedAs, missingParams, isErrorRoute, _self___NEXT_DATA___props_pageProps, _self___NEXT_DATA___props, _routeInfo_props, routeInfo, cleanedParsedPathname, prefixedAs, rewriteAs, localeResult, _routeRegex, curRouteMatch, component, scripts, destination, parsedHref, _prepareUrlAs3, newUrl, newAs, notFoundRoute, _routeInfo_route, isValidShallowRoute, _options_scroll, shouldScroll, resetScroll, upcomingScrollState, upcomingRouterState, _self___NEXT_DATA___props_pageProps1, _self___NEXT_DATA___props1, _routeInfo_props1, canSkipUpdating, hashRegex;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if ((0, _islocalurl.isLocalURL)(url)) {\n                _context2.next = 3;\n                break;\n              }\n              handleHardNavigation({\n                url: url,\n                router: this\n              });\n              return _context2.abrupt(\"return\", false);\n            case 3:\n              // WARNING: `_h` is an internal option for handing Next.js client-side\n              // hydration. Your app should _never_ use this property. It may change at\n              // any time without notice.\n              isQueryUpdating = options._h === 1;\n              if (!(!isQueryUpdating && !options.shallow)) {\n                _context2.next = 7;\n                break;\n              }\n              _context2.next = 7;\n              return this._bfl(as, undefined, options.locale);\n            case 7:\n              shouldResolveHref = isQueryUpdating || options._shouldResolveHref || (0, _parsepath.parsePath)(url).pathname === (0, _parsepath.parsePath)(as).pathname;\n              nextState = _objectSpread({}, this.state); // for static pages with query params in the URL we delay\n              // marking the router ready until after the query is updated\n              // or a navigation has occurred\n              readyStateChange = this.isReady !== true;\n              this.isReady = true;\n              isSsr = this.isSsr;\n              if (!isQueryUpdating) {\n                this.isSsr = false;\n              }\n              // if a route transition is already in progress before\n              // the query updating is triggered ignore query updating\n              if (!(isQueryUpdating && this.clc)) {\n                _context2.next = 15;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 15:\n              prevLocale = nextState.locale;\n              if (true) {\n                _context2.next = 28;\n                break;\n              }\n              nextState.locale = options.locale === false ? this.defaultLocale : options.locale || nextState.locale;\n              if (typeof options.locale === \"undefined\") {\n                options.locale = nextState.locale;\n              }\n              parsedAs = (0, _parserelativeurl.parseRelativeUrl)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as);\n              localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(parsedAs.pathname, this.locales);\n              if (localePathResult.detectedLocale) {\n                nextState.locale = localePathResult.detectedLocale;\n                parsedAs.pathname = (0, _addbasepath.addBasePath)(parsedAs.pathname);\n                as = (0, _formaturl.formatWithValidation)(parsedAs);\n                url = (0, _addbasepath.addBasePath)((0, _normalizelocalepath.normalizeLocalePath)((0, _hasbasepath.hasBasePath)(url) ? (0, _removebasepath.removeBasePath)(url) : url, this.locales).pathname);\n              }\n              didNavigate = false; // we need to wrap this in the env check again since regenerator runtime\n              // moves this on its own due to the return\n              if (false) {}\n              detectedDomain = (0, _detectdomainlocale.detectDomainLocale)(this.domainLocales, undefined, nextState.locale); // we need to wrap this in the env check again since regenerator runtime\n              // moves this on its own due to the return\n              if (false) {}\n              if (!didNavigate) {\n                _context2.next = 28;\n                break;\n              }\n              return _context2.abrupt(\"return\", new Promise(function () {}));\n            case 28:\n              // marking route changes as a navigation start entry\n              if (_utils.ST) {\n                performance.mark(\"routeChange\");\n              }\n              _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow, _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll;\n              routeProps = {\n                shallow: shallow\n              };\n              if (this._inFlightRoute && this.clc) {\n                if (!isSsr) {\n                  Router.events.emit(\"routeChangeError\", buildCancellationError(), this._inFlightRoute, routeProps);\n                }\n                this.clc();\n                this.clc = null;\n              }\n              as = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, options.locale, this.defaultLocale));\n              cleanedAs = (0, _removelocale.removeLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, nextState.locale);\n              this._inFlightRoute = as;\n              localeChange = prevLocale !== nextState.locale; // If the url change is only related to a hash change\n              // We should not proceed. We should only change the state.\n              if (!(!isQueryUpdating && this.onlyAHashChange(cleanedAs) && !localeChange)) {\n                _context2.next = 52;\n                break;\n              }\n              nextState.asPath = cleanedAs;\n              Router.events.emit(\"hashChangeStart\", as, routeProps);\n              // TODO: do we need the resolved href when only a hash change?\n              this.changeState(method, url, as, _objectSpread(_objectSpread({}, options), {}, {\n                scroll: false\n              }));\n              if (scroll) {\n                this.scrollToHash(cleanedAs);\n              }\n              _context2.prev = 41;\n              _context2.next = 44;\n              return this.set(nextState, this.components[nextState.route], null);\n            case 44:\n              _context2.next = 50;\n              break;\n            case 46:\n              _context2.prev = 46;\n              _context2.t0 = _context2[\"catch\"](41);\n              if ((0, _iserror[\"default\"])(_context2.t0) && _context2.t0.cancelled) {\n                Router.events.emit(\"routeChangeError\", _context2.t0, cleanedAs, routeProps);\n              }\n              throw _context2.t0;\n            case 50:\n              Router.events.emit(\"hashChangeComplete\", as, routeProps);\n              return _context2.abrupt(\"return\", true);\n            case 52:\n              parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n              pathname = parsed.pathname, query = parsed.query; // The build manifest needs to be loaded before auto-static dynamic pages\n              // get their query parameters to allow ensuring they can be parsed properly\n              // when rewritten to\n              _context2.prev = 54;\n              _context2.next = 57;\n              return Promise.all([this.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)(), this.pageLoader.getMiddleware()]);\n            case 57:\n              _yield$Promise$all = _context2.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              pages = _yield$Promise$all2[0];\n              rewrites = _yield$Promise$all2[1].__rewrites;\n              _context2.next = 67;\n              break;\n            case 63:\n              _context2.prev = 63;\n              _context2.t1 = _context2[\"catch\"](54);\n              // If we fail to resolve the page list or client-build manifest, we must\n              // do a server-side transition:\n              handleHardNavigation({\n                url: as,\n                router: this\n              });\n              return _context2.abrupt(\"return\", false);\n            case 67:\n              // If asked to change the current URL we should reload the current page\n              // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n              // We also need to set the method = replaceState always\n              // as this should not go into the history (That's how browsers work)\n              // We should compare the new asPath to the current asPath, not the url\n              if (!this.urlIsNew(cleanedAs) && !localeChange) {\n                method = \"replaceState\";\n              }\n              // we need to resolve the as value using rewrites for dynamic SSG\n              // pages to allow building the data URL correctly\n              resolvedAs = as; // url and as should always be prefixed with basePath by this\n              // point by either next/link or router.push/replace so strip the\n              // basePath from the pathname to match the pages dir 1-to-1\n              pathname = pathname ? (0, _removetrailingslash.removeTrailingSlash)((0, _removebasepath.removeBasePath)(pathname)) : pathname;\n              route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n              parsedAsPathname = as.startsWith(\"/\") && (0, _parserelativeurl.parseRelativeUrl)(as).pathname; // if we detected the path as app route during prefetching\n              // trigger hard navigation\n              if (!((_this_components_pathname = this.components[pathname]) == null ? void 0 : _this_components_pathname.__appRouter)) {\n                _context2.next = 75;\n                break;\n              }\n              handleHardNavigation({\n                url: as,\n                router: this\n              });\n              return _context2.abrupt(\"return\", new Promise(function () {}));\n            case 75:\n              isMiddlewareRewrite = !!(parsedAsPathname && route !== parsedAsPathname && (!(0, _isdynamic.isDynamicRoute)(route) || !(0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(route))(parsedAsPathname))); // we don't attempt resolve asPath when we need to execute\n              // middleware as the resolving will occur server-side\n              _context2.t2 = !options.shallow;\n              if (!_context2.t2) {\n                _context2.next = 81;\n                break;\n              }\n              _context2.next = 80;\n              return _matchesMiddleware({\n                asPath: as,\n                locale: nextState.locale,\n                router: this\n              });\n            case 80:\n              _context2.t2 = _context2.sent;\n            case 81:\n              isMiddlewareMatch = _context2.t2;\n              if (isQueryUpdating && isMiddlewareMatch) {\n                shouldResolveHref = false;\n              }\n              if (!(shouldResolveHref && pathname !== \"/_error\")) {\n                _context2.next = 96;\n                break;\n              }\n              options._shouldResolveHref = true;\n              if (true) {\n                _context2.next = 94;\n                break;\n              }\n              rewritesResult = (0, _resolverewrites[\"default\"])((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, nextState.locale), true), pages, rewrites, query, function (p) {\n                return resolveDynamicRoute(p, pages);\n              }, this.locales);\n              if (!rewritesResult.externalDest) {\n                _context2.next = 90;\n                break;\n              }\n              handleHardNavigation({\n                url: as,\n                router: this\n              });\n              return _context2.abrupt(\"return\", true);\n            case 90:\n              if (!isMiddlewareMatch) {\n                resolvedAs = rewritesResult.asPath;\n              }\n              if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                // if this directly matches a page we need to update the href to\n                // allow the correct page chunk to be loaded\n                pathname = rewritesResult.resolvedHref;\n                parsed.pathname = (0, _addbasepath.addBasePath)(pathname);\n                if (!isMiddlewareMatch) {\n                  url = (0, _formaturl.formatWithValidation)(parsed);\n                }\n              }\n              _context2.next = 96;\n              break;\n            case 94:\n              parsed.pathname = resolveDynamicRoute(pathname, pages);\n              if (parsed.pathname !== pathname) {\n                pathname = parsed.pathname;\n                parsed.pathname = (0, _addbasepath.addBasePath)(pathname);\n                if (!isMiddlewareMatch) {\n                  url = (0, _formaturl.formatWithValidation)(parsed);\n                }\n              }\n            case 96:\n              if ((0, _islocalurl.isLocalURL)(as)) {\n                _context2.next = 101;\n                break;\n              }\n              if (false) {}\n              throw new Error('Invalid href: \"' + url + '\" and as: \"' + as + '\", received relative href and external as' + \"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\");\n            case 99:\n              handleHardNavigation({\n                url: as,\n                router: this\n              });\n              return _context2.abrupt(\"return\", false);\n            case 101:\n              resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(resolvedAs), nextState.locale);\n              route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n              routeMatch = false;\n              if (!(0, _isdynamic.isDynamicRoute)(route)) {\n                _context2.next = 119;\n                break;\n              }\n              _parsedAs = (0, _parserelativeurl.parseRelativeUrl)(resolvedAs);\n              asPathname = _parsedAs.pathname;\n              routeRegex = (0, _routeregex.getRouteRegex)(route);\n              routeMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(asPathname);\n              shouldInterpolate = route === asPathname;\n              interpolatedAs = shouldInterpolate ? (0, _interpolateas.interpolateAs)(route, asPathname, query) : {};\n              if (!(!routeMatch || shouldInterpolate && !interpolatedAs.result)) {\n                _context2.next = 118;\n                break;\n              }\n              missingParams = Object.keys(routeRegex.groups).filter(function (param) {\n                return !query[param] && !routeRegex.groups[param].optional;\n              });\n              if (!(missingParams.length > 0 && !isMiddlewareMatch)) {\n                _context2.next = 116;\n                break;\n              }\n              if (true) {\n                console.warn(\"\" + (shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\") + \" failed to manually provide \" + (\"the params: \" + missingParams.join(\", \") + \" in the `href`'s `query`\"));\n              }\n              throw new Error((shouldInterpolate ? \"The provided `href` (\" + url + \") value is missing query values (\" + missingParams.join(\", \") + \") to be interpolated properly. \" : \"The provided `as` value (\" + asPathname + \") is incompatible with the `href` value (\" + route + \"). \") + (\"Read more: https://nextjs.org/docs/messages/\" + (shouldInterpolate ? \"href-interpolation-failed\" : \"incompatible-href-as\")));\n            case 116:\n              _context2.next = 119;\n              break;\n            case 118:\n              if (shouldInterpolate) {\n                as = (0, _formaturl.formatWithValidation)(Object.assign({}, _parsedAs, {\n                  pathname: interpolatedAs.result,\n                  query: (0, _omit.omit)(query, interpolatedAs.params)\n                }));\n              } else {\n                // Merge params into `query`, overwriting any specified in search\n                Object.assign(query, routeMatch);\n              }\n            case 119:\n              if (!isQueryUpdating) {\n                Router.events.emit(\"routeChangeStart\", as, routeProps);\n              }\n              isErrorRoute = this.pathname === \"/404\" || this.pathname === \"/_error\";\n              _context2.prev = 121;\n              _context2.next = 124;\n              return this.getRouteInfo({\n                route: route,\n                pathname: pathname,\n                query: query,\n                as: as,\n                resolvedAs: resolvedAs,\n                routeProps: routeProps,\n                locale: nextState.locale,\n                isPreview: nextState.isPreview,\n                hasMiddleware: isMiddlewareMatch,\n                unstable_skipClientCache: options.unstable_skipClientCache,\n                isQueryUpdating: isQueryUpdating && !this.isFallback,\n                isMiddlewareRewrite: isMiddlewareRewrite\n              });\n            case 124:\n              routeInfo = _context2.sent;\n              if (!(!isQueryUpdating && !options.shallow)) {\n                _context2.next = 128;\n                break;\n              }\n              _context2.next = 128;\n              return this._bfl(as, \"resolvedAs\" in routeInfo ? routeInfo.resolvedAs : undefined, nextState.locale);\n            case 128:\n              if (\"route\" in routeInfo && isMiddlewareMatch) {\n                pathname = routeInfo.route || route;\n                route = pathname;\n                if (!routeProps.shallow) {\n                  query = Object.assign({}, routeInfo.query || {}, query);\n                }\n                cleanedParsedPathname = (0, _hasbasepath.hasBasePath)(parsed.pathname) ? (0, _removebasepath.removeBasePath)(parsed.pathname) : parsed.pathname;\n                if (routeMatch && pathname !== cleanedParsedPathname) {\n                  Object.keys(routeMatch).forEach(function (key) {\n                    if (routeMatch && query[key] === routeMatch[key]) {\n                      delete query[key];\n                    }\n                  });\n                }\n                if ((0, _isdynamic.isDynamicRoute)(pathname)) {\n                  prefixedAs = !routeProps.shallow && routeInfo.resolvedAs ? routeInfo.resolvedAs : (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(new URL(as, location.href).pathname, nextState.locale), true);\n                  rewriteAs = prefixedAs;\n                  if ((0, _hasbasepath.hasBasePath)(rewriteAs)) {\n                    rewriteAs = (0, _removebasepath.removeBasePath)(rewriteAs);\n                  }\n                  if (false) {}\n                  _routeRegex = (0, _routeregex.getRouteRegex)(pathname);\n                  curRouteMatch = (0, _routematcher.getRouteMatcher)(_routeRegex)(new URL(rewriteAs, location.href).pathname);\n                  if (curRouteMatch) {\n                    Object.assign(query, curRouteMatch);\n                  }\n                }\n              }\n              // If the routeInfo brings a redirect we simply apply it.\n              if (!(\"type\" in routeInfo)) {\n                _context2.next = 136;\n                break;\n              }\n              if (!(routeInfo.type === \"redirect-internal\")) {\n                _context2.next = 134;\n                break;\n              }\n              return _context2.abrupt(\"return\", this.change(method, routeInfo.newUrl, routeInfo.newAs, options));\n            case 134:\n              handleHardNavigation({\n                url: routeInfo.destination,\n                router: this\n              });\n              return _context2.abrupt(\"return\", new Promise(function () {}));\n            case 136:\n              component = routeInfo.Component;\n              if (component && component.unstable_scriptLoader) {\n                scripts = [].concat(component.unstable_scriptLoader());\n                scripts.forEach(function (script) {\n                  (0, _script.handleClientScriptLoad)(script.props);\n                });\n              }\n              // handle redirect on client-transition\n              if (!((routeInfo.__N_SSG || routeInfo.__N_SSP) && routeInfo.props)) {\n                _context2.next = 165;\n                break;\n              }\n              if (!(routeInfo.props.pageProps && routeInfo.props.pageProps.__N_REDIRECT)) {\n                _context2.next = 149;\n                break;\n              }\n              // Use the destination from redirect without adding locale\n              options.locale = false;\n              destination = routeInfo.props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n              // client-navigation if it is falling back to hard navigation if\n              // it's not\n              if (!(destination.startsWith(\"/\") && routeInfo.props.pageProps.__N_REDIRECT_BASE_PATH !== false)) {\n                _context2.next = 147;\n                break;\n              }\n              parsedHref = (0, _parserelativeurl.parseRelativeUrl)(destination);\n              parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n              _prepareUrlAs3 = prepareUrlAs(this, destination, destination), newUrl = _prepareUrlAs3.url, newAs = _prepareUrlAs3.as;\n              return _context2.abrupt(\"return\", this.change(method, newUrl, newAs, options));\n            case 147:\n              handleHardNavigation({\n                url: destination,\n                router: this\n              });\n              return _context2.abrupt(\"return\", new Promise(function () {}));\n            case 149:\n              nextState.isPreview = !!routeInfo.props.__N_PREVIEW;\n              // handle SSG data 404\n              if (!(routeInfo.props.notFound === SSG_DATA_NOT_FOUND)) {\n                _context2.next = 165;\n                break;\n              }\n              _context2.prev = 151;\n              _context2.next = 154;\n              return this.fetchComponent(\"/404\");\n            case 154:\n              notFoundRoute = \"/404\";\n              _context2.next = 160;\n              break;\n            case 157:\n              _context2.prev = 157;\n              _context2.t3 = _context2[\"catch\"](151);\n              notFoundRoute = \"/_error\";\n            case 160:\n              _context2.next = 162;\n              return this.getRouteInfo({\n                route: notFoundRoute,\n                pathname: notFoundRoute,\n                query: query,\n                as: as,\n                resolvedAs: resolvedAs,\n                routeProps: {\n                  shallow: false\n                },\n                locale: nextState.locale,\n                isPreview: nextState.isPreview,\n                isNotFound: true\n              });\n            case 162:\n              routeInfo = _context2.sent;\n              if (!(\"type\" in routeInfo)) {\n                _context2.next = 165;\n                break;\n              }\n              throw new Error(\"Unexpected middleware effect on /404\");\n            case 165:\n              if (isQueryUpdating && this.pathname === \"/_error\" && ((_self___NEXT_DATA___props = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps = _self___NEXT_DATA___props.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps.statusCode) === 500 && ((_routeInfo_props = routeInfo.props) == null ? void 0 : _routeInfo_props.pageProps)) {\n                // ensure statusCode is still correct for static 500 page\n                // when updating query information\n                routeInfo.props.pageProps.statusCode = 500;\n              }\n              // shallow routing is only allowed for same page URL changes.\n              isValidShallowRoute = options.shallow && nextState.route === ((_routeInfo_route = routeInfo.route) != null ? _routeInfo_route : route);\n              shouldScroll = (_options_scroll = options.scroll) != null ? _options_scroll : !isQueryUpdating && !isValidShallowRoute;\n              resetScroll = shouldScroll ? {\n                x: 0,\n                y: 0\n              } : null;\n              upcomingScrollState = forcedScroll != null ? forcedScroll : resetScroll; // the new state that the router gonna set\n              upcomingRouterState = _objectSpread(_objectSpread({}, nextState), {}, {\n                route: route,\n                pathname: pathname,\n                query: query,\n                asPath: cleanedAs,\n                isFallback: false\n              }); // When the page being rendered is the 404 page, we should only update the\n              // query parameters. Route changes here might add the basePath when it\n              // wasn't originally present. This is also why this block is before the\n              // below `changeState` call which updates the browser's history (changing\n              // the URL).\n              if (!(isQueryUpdating && isErrorRoute)) {\n                _context2.next = 188;\n                break;\n              }\n              _context2.next = 174;\n              return this.getRouteInfo({\n                route: this.pathname,\n                pathname: this.pathname,\n                query: query,\n                as: as,\n                resolvedAs: resolvedAs,\n                routeProps: {\n                  shallow: false\n                },\n                locale: nextState.locale,\n                isPreview: nextState.isPreview,\n                isQueryUpdating: isQueryUpdating && !this.isFallback\n              });\n            case 174:\n              routeInfo = _context2.sent;\n              if (!(\"type\" in routeInfo)) {\n                _context2.next = 177;\n                break;\n              }\n              throw new Error(\"Unexpected middleware effect on \" + this.pathname);\n            case 177:\n              if (this.pathname === \"/_error\" && ((_self___NEXT_DATA___props1 = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps1 = _self___NEXT_DATA___props1.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps1.statusCode) === 500 && ((_routeInfo_props1 = routeInfo.props) == null ? void 0 : _routeInfo_props1.pageProps)) {\n                // ensure statusCode is still correct for static 500 page\n                // when updating query information\n                routeInfo.props.pageProps.statusCode = 500;\n              }\n              _context2.prev = 178;\n              _context2.next = 181;\n              return this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n            case 181:\n              _context2.next = 187;\n              break;\n            case 183:\n              _context2.prev = 183;\n              _context2.t4 = _context2[\"catch\"](178);\n              if ((0, _iserror[\"default\"])(_context2.t4) && _context2.t4.cancelled) {\n                Router.events.emit(\"routeChangeError\", _context2.t4, cleanedAs, routeProps);\n              }\n              throw _context2.t4;\n            case 187:\n              return _context2.abrupt(\"return\", true);\n            case 188:\n              Router.events.emit(\"beforeHistoryChange\", as, routeProps);\n              this.changeState(method, url, as, options);\n              // for query updates we can skip it if the state is unchanged and we don't\n              // need to scroll\n              // https://github.com/vercel/next.js/issues/37139\n              canSkipUpdating = isQueryUpdating && !upcomingScrollState && !readyStateChange && !localeChange && (0, _comparestates.compareRouterStates)(upcomingRouterState, this.state);\n              if (canSkipUpdating) {\n                _context2.next = 211;\n                break;\n              }\n              _context2.prev = 192;\n              _context2.next = 195;\n              return this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n            case 195:\n              _context2.next = 204;\n              break;\n            case 197:\n              _context2.prev = 197;\n              _context2.t5 = _context2[\"catch\"](192);\n              if (!_context2.t5.cancelled) {\n                _context2.next = 203;\n                break;\n              }\n              routeInfo.error = routeInfo.error || _context2.t5;\n              _context2.next = 204;\n              break;\n            case 203:\n              throw _context2.t5;\n            case 204:\n              if (!routeInfo.error) {\n                _context2.next = 207;\n                break;\n              }\n              if (!isQueryUpdating) {\n                Router.events.emit(\"routeChangeError\", routeInfo.error, cleanedAs, routeProps);\n              }\n              throw routeInfo.error;\n            case 207:\n              if (false) {}\n              if (!isQueryUpdating) {\n                Router.events.emit(\"routeChangeComplete\", as, routeProps);\n              }\n              // A hash mark # is the optional last part of a URL\n              hashRegex = /#.+$/;\n              if (shouldScroll && hashRegex.test(as)) {\n                this.scrollToHash(as);\n              }\n            case 211:\n              return _context2.abrupt(\"return\", true);\n            case 214:\n              _context2.prev = 214;\n              _context2.t6 = _context2[\"catch\"](121);\n              if (!((0, _iserror[\"default\"])(_context2.t6) && _context2.t6.cancelled)) {\n                _context2.next = 218;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 218:\n              throw _context2.t6;\n            case 219:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[41, 46], [54, 63], [121, 214], [151, 157], [178, 183], [192, 197]]);\n      }));\n      function change(_x7, _x8, _x9, _x10, _x11) {\n        return _change.apply(this, arguments);\n      }\n      return change;\n    }()\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as, options) {\n      if (options === void 0) options = {};\n      if (true) {\n        if (typeof window.history === \"undefined\") {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        }\n        if (typeof window.history[method] === \"undefined\") {\n          console.error(\"Warning: window.history.\" + method + \" is not available\");\n          return;\n        }\n      }\n      if (method !== \"pushState\" || (0, _utils.getURL)() !== as) {\n        this._shallow = options.shallow;\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options,\n          __N: true,\n          key: this._key = method !== \"pushState\" ? this._key : _createKey()\n        },\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/docs/Web/API/History/replaceState\n        \"\", as);\n      }\n    }\n  }, {\n    key: \"handleRouteInfoError\",\n    value: function () {\n      var _handleRouteInfoError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(err, pathname, query, as, routeProps, loadErrorFail) {\n        var props, _yield$this$fetchComp, Component, styleSheets, routeInfo;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              console.error(err);\n              if (!err.cancelled) {\n                _context3.next = 3;\n                break;\n              }\n              throw err;\n            case 3:\n              if (!((0, _routeloader.isAssetError)(err) || loadErrorFail)) {\n                _context3.next = 7;\n                break;\n              }\n              Router.events.emit(\"routeChangeError\", err, as, routeProps);\n              // If we can't load the page it could be one of following reasons\n              //  1. Page doesn't exists\n              //  2. Page does exist in a different zone\n              //  3. Internal error while loading the page\n              // So, doing a hard reload is the proper way to deal with this.\n              handleHardNavigation({\n                url: as,\n                router: this\n              });\n              // Changing the URL doesn't block executing the current code path.\n              // So let's throw a cancellation error stop the routing logic.\n              throw buildCancellationError();\n            case 7:\n              _context3.prev = 7;\n              _context3.next = 10;\n              return this.fetchComponent(\"/_error\");\n            case 10:\n              _yield$this$fetchComp = _context3.sent;\n              Component = _yield$this$fetchComp.page;\n              styleSheets = _yield$this$fetchComp.styleSheets;\n              routeInfo = {\n                props: props,\n                Component: Component,\n                styleSheets: styleSheets,\n                err: err,\n                error: err\n              };\n              if (routeInfo.props) {\n                _context3.next = 25;\n                break;\n              }\n              _context3.prev = 15;\n              _context3.next = 18;\n              return this.getInitialProps(Component, {\n                err: err,\n                pathname: pathname,\n                query: query\n              });\n            case 18:\n              routeInfo.props = _context3.sent;\n              _context3.next = 25;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](15);\n              console.error(\"Error in error page `getInitialProps`: \", _context3.t0);\n              routeInfo.props = {};\n            case 25:\n              return _context3.abrupt(\"return\", routeInfo);\n            case 28:\n              _context3.prev = 28;\n              _context3.t1 = _context3[\"catch\"](7);\n              return _context3.abrupt(\"return\", this.handleRouteInfoError((0, _iserror[\"default\"])(_context3.t1) ? _context3.t1 : new Error(_context3.t1 + \"\"), pathname, query, as, routeProps, true));\n            case 31:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[7, 28], [15, 21]]);\n      }));\n      function handleRouteInfoError(_x12, _x13, _x14, _x15, _x16, _x17) {\n        return _handleRouteInfoError.apply(this, arguments);\n      }\n      return handleRouteInfoError;\n    }()\n  }, {\n    key: \"getRouteInfo\",\n    value: function () {\n      var _getRouteInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(param) {\n        var _this2 = this;\n        var requestedRoute, pathname, query, as, resolvedAs, routeProps, locale, hasMiddleware, isPreview, unstable_skipClientCache, isQueryUpdating, isMiddlewareRewrite, isNotFound, route, _data_effect, _data_effect1, _data_effect2, _data_response, existingInfo, handleCancelled, cachedRouteInfo, isBackground, fetchNextDataParams, data, resolvedRoute, pages, routeInfo, _require2, isValidElementType, wasBailedPrefetch, shouldFetchData, _yield$this$_getData, props, cacheKey;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              requestedRoute = param.route, pathname = param.pathname, query = param.query, as = param.as, resolvedAs = param.resolvedAs, routeProps = param.routeProps, locale = param.locale, hasMiddleware = param.hasMiddleware, isPreview = param.isPreview, unstable_skipClientCache = param.unstable_skipClientCache, isQueryUpdating = param.isQueryUpdating, isMiddlewareRewrite = param.isMiddlewareRewrite, isNotFound = param.isNotFound;\n              /**\n              * This `route` binding can change if there's a rewrite\n              * so we keep a reference to the original requested route\n              * so we can store the cache for it and avoid re-requesting every time\n              * for shallow routing purposes.\n              */\n              route = requestedRoute;\n              _context5.prev = 2;\n              existingInfo = this.components[route];\n              if (!(routeProps.shallow && existingInfo && this.route === route)) {\n                _context5.next = 6;\n                break;\n              }\n              return _context5.abrupt(\"return\", existingInfo);\n            case 6:\n              handleCancelled = getCancelledHandler({\n                route: route,\n                router: this\n              });\n              if (hasMiddleware) {\n                existingInfo = undefined;\n              }\n              cachedRouteInfo = existingInfo && !(\"initial\" in existingInfo) && false ? 0 : undefined;\n              isBackground = isQueryUpdating;\n              fetchNextDataParams = {\n                dataHref: this.pageLoader.getDataHref({\n                  href: (0, _formaturl.formatWithValidation)({\n                    pathname: pathname,\n                    query: query\n                  }),\n                  skipInterpolation: true,\n                  asPath: isNotFound ? \"/404\" : resolvedAs,\n                  locale: locale\n                }),\n                hasMiddleware: true,\n                isServerRender: this.isSsr,\n                parseJSON: true,\n                inflightCache: isBackground ? this.sbc : this.sdc,\n                persistCache: !isPreview,\n                isPrefetch: false,\n                unstable_skipClientCache: unstable_skipClientCache,\n                isBackground: isBackground\n              };\n              if (!(isQueryUpdating && !isMiddlewareRewrite)) {\n                _context5.next = 15;\n                break;\n              }\n              _context5.t0 = null;\n              _context5.next = 18;\n              break;\n            case 15:\n              _context5.next = 17;\n              return withMiddlewareEffects({\n                fetchData: function fetchData() {\n                  return fetchNextData(fetchNextDataParams);\n                },\n                asPath: isNotFound ? \"/404\" : resolvedAs,\n                locale: locale,\n                router: this\n              })[\"catch\"](function (err) {\n                // we don't hard error during query updating\n                // as it's un-necessary and doesn't need to be fatal\n                // unless it is a fallback route and the props can't\n                // be loaded\n                if (isQueryUpdating) {\n                  return null;\n                }\n                throw err;\n              });\n            case 17:\n              _context5.t0 = _context5.sent;\n            case 18:\n              data = _context5.t0;\n              // when rendering error routes we don't apply middleware\n              // effects\n              if (data && (pathname === \"/_error\" || pathname === \"/404\")) {\n                data.effect = undefined;\n              }\n              if (isQueryUpdating) {\n                if (!data) {\n                  data = {\n                    json: self.__NEXT_DATA__.props\n                  };\n                } else {\n                  data.json = self.__NEXT_DATA__.props;\n                }\n              }\n              handleCancelled();\n              if (!((data == null ? void 0 : (_data_effect = data.effect) == null ? void 0 : _data_effect.type) === \"redirect-internal\" || (data == null ? void 0 : (_data_effect1 = data.effect) == null ? void 0 : _data_effect1.type) === \"redirect-external\")) {\n                _context5.next = 24;\n                break;\n              }\n              return _context5.abrupt(\"return\", data.effect);\n            case 24:\n              if (!((data == null ? void 0 : (_data_effect2 = data.effect) == null ? void 0 : _data_effect2.type) === \"rewrite\")) {\n                _context5.next = 37;\n                break;\n              }\n              resolvedRoute = (0, _removetrailingslash.removeTrailingSlash)(data.effect.resolvedHref);\n              _context5.next = 28;\n              return this.pageLoader.getPageList();\n            case 28:\n              pages = _context5.sent;\n              if (!(!isQueryUpdating || pages.includes(resolvedRoute))) {\n                _context5.next = 37;\n                break;\n              }\n              route = resolvedRoute;\n              pathname = data.effect.resolvedHref;\n              query = _objectSpread(_objectSpread({}, query), data.effect.parsedAs.query);\n              resolvedAs = (0, _removebasepath.removeBasePath)((0, _normalizelocalepath.normalizeLocalePath)(data.effect.parsedAs.pathname, this.locales).pathname);\n              // Check again the cache with the new destination.\n              existingInfo = this.components[route];\n              if (!(routeProps.shallow && existingInfo && this.route === route && !hasMiddleware)) {\n                _context5.next = 37;\n                break;\n              }\n              return _context5.abrupt(\"return\", _objectSpread(_objectSpread({}, existingInfo), {}, {\n                route: route\n              }));\n            case 37:\n              if (!(0, _isapiroute.isAPIRoute)(route)) {\n                _context5.next = 40;\n                break;\n              }\n              handleHardNavigation({\n                url: as,\n                router: this\n              });\n              return _context5.abrupt(\"return\", new Promise(function () {}));\n            case 40:\n              _context5.t1 = cachedRouteInfo;\n              if (_context5.t1) {\n                _context5.next = 45;\n                break;\n              }\n              _context5.next = 44;\n              return this.fetchComponent(route).then(function (res) {\n                return {\n                  Component: res.page,\n                  styleSheets: res.styleSheets,\n                  __N_SSG: res.mod.__N_SSG,\n                  __N_SSP: res.mod.__N_SSP\n                };\n              });\n            case 44:\n              _context5.t1 = _context5.sent;\n            case 45:\n              routeInfo = _context5.t1;\n              if (false) {}\n              _require2 = __webpack_require__(/*! next/dist/compiled/react-is */ \"./node_modules/next/dist/compiled/react-is/index.js\"), isValidElementType = _require2.isValidElementType;\n              if (isValidElementType(routeInfo.Component)) {\n                _context5.next = 50;\n                break;\n              }\n              throw new Error('The default export is not a React Component in page: \"' + pathname + '\"');\n            case 50:\n              wasBailedPrefetch = data == null ? void 0 : (_data_response = data.response) == null ? void 0 : _data_response.headers.get(\"x-middleware-skip\");\n              shouldFetchData = routeInfo.__N_SSG || routeInfo.__N_SSP; // For non-SSG prefetches that bailed before sending data\n              // we clear the cache to fetch full response\n              if (wasBailedPrefetch && (data == null ? void 0 : data.dataHref)) {\n                delete this.sdc[data.dataHref];\n              }\n              _context5.next = 55;\n              return this._getData( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                var dataHref, fetched;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) switch (_context4.prev = _context4.next) {\n                    case 0:\n                      if (!shouldFetchData) {\n                        _context4.next = 8;\n                        break;\n                      }\n                      if (!((data == null ? void 0 : data.json) && !wasBailedPrefetch)) {\n                        _context4.next = 3;\n                        break;\n                      }\n                      return _context4.abrupt(\"return\", {\n                        cacheKey: data.cacheKey,\n                        props: data.json\n                      });\n                    case 3:\n                      dataHref = (data == null ? void 0 : data.dataHref) ? data.dataHref : _this2.pageLoader.getDataHref({\n                        href: (0, _formaturl.formatWithValidation)({\n                          pathname: pathname,\n                          query: query\n                        }),\n                        asPath: resolvedAs,\n                        locale: locale\n                      });\n                      _context4.next = 6;\n                      return fetchNextData({\n                        dataHref: dataHref,\n                        isServerRender: _this2.isSsr,\n                        parseJSON: true,\n                        inflightCache: wasBailedPrefetch ? {} : _this2.sdc,\n                        persistCache: !isPreview,\n                        isPrefetch: false,\n                        unstable_skipClientCache: unstable_skipClientCache\n                      });\n                    case 6:\n                      fetched = _context4.sent;\n                      return _context4.abrupt(\"return\", {\n                        cacheKey: fetched.cacheKey,\n                        props: fetched.json || {}\n                      });\n                    case 8:\n                      _context4.t0 = {};\n                      _context4.next = 11;\n                      return _this2.getInitialProps(routeInfo.Component,\n                      // we provide AppTree later so this needs to be `any`\n                      {\n                        pathname: pathname,\n                        query: query,\n                        asPath: as,\n                        locale: locale,\n                        locales: _this2.locales,\n                        defaultLocale: _this2.defaultLocale\n                      });\n                    case 11:\n                      _context4.t1 = _context4.sent;\n                      return _context4.abrupt(\"return\", {\n                        headers: _context4.t0,\n                        props: _context4.t1\n                      });\n                    case 13:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }, _callee4);\n              })));\n            case 55:\n              _yield$this$_getData = _context5.sent;\n              props = _yield$this$_getData.props;\n              cacheKey = _yield$this$_getData.cacheKey;\n              // Only bust the data cache for SSP routes although\n              // middleware can skip cache per request with\n              // x-middleware-cache: no-cache as well\n              if (routeInfo.__N_SSP && fetchNextDataParams.dataHref && cacheKey) {\n                delete this.sdc[cacheKey];\n              }\n              // we kick off a HEAD request in the background\n              // when a non-prefetch request is made to signal revalidation\n              if (!this.isPreview && routeInfo.__N_SSG && false && 0) {}\n              props.pageProps = Object.assign({}, props.pageProps);\n              routeInfo.props = props;\n              routeInfo.route = route;\n              routeInfo.query = query;\n              routeInfo.resolvedAs = resolvedAs;\n              this.components[route] = routeInfo;\n              return _context5.abrupt(\"return\", routeInfo);\n            case 69:\n              _context5.prev = 69;\n              _context5.t2 = _context5[\"catch\"](2);\n              return _context5.abrupt(\"return\", this.handleRouteInfoError((0, _iserror.getProperError)(_context5.t2), pathname, query, as, routeProps));\n            case 72:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[2, 69]]);\n      }));\n      function getRouteInfo(_x18) {\n        return _getRouteInfo.apply(this, arguments);\n      }\n      return getRouteInfo;\n    }()\n  }, {\n    key: \"set\",\n    value: function set(state, data, resetScroll) {\n      this.state = state;\n      return this.sub(data, this.components[\"/_app\"].Component, resetScroll);\n    }\n    /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._bps = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n      var _this$asPath$split = this.asPath.split(\"#\", 2),\n        _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),\n        oldUrlNoHash = _this$asPath$split2[0],\n        oldHash = _this$asPath$split2[1];\n      var _as$split = as.split(\"#\", 2),\n        _as$split2 = _slicedToArray(_as$split, 2),\n        newUrlNoHash = _as$split2[0],\n        newHash = _as$split2[1];\n      // Makes sure we scroll to the provided hash if the url/hash are the same\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      }\n      // If the urls are change, there's more than a hash change\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      }\n      // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split(\"#\", 2),\n        _as$split4 = _slicedToArray(_as$split3, 2),\n        _as$split4$ = _as$split4[1],\n        hash = _as$split4$ === void 0 ? \"\" : _as$split4$;\n      (0, _handlesmoothscroll.handleSmoothScroll)(function () {\n        // Scroll to top if the hash is just `#` with no value or `#top`\n        // To mirror browsers\n        if (hash === \"\" || hash === \"top\") {\n          window.scrollTo(0, 0);\n          return;\n        }\n        // Decode hash to make non-latin anchor works.\n        var rawHash = decodeURIComponent(hash);\n        // First we check if the element by id is found\n        var idEl = document.getElementById(rawHash);\n        if (idEl) {\n          idEl.scrollIntoView();\n          return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        var nameEl = document.getElementsByName(rawHash)[0];\n        if (nameEl) {\n          nameEl.scrollIntoView();\n        }\n      }, {\n        onlyHashChange: this.onlyAHashChange(as)\n      });\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(asPath) {\n      return this.asPath !== asPath;\n    }\n    /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(url, asPath, options) {\n        var _this3 = this;\n        var parsed, urlPathname, pathname, query, originalPathname, parsedAs, localePathResult, pages, resolvedAs, locale, isMiddlewareMatch, rewrites, _yield, rewritesResult, data, route;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (asPath === void 0) asPath = url;\n              if (options === void 0) options = {};\n              // Prefetch is not supported in development mode because it would trigger on-demand-entries\n              if (false) {}\n              return _context6.abrupt(\"return\");\n            case 4:\n              if (!( true && (0, _isbot.isBot)(window.navigator.userAgent))) {\n                _context6.next = 6;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 6:\n              parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n              urlPathname = parsed.pathname;\n              pathname = parsed.pathname, query = parsed.query;\n              originalPathname = pathname;\n              if (false) {}\n              _context6.next = 13;\n              return this.pageLoader.getPageList();\n            case 13:\n              pages = _context6.sent;\n              resolvedAs = asPath;\n              locale = typeof options.locale !== \"undefined\" ? options.locale || undefined : this.locale;\n              _context6.next = 18;\n              return _matchesMiddleware({\n                asPath: asPath,\n                locale: locale,\n                router: this\n              });\n            case 18:\n              isMiddlewareMatch = _context6.sent;\n              if (true) {\n                _context6.next = 29;\n                break;\n              }\n              _context6.next = 22;\n              return (0, _routeloader.getClientBuildManifest)();\n            case 22:\n              _yield = _context6.sent;\n              rewrites = _yield.__rewrites;\n              rewritesResult = (0, _resolverewrites[\"default\"])((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asPath, this.locale), true), pages, rewrites, parsed.query, function (p) {\n                return resolveDynamicRoute(p, pages);\n              }, this.locales);\n              if (!rewritesResult.externalDest) {\n                _context6.next = 27;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 27:\n              if (!isMiddlewareMatch) {\n                resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(rewritesResult.asPath), this.locale);\n              }\n              if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                // if this directly matches a page we need to update the href to\n                // allow the correct page chunk to be loaded\n                pathname = rewritesResult.resolvedHref;\n                parsed.pathname = pathname;\n                if (!isMiddlewareMatch) {\n                  url = (0, _formaturl.formatWithValidation)(parsed);\n                }\n              }\n            case 29:\n              parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n              if ((0, _isdynamic.isDynamicRoute)(parsed.pathname)) {\n                pathname = parsed.pathname;\n                parsed.pathname = pathname;\n                Object.assign(query, (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(parsed.pathname))((0, _parsepath.parsePath)(asPath).pathname) || {});\n                if (!isMiddlewareMatch) {\n                  url = (0, _formaturl.formatWithValidation)(parsed);\n                }\n              }\n              if (true) {\n                _context6.next = 35;\n                break;\n              }\n              _context6.t0 = null;\n              _context6.next = 38;\n              break;\n            case 35:\n              _context6.next = 37;\n              return withMiddlewareEffects({\n                fetchData: function fetchData() {\n                  return fetchNextData({\n                    dataHref: _this3.pageLoader.getDataHref({\n                      href: (0, _formaturl.formatWithValidation)({\n                        pathname: originalPathname,\n                        query: query\n                      }),\n                      skipInterpolation: true,\n                      asPath: resolvedAs,\n                      locale: locale\n                    }),\n                    hasMiddleware: true,\n                    isServerRender: false,\n                    parseJSON: true,\n                    inflightCache: _this3.sdc,\n                    persistCache: !_this3.isPreview,\n                    isPrefetch: true\n                  });\n                },\n                asPath: asPath,\n                locale: locale,\n                router: this\n              });\n            case 37:\n              _context6.t0 = _context6.sent;\n            case 38:\n              data = _context6.t0;\n              /**\n              * If there was a rewrite we apply the effects of the rewrite on the\n              * current parameters for the prefetch.\n              */\n              if ((data == null ? void 0 : data.effect.type) === \"rewrite\") {\n                parsed.pathname = data.effect.resolvedHref;\n                pathname = data.effect.resolvedHref;\n                query = _objectSpread(_objectSpread({}, query), data.effect.parsedAs.query);\n                resolvedAs = data.effect.parsedAs.pathname;\n                url = (0, _formaturl.formatWithValidation)(parsed);\n              }\n              /**\n              * If there is a redirect to an external destination then we don't have\n              * to prefetch content as it will be unused.\n              */\n              if (!((data == null ? void 0 : data.effect.type) === \"redirect-external\")) {\n                _context6.next = 42;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 42:\n              route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n              _context6.next = 45;\n              return this._bfl(asPath, resolvedAs, options.locale, true);\n            case 45:\n              if (!_context6.sent) {\n                _context6.next = 47;\n                break;\n              }\n              this.components[urlPathname] = {\n                __appRouter: true\n              };\n            case 47:\n              _context6.next = 49;\n              return Promise.all([this.pageLoader._isSsg(route).then(function (isSsg) {\n                return isSsg ? fetchNextData({\n                  dataHref: (data == null ? void 0 : data.json) ? data == null ? void 0 : data.dataHref : _this3.pageLoader.getDataHref({\n                    href: url,\n                    asPath: resolvedAs,\n                    locale: locale\n                  }),\n                  isServerRender: false,\n                  parseJSON: true,\n                  inflightCache: _this3.sdc,\n                  persistCache: !_this3.isPreview,\n                  isPrefetch: true,\n                  unstable_skipClientCache: options.unstable_skipClientCache || options.priority && !!true\n                }).then(function () {\n                  return false;\n                })[\"catch\"](function () {\n                  return false;\n                }) : false;\n              }), this.pageLoader[options.priority ? \"loadPage\" : \"prefetch\"](route)]);\n            case 49:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function prefetch(_x19, _x20, _x21) {\n        return _prefetch.apply(this, arguments);\n      }\n      return prefetch;\n    }()\n  }, {\n    key: \"fetchComponent\",\n    value: function () {\n      var _fetchComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(route) {\n        var handleCancelled, componentResult;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              handleCancelled = getCancelledHandler({\n                route: route,\n                router: this\n              });\n              _context7.prev = 1;\n              _context7.next = 4;\n              return this.pageLoader.loadPage(route);\n            case 4:\n              componentResult = _context7.sent;\n              handleCancelled();\n              return _context7.abrupt(\"return\", componentResult);\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](1);\n              handleCancelled();\n              throw _context7.t0;\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[1, 9]]);\n      }));\n      function fetchComponent(_x22) {\n        return _fetchComponent.apply(this, arguments);\n      }\n      return fetchComponent;\n    }()\n  }, {\n    key: \"_getData\",\n    value: function _getData(fn) {\n      var _this4 = this;\n      var cancelled = false;\n      var cancel = function cancel() {\n        cancelled = true;\n      };\n      this.clc = cancel;\n      return fn().then(function (data) {\n        if (cancel === _this4.clc) {\n          _this4.clc = null;\n        }\n        if (cancelled) {\n          var err = new Error(\"Loading initial props cancelled\");\n          err.cancelled = true;\n          throw err;\n        }\n        return data;\n      });\n    }\n  }, {\n    key: \"_getFlightData\",\n    value: function _getFlightData(dataHref) {\n      // Do not cache RSC flight response since it's not a static resource\n      return fetchNextData({\n        dataHref: dataHref,\n        isServerRender: true,\n        parseJSON: false,\n        inflightCache: this.sdc,\n        persistCache: false,\n        isPrefetch: false\n      }).then(function (param) {\n        var text = param.text;\n        return {\n          data: text\n        };\n      });\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function getInitialProps(Component, ctx) {\n      var App = this.components[\"/_app\"].Component;\n      var AppTree = this._wrapApp(App);\n      ctx.AppTree = AppTree;\n      return (0, _utils.loadGetInitialProps)(App, {\n        AppTree: AppTree,\n        Component: Component,\n        router: this,\n        ctx: ctx\n      });\n    }\n  }, {\n    key: \"route\",\n    get: function get() {\n      return this.state.route;\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      return this.state.pathname;\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this.state.query;\n    }\n  }, {\n    key: \"asPath\",\n    get: function get() {\n      return this.state.asPath;\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.state.locale;\n    }\n  }, {\n    key: \"isFallback\",\n    get: function get() {\n      return this.state.isFallback;\n    }\n  }, {\n    key: \"isPreview\",\n    get: function get() {\n      return this.state.isPreview;\n    }\n  }]);\n  return Router;\n}();\nRouter.events = (0, _mitt[\"default\"])();\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/router/router.js\n"));

/***/ })

}]);