"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendors~node_modules_next_dist_client_components_react-dev-overlay_internal_container_B"],{

/***/ "./node_modules/next/dist/client/components/react-dev-overlay/internal/container/BuildError.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/react-dev-overlay/internal/container/BuildError.js ***!
  \*****************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\nvar _s = $RefreshSig$();\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  BuildError: function BuildError() {\n    return _BuildError;\n  },\n  styles: function styles() {\n    return _styles;\n  }\n});\nvar _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nvar _tagged_template_literal_loose = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal_loose */ \"./node_modules/@swc/helpers/esm/_tagged_template_literal_loose.js\");\nvar _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar _react = /*#__PURE__*/_interop_require_wildcard._(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nvar _Dialog = __webpack_require__(/*! ../components/Dialog */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/Dialog/index.js\");\nvar _Overlay = __webpack_require__(/*! ../components/Overlay */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/Overlay/index.js\");\nvar _Terminal = __webpack_require__(/*! ../components/Terminal */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/Terminal/index.js\");\nvar _VersionStalenessInfo = __webpack_require__(/*! ../components/VersionStalenessInfo */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/VersionStalenessInfo/index.js\");\nvar _nooptemplate = __webpack_require__(/*! ../helpers/noop-template */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/noop-template.js\");\nfunction _templateObject() {\n  var data = _tagged_template_literal_loose._([\"\\n  .nextjs-container-errors-header > h1 {\\n    font-size: var(--size-font-big);\\n    line-height: var(--size-font-bigger);\\n    font-weight: bold;\\n    margin: var(--size-gap-double) 0;\\n  }\\n  .nextjs-container-errors-header p {\\n    font-size: var(--size-font-small);\\n    line-height: var(--size-font-big);\\n    white-space: pre-wrap;\\n  }\\n  .nextjs-container-errors-body footer {\\n    margin-top: var(--size-gap);\\n  }\\n  .nextjs-container-errors-body footer p {\\n    margin: 0;\\n  }\\n\\n  .nextjs-container-errors-body small {\\n    color: var(--color-font);\\n  }\\n\"]);\n  _templateObject = function _templateObject() {\n    return data;\n  };\n  return data;\n}\nvar _BuildError = function BuildError(param) {\n  _s();\n  var message = param.message,\n    versionInfo = param.versionInfo;\n  var noop = _react.useCallback(function () {}, []);\n  return /*#__PURE__*/(0, _jsxruntime.jsx)(_Overlay.Overlay, {\n    fixed: true,\n    children: /*#__PURE__*/(0, _jsxruntime.jsx)(_Dialog.Dialog, {\n      type: \"error\",\n      \"aria-labelledby\": \"nextjs__container_error_label\",\n      \"aria-describedby\": \"nextjs__container_error_desc\",\n      onClose: noop,\n      children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_Dialog.DialogContent, {\n        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_Dialog.DialogHeader, {\n          className: \"nextjs-container-errors-header\",\n          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(\"h1\", {\n            id: \"nextjs__container_errors_label\",\n            children: \"Build Error\"\n          }), /*#__PURE__*/(0, _jsxruntime.jsx)(\"p\", {\n            id: \"nextjs__container_errors_desc\",\n            className: \"nextjs__container_errors_desc\",\n            children: \"Failed to compile\"\n          }), versionInfo ? /*#__PURE__*/(0, _jsxruntime.jsx)(_VersionStalenessInfo.VersionStalenessInfo, _objectSpread({}, versionInfo)) : null]\n        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_Dialog.DialogBody, {\n          className: \"nextjs-container-errors-body\",\n          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_Terminal.Terminal, {\n            content: message\n          }), /*#__PURE__*/(0, _jsxruntime.jsx)(\"footer\", {\n            children: /*#__PURE__*/(0, _jsxruntime.jsx)(\"p\", {\n              id: \"nextjs__container_build_error_desc\",\n              children: /*#__PURE__*/(0, _jsxruntime.jsx)(\"small\", {\n                children: \"This error occurred during the build process and can only be dismissed by fixing the error.\"\n              })\n            })\n          })]\n        })]\n      })\n    })\n  });\n};\n_s(_BuildError, \"hHp3im7kVRcdOeKmK0+3cSEjzLI=\");\nvar _styles = (0, _nooptemplate.noop)(_templateObject());\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/react-dev-overlay/internal/container/BuildError.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/react-dev-overlay/internal/container/Errors.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/react-dev-overlay/internal/container/Errors.js ***!
  \*************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  Errors: function Errors() {\n    return _Errors;\n  },\n  styles: function styles() {\n    return _styles;\n  }\n});\nvar _tagged_template_literal_loose = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal_loose */ \"./node_modules/@swc/helpers/esm/_tagged_template_literal_loose.js\");\nvar _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar _shared = __webpack_require__(/*! ../../shared */ \"./node_modules/next/dist/client/components/react-dev-overlay/shared.js\");\nvar _Dialog = __webpack_require__(/*! ../components/Dialog */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/Dialog/index.js\");\nvar _LeftRightDialogHeader = __webpack_require__(/*! ../components/LeftRightDialogHeader */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/LeftRightDialogHeader/index.js\");\nvar _Overlay = __webpack_require__(/*! ../components/Overlay */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/Overlay/index.js\");\nvar _Toast = __webpack_require__(/*! ../components/Toast */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/Toast/index.js\");\nvar _getErrorByType = __webpack_require__(/*! ../helpers/getErrorByType */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/getErrorByType.js\");\nvar _nooptemplate = __webpack_require__(/*! ../helpers/noop-template */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/noop-template.js\");\nvar _CloseIcon = __webpack_require__(/*! ../icons/CloseIcon */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/icons/CloseIcon.js\");\nvar _RuntimeError = __webpack_require__(/*! ./RuntimeError */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/container/RuntimeError/index.js\");\nvar _VersionStalenessInfo = __webpack_require__(/*! ../components/VersionStalenessInfo */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/VersionStalenessInfo/index.js\");\nvar _errorsource = __webpack_require__(/*! ../../../../../shared/lib/error-source */ \"./node_modules/next/dist/shared/lib/error-source.js\");\nvar _hotlinkedtext = __webpack_require__(/*! ../components/hot-linked-text */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/components/hot-linked-text/index.js\");\nvar _componentstackpseudohtml = __webpack_require__(/*! ./RuntimeError/component-stack-pseudo-html */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/container/RuntimeError/component-stack-pseudo-html.js\");\nvar _hydrationerrorinfo = __webpack_require__(/*! ../helpers/hydration-error-info */ \"./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/hydration-error-info.js\");\nfunction _templateObject() {\n  var data = _tagged_template_literal_loose._([\"\\n  .nextjs-container-errors-header > h1 {\\n    font-size: var(--size-font-big);\\n    line-height: var(--size-font-bigger);\\n    font-weight: bold;\\n    margin: calc(var(--size-gap-double) * 1.5) 0;\\n    color: var(--color-title-h1);\\n  }\\n  .nextjs-container-errors-header small {\\n    font-size: var(--size-font-small);\\n    color: var(--color-accents-1);\\n    margin-left: var(--size-gap-double);\\n  }\\n  .nextjs-container-errors-header small > span {\\n    font-family: var(--font-stack-monospace);\\n  }\\n  .nextjs-container-errors-header p {\\n    font-size: var(--size-font-small);\\n    line-height: var(--size-font-big);\\n    white-space: pre-wrap;\\n  }\\n  .nextjs__container_errors_desc {\\n    font-family: var(--font-stack-monospace);\\n    padding: var(--size-gap) var(--size-gap-double);\\n    border-left: 2px solid var(--color-text-color-red-1);\\n    margin-top: var(--size-gap);\\n    font-weight: bold;\\n    color: var(--color-text-color-red-1);\\n    background-color: var(--color-text-background-red-1);\\n  }\\n  p.nextjs__container_errors__notes {\\n    margin: var(--size-gap-double) auto;\\n    color: var(--color-stack-notes);\\n    font-weight: 600;\\n    font-size: 15px;\\n  }\\n  .nextjs-container-errors-header > div > small {\\n    margin: 0;\\n    margin-top: var(--size-gap-half);\\n  }\\n  .nextjs-container-errors-header > p > a {\\n    color: inherit;\\n    font-weight: bold;\\n  }\\n  .nextjs-container-errors-body > h2:not(:first-child) {\\n    margin-top: calc(var(--size-gap-double) + var(--size-gap));\\n  }\\n  .nextjs-container-errors-body > h2 {\\n    color: var(--color-title-color);\\n    margin-bottom: var(--size-gap);\\n    font-size: var(--size-font-big);\\n  }\\n  .nextjs__container_errors__component-stack {\\n    padding: 12px 32px;\\n    color: var(--color-ansi-fg);\\n    background: var(--color-ansi-bg);\\n  }\\n  .nextjs-toast-errors-parent {\\n    cursor: pointer;\\n    transition: transform 0.2s ease;\\n  }\\n  .nextjs-toast-errors-parent:hover {\\n    transform: scale(1.1);\\n  }\\n  .nextjs-toast-errors {\\n    display: flex;\\n    align-items: center;\\n    justify-content: flex-start;\\n  }\\n  .nextjs-toast-errors > svg {\\n    margin-right: var(--size-gap);\\n  }\\n  .nextjs-toast-errors-hide-button {\\n    margin-left: var(--size-gap-triple);\\n    border: none;\\n    background: none;\\n    color: var(--color-ansi-bright-white);\\n    padding: 0;\\n    transition: opacity 0.25s ease;\\n    opacity: 0.7;\\n  }\\n  .nextjs-toast-errors-hide-button:hover {\\n    opacity: 1;\\n  }\\n\"]);\n  _templateObject = function _templateObject() {\n    return data;\n  };\n  return data;\n}\nfunction isNextjsLink(text) {\n  return text.startsWith(\"https://nextjs.org\");\n}\nfunction getErrorSignature(ev) {\n  var event = ev.event;\n  switch (event.type) {\n    case _shared.ACTION_UNHANDLED_ERROR:\n    case _shared.ACTION_UNHANDLED_REJECTION:\n      {\n        return event.reason.name + \"::\" + event.reason.message + \"::\" + event.reason.stack;\n      }\n    default:\n      {}\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _ = event;\n  return \"\";\n}\nfunction _Errors(param) {\n  var isAppDir = param.isAppDir,\n    errors = param.errors,\n    initialDisplayState = param.initialDisplayState,\n    versionInfo = param.versionInfo;\n  var _activeError_componentStackFrames;\n  var _ref = (0, _react.useState)({}),\n    _ref2 = _slicedToArray(_ref, 2),\n    lookups = _ref2[0],\n    setLookups = _ref2[1];\n  var _ref3 = (0, _react.useMemo)(function () {\n      var ready = [];\n      var next = null;\n      // Ensure errors are displayed in the order they occurred in:\n      for (var idx = 0; idx < errors.length; ++idx) {\n        var e = errors[idx];\n        var id = e.id;\n        if (id in lookups) {\n          ready.push(lookups[id]);\n          continue;\n        }\n        // Check for duplicate errors\n        if (idx > 0) {\n          var prev = errors[idx - 1];\n          if (getErrorSignature(prev) === getErrorSignature(e)) {\n            continue;\n          }\n        }\n        next = e;\n        break;\n      }\n      return [ready, next];\n    }, [errors, lookups]),\n    _ref4 = _slicedToArray(_ref3, 2),\n    readyErrors = _ref4[0],\n    nextError = _ref4[1];\n  var isLoading = (0, _react.useMemo)(function () {\n    return readyErrors.length < 1 && Boolean(errors.length);\n  }, [errors.length, readyErrors.length]);\n  (0, _react.useEffect)(function () {\n    if (nextError == null) {\n      return;\n    }\n    var mounted = true;\n    (0, _getErrorByType.getErrorByType)(nextError, isAppDir).then(function (resolved) {\n      // We don't care if the desired error changed while we were resolving,\n      // thus we're not tracking it using a ref. Once the work has been done,\n      // we'll store it.\n      if (mounted) {\n        setLookups(function (m) {\n          return _objectSpread(_objectSpread({}, m), {}, _defineProperty({}, resolved.id, resolved));\n        });\n      }\n    }, function () {\n      // TODO: handle this, though an edge case\n    });\n    return function () {\n      mounted = false;\n    };\n  }, [nextError, isAppDir]);\n  var _ref5 = (0, _react.useState)(initialDisplayState),\n    _ref6 = _slicedToArray(_ref5, 2),\n    displayState = _ref6[0],\n    setDisplayState = _ref6[1];\n  var _ref7 = (0, _react.useState)(0),\n    _ref8 = _slicedToArray(_ref7, 2),\n    activeIdx = _ref8[0],\n    setActiveIndex = _ref8[1];\n  var previous = (0, _react.useCallback)(function () {\n    return setActiveIndex(function (v) {\n      return Math.max(0, v - 1);\n    });\n  }, []);\n  var next = (0, _react.useCallback)(function () {\n    return setActiveIndex(function (v) {\n      return Math.max(0, Math.min(readyErrors.length - 1, v + 1));\n    });\n  }, [readyErrors.length]);\n  var activeError = (0, _react.useMemo)(function () {\n    var _readyErrors_activeIdx;\n    return (_readyErrors_activeIdx = readyErrors[activeIdx]) != null ? _readyErrors_activeIdx : null;\n  }, [activeIdx, readyErrors]);\n  // Reset component state when there are no errors to be displayed.\n  // This should never happen, but lets handle it.\n  (0, _react.useEffect)(function () {\n    if (errors.length < 1) {\n      setLookups({});\n      setDisplayState(\"hidden\");\n      setActiveIndex(0);\n    }\n  }, [errors.length]);\n  var minimize = (0, _react.useCallback)(function () {\n    return setDisplayState(\"minimized\");\n  }, []);\n  var hide = (0, _react.useCallback)(function () {\n    return setDisplayState(\"hidden\");\n  }, []);\n  var fullscreen = (0, _react.useCallback)(function () {\n    return setDisplayState(\"fullscreen\");\n  }, []);\n  // This component shouldn't be rendered with no errors, but if it is, let's\n  // handle it gracefully by rendering nothing.\n  if (errors.length < 1 || activeError == null) {\n    return null;\n  }\n  if (isLoading) {\n    // TODO: better loading state\n    return /*#__PURE__*/(0, _jsxruntime.jsx)(_Overlay.Overlay, {});\n  }\n  if (displayState === \"hidden\") {\n    return null;\n  }\n  if (displayState === \"minimized\") {\n    return /*#__PURE__*/(0, _jsxruntime.jsx)(_Toast.Toast, {\n      className: \"nextjs-toast-errors-parent\",\n      onClick: fullscreen,\n      children: /*#__PURE__*/(0, _jsxruntime.jsxs)(\"div\", {\n        className: \"nextjs-toast-errors\",\n        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"24\",\n          height: \"24\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(\"circle\", {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\"\n          }), /*#__PURE__*/(0, _jsxruntime.jsx)(\"line\", {\n            x1: \"12\",\n            y1: \"8\",\n            x2: \"12\",\n            y2: \"12\"\n          }), /*#__PURE__*/(0, _jsxruntime.jsx)(\"line\", {\n            x1: \"12\",\n            y1: \"16\",\n            x2: \"12.01\",\n            y2: \"16\"\n          })]\n        }), /*#__PURE__*/(0, _jsxruntime.jsxs)(\"span\", {\n          children: [readyErrors.length, \" error\", readyErrors.length > 1 ? \"s\" : \"\"]\n        }), /*#__PURE__*/(0, _jsxruntime.jsx)(\"button\", {\n          \"data-nextjs-toast-errors-hide-button\": true,\n          className: \"nextjs-toast-errors-hide-button\",\n          type: \"button\",\n          onClick: function onClick(e) {\n            e.stopPropagation();\n            hide();\n          },\n          \"aria-label\": \"Hide Errors\",\n          children: /*#__PURE__*/(0, _jsxruntime.jsx)(_CloseIcon.CloseIcon, {})\n        })]\n      })\n    });\n  }\n  var error = activeError.error;\n  var isServerError = [\"server\", \"edge-server\"].includes((0, _errorsource.getErrorSource)(error) || \"\");\n  var errorDetails = error.details || {};\n  var _ref9 = errorDetails.warning || [null, \"\", \"\"],\n    _ref10 = _slicedToArray(_ref9, 3),\n    warningTemplate = _ref10[0],\n    serverContent = _ref10[1],\n    clientContent = _ref10[2];\n  var hydrationErrorType = (0, _hydrationerrorinfo.getHydrationWarningType)(warningTemplate);\n  var hydrationWarning = warningTemplate ? warningTemplate.replace(\"%s\", serverContent).replace(\"%s\", clientContent).replace(\"%s\", \"\") // remove the %s for stack\n  .replace(/%s$/, \"\") // If there's still a %s at the end, remove it\n  .replace(/^Warning: /, \"\") : null;\n  return /*#__PURE__*/(0, _jsxruntime.jsx)(_Overlay.Overlay, {\n    children: /*#__PURE__*/(0, _jsxruntime.jsx)(_Dialog.Dialog, {\n      type: \"error\",\n      \"aria-labelledby\": \"nextjs__container_errors_label\",\n      \"aria-describedby\": \"nextjs__container_errors_desc\",\n      onClose: isServerError ? undefined : minimize,\n      children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_Dialog.DialogContent, {\n        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_Dialog.DialogHeader, {\n          className: \"nextjs-container-errors-header\",\n          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(_LeftRightDialogHeader.LeftRightDialogHeader, {\n            previous: activeIdx > 0 ? previous : null,\n            next: activeIdx < readyErrors.length - 1 ? next : null,\n            close: isServerError ? undefined : minimize,\n            children: [/*#__PURE__*/(0, _jsxruntime.jsxs)(\"small\", {\n              children: [/*#__PURE__*/(0, _jsxruntime.jsx)(\"span\", {\n                children: activeIdx + 1\n              }), \" of\", \" \", /*#__PURE__*/(0, _jsxruntime.jsx)(\"span\", {\n                \"data-nextjs-dialog-header-total-count\": true,\n                children: readyErrors.length\n              }), \" error\", readyErrors.length < 2 ? \"\" : \"s\"]\n            }), versionInfo ? /*#__PURE__*/(0, _jsxruntime.jsx)(_VersionStalenessInfo.VersionStalenessInfo, _objectSpread({}, versionInfo)) : null]\n          }), /*#__PURE__*/(0, _jsxruntime.jsx)(\"h1\", {\n            id: \"nextjs__container_errors_label\",\n            children: isServerError ? \"Server Error\" : \"Unhandled Runtime Error\"\n          }), /*#__PURE__*/(0, _jsxruntime.jsxs)(\"p\", {\n            id: \"nextjs__container_errors_desc\",\n            className: \"nextjs__container_errors_desc\",\n            children: [error.name, \":\", \" \", /*#__PURE__*/(0, _jsxruntime.jsx)(_hotlinkedtext.HotlinkedText, {\n              text: error.message,\n              matcher: isNextjsLink\n            })]\n          }), hydrationWarning && /*#__PURE__*/(0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {\n            children: [/*#__PURE__*/(0, _jsxruntime.jsx)(\"p\", {\n              id: \"nextjs__container_errors__notes\",\n              className: \"nextjs__container_errors__notes\",\n              children: hydrationWarning\n            }), ((_activeError_componentStackFrames = activeError.componentStackFrames) == null ? void 0 : _activeError_componentStackFrames.length) ? /*#__PURE__*/(0, _jsxruntime.jsx)(_componentstackpseudohtml.PseudoHtmlDiff, {\n              className: \"nextjs__container_errors__component-stack\",\n              hydrationMismatchType: hydrationErrorType,\n              componentStackFrames: activeError.componentStackFrames,\n              firstContent: serverContent,\n              secondContent: clientContent\n            }) : null]\n          }), isServerError ? /*#__PURE__*/(0, _jsxruntime.jsx)(\"div\", {\n            children: /*#__PURE__*/(0, _jsxruntime.jsx)(\"small\", {\n              children: \"This error happened while generating the page. Any console logs will be displayed in the terminal window.\"\n            })\n          }) : undefined]\n        }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Dialog.DialogBody, {\n          className: \"nextjs-container-errors-body\",\n          children: /*#__PURE__*/(0, _jsxruntime.jsx)(_RuntimeError.RuntimeError, {\n            error: activeError\n          }, activeError.id.toString())\n        })]\n      })\n    })\n  });\n}\nvar _styles = (0, _nooptemplate.noop)(_templateObject());\nif ((typeof exports[\"default\"] === 'function' || typeof exports[\"default\"] === 'object' && exports[\"default\"] !== null) && typeof exports[\"default\"].__esModule === 'undefined') {\n  Object.defineProperty(exports[\"default\"], '__esModule', {\n    value: true\n  });\n  Object.assign(exports[\"default\"], exports);\n  module.exports = exports[\"default\"];\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/react-dev-overlay/internal/container/Errors.js\n"));

/***/ })

}]);