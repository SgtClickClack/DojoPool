"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendors~node_modules_mui_material_tr"],{

/***/ "./node_modules/@mui/material/transitions/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mui/material/transitions/utils.js ***!
  \*********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTransitionProps: function() { return /* binding */ getTransitionProps; },\n/* harmony export */   reflow: function() { return /* binding */ reflow; }\n/* harmony export */ });\nvar reflow = function reflow(node) {\n  return node.scrollTop;\n};\nfunction getTransitionProps(props, options) {\n  var _style$transitionDura, _style$transitionTimi;\n  var timeout = props.timeout,\n    easing = props.easing,\n    _props$style = props.style,\n    style = _props$style === void 0 ? {} : _props$style;\n  return {\n    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,\n    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,\n    delay: style.transitionDelay\n  };\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC90cmFuc2l0aW9ucy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQU1BLE1BQU0sR0FBRyxTQUFUQSxNQUFNQSxDQUFHQyxJQUFJO0VBQUEsT0FBSUEsSUFBSSxDQUFDQyxTQUFTO0FBQUE7QUFDckMsU0FBU0Msa0JBQWtCQSxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtFQUNqRCxJQUFJQyxxQkFBcUIsRUFBRUMscUJBQXFCO0VBQ2hELElBQ0VDLE9BQU8sR0FHTEosS0FBSyxDQUhQSSxPQUFPO0lBQ1BDLE1BQU0sR0FFSkwsS0FBSyxDQUZQSyxNQUFNO0lBQUFDLFlBQUEsR0FFSk4sS0FBSyxDQURQTyxLQUFLO0lBQUxBLEtBQUssR0FBQUQsWUFBQSxjQUFHLENBQUMsQ0FBQyxHQUFBQSxZQUFBO0VBRVosT0FBTztJQUNMRSxRQUFRLEVBQUUsQ0FBQ04scUJBQXFCLEdBQUdLLEtBQUssQ0FBQ0Usa0JBQWtCLEtBQUssSUFBSSxHQUFHUCxxQkFBcUIsR0FBRyxPQUFPRSxPQUFPLEtBQUssUUFBUSxHQUFHQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0gsT0FBTyxDQUFDUyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2pLTCxNQUFNLEVBQUUsQ0FBQ0YscUJBQXFCLEdBQUdJLEtBQUssQ0FBQ0ksd0JBQXdCLEtBQUssSUFBSSxHQUFHUixxQkFBcUIsR0FBRyxPQUFPRSxNQUFNLEtBQUssUUFBUSxHQUFHQSxNQUFNLENBQUNKLE9BQU8sQ0FBQ1MsSUFBSSxDQUFDLEdBQUdMLE1BQU07SUFDN0pPLEtBQUssRUFBRUwsS0FBSyxDQUFDTTtFQUNmLENBQUM7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC90cmFuc2l0aW9ucy91dGlscy5qcz8yZmIzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCByZWZsb3cgPSBub2RlID0+IG5vZGUuc2Nyb2xsVG9wO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wcyhwcm9wcywgb3B0aW9ucykge1xuICB2YXIgX3N0eWxlJHRyYW5zaXRpb25EdXJhLCBfc3R5bGUkdHJhbnNpdGlvblRpbWk7XG4gIGNvbnN0IHtcbiAgICB0aW1lb3V0LFxuICAgIGVhc2luZyxcbiAgICBzdHlsZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogKF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbikgIT0gbnVsbCA/IF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA6IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCxcbiAgICBlYXNpbmc6IChfc3R5bGUkdHJhbnNpdGlvblRpbWkgPSBzdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24pICE9IG51bGwgPyBfc3R5bGUkdHJhbnNpdGlvblRpbWkgOiB0eXBlb2YgZWFzaW5nID09PSAnb2JqZWN0JyA/IGVhc2luZ1tvcHRpb25zLm1vZGVdIDogZWFzaW5nLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iXSwibmFtZXMiOlsicmVmbG93Iiwibm9kZSIsInNjcm9sbFRvcCIsImdldFRyYW5zaXRpb25Qcm9wcyIsInByb3BzIiwib3B0aW9ucyIsIl9zdHlsZSR0cmFuc2l0aW9uRHVyYSIsIl9zdHlsZSR0cmFuc2l0aW9uVGltaSIsInRpbWVvdXQiLCJlYXNpbmciLCJfcHJvcHMkc3R5bGUiLCJzdHlsZSIsImR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwibW9kZSIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsImRlbGF5IiwidHJhbnNpdGlvbkRlbGF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mui/material/transitions/utils.js\n"));

/***/ }),

/***/ "./node_modules/@mui/material/useAutocomplete/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mui/material/useAutocomplete/index.js ***!
  \*************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFilterOptions: function() { return /* reexport safe */ _useAutocomplete__WEBPACK_IMPORTED_MODULE_0__.createFilterOptions; },\n/* harmony export */   \"default\": function() { return /* reexport safe */ _useAutocomplete__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _useAutocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useAutocomplete */ \"./node_modules/@mui/material/useAutocomplete/useAutocomplete.js\");\n'use client';\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91c2VBdXRvY29tcGxldGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsWUFBWTs7QUFFcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXNlQXV0b2NvbXBsZXRlL2luZGV4LmpzPzg0MTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5leHBvcnQgeyBkZWZhdWx0LCBjcmVhdGVGaWx0ZXJPcHRpb25zIH0gZnJvbSAnLi91c2VBdXRvY29tcGxldGUnOyJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiY3JlYXRlRmlsdGVyT3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mui/material/useAutocomplete/index.js\n"));

/***/ }),

/***/ "./node_modules/@mui/material/useAutocomplete/useAutocomplete.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@mui/material/useAutocomplete/useAutocomplete.js ***!
  \***********************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFilterOptions: function() { return /* binding */ createFilterOptions; }\n/* harmony export */ });\n/* harmony import */ var C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mui_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mui/utils */ \"./node_modules/@mui/utils/esm/index.js\");\n'use client';\n\n/* eslint-disable no-constant-condition */\n\nvar _s = $RefreshSig$();\n\n\n\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nfunction createFilterOptions() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _config$ignoreAccents = config.ignoreAccents,\n    ignoreAccents = _config$ignoreAccents === void 0 ? true : _config$ignoreAccents,\n    _config$ignoreCase = config.ignoreCase,\n    ignoreCase = _config$ignoreCase === void 0 ? true : _config$ignoreCase,\n    limit = config.limit,\n    _config$matchFrom = config.matchFrom,\n    matchFrom = _config$matchFrom === void 0 ? 'any' : _config$matchFrom,\n    stringify = config.stringify,\n    _config$trim = config.trim,\n    trim = _config$trim === void 0 ? false : _config$trim;\n  return function (options, _ref) {\n    var inputValue = _ref.inputValue,\n      getOptionLabel = _ref.getOptionLabel;\n    var input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    var filteredOptions = !input ? options : options.filter(function (option) {\n      var candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (var i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nvar defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nvar pageSize = 5;\nvar defaultIsActiveElementInListbox = function defaultIsActiveElementInListbox(listboxRef) {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nvar MULTIPLE_DEFAULT_VALUE = [];\nfunction useAutocomplete(props) {\n  _s();\n  var _props$unstable_isAct = props.unstable_isActiveElementInListbox,\n    unstable_isActiveElementInListbox = _props$unstable_isAct === void 0 ? defaultIsActiveElementInListbox : _props$unstable_isAct,\n    _props$unstable_class = props.unstable_classNamePrefix,\n    unstable_classNamePrefix = _props$unstable_class === void 0 ? 'Mui' : _props$unstable_class,\n    _props$autoComplete = props.autoComplete,\n    autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n    _props$autoHighlight = props.autoHighlight,\n    autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n    _props$autoSelect = props.autoSelect,\n    autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n    _props$blurOnSelect = props.blurOnSelect,\n    blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n    _props$clearOnBlur = props.clearOnBlur,\n    clearOnBlur = _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur,\n    _props$clearOnEscape = props.clearOnEscape,\n    clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n    _props$componentName = props.componentName,\n    componentName = _props$componentName === void 0 ? 'useAutocomplete' : _props$componentName,\n    _props$defaultValue = props.defaultValue,\n    defaultValue = _props$defaultValue === void 0 ? props.multiple ? MULTIPLE_DEFAULT_VALUE : null : _props$defaultValue,\n    _props$disableClearab = props.disableClearable,\n    disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n    _props$disableCloseOn = props.disableCloseOnSelect,\n    disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n    disabledProp = props.disabled,\n    _props$disabledItemsF = props.disabledItemsFocusable,\n    disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,\n    _props$disableListWra = props.disableListWrap,\n    disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n    _props$filterOptions = props.filterOptions,\n    filterOptions = _props$filterOptions === void 0 ? defaultFilterOptions : _props$filterOptions,\n    _props$filterSelected = props.filterSelectedOptions,\n    filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n    _props$freeSolo = props.freeSolo,\n    freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n    getOptionDisabled = props.getOptionDisabled,\n    getOptionKey = props.getOptionKey,\n    _props$getOptionLabel = props.getOptionLabel,\n    getOptionLabelProp = _props$getOptionLabel === void 0 ? function (option) {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    } : _props$getOptionLabel,\n    groupBy = props.groupBy,\n    _props$handleHomeEndK = props.handleHomeEndKeys,\n    handleHomeEndKeys = _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK,\n    idProp = props.id,\n    _props$includeInputIn = props.includeInputInList,\n    includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n    inputValueProp = props.inputValue,\n    _props$isOptionEqualT = props.isOptionEqualToValue,\n    isOptionEqualToValue = _props$isOptionEqualT === void 0 ? function (option, value) {\n      return option === value;\n    } : _props$isOptionEqualT,\n    _props$multiple = props.multiple,\n    multiple = _props$multiple === void 0 ? false : _props$multiple,\n    onChange = props.onChange,\n    onClose = props.onClose,\n    onHighlightChange = props.onHighlightChange,\n    onInputChange = props.onInputChange,\n    onOpen = props.onOpen,\n    openProp = props.open,\n    _props$openOnFocus = props.openOnFocus,\n    openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n    options = props.options,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    _props$selectOnFocus = props.selectOnFocus,\n    selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,\n    valueProp = props.value;\n  var id = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useId)(idProp);\n  var getOptionLabel = getOptionLabelProp;\n  getOptionLabel = function getOptionLabel(option) {\n    var optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (true) {\n        var erroneousReturn = optionLabel === undefined ? 'undefined' : \"\".concat(typeof optionLabel, \" (\").concat(optionLabel, \")\");\n        console.error(\"MUI: The `getOptionLabel` method of \".concat(componentName, \" returned \").concat(erroneousReturn, \" instead of a string for \").concat(JSON.stringify(option), \".\"));\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  var ignoreFocus = react__WEBPACK_IMPORTED_MODULE_2__.useRef(false);\n  var firstFocus = react__WEBPACK_IMPORTED_MODULE_2__.useRef(true);\n  var inputRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n  var listboxRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_2__.useState(null),\n    _React$useState2 = (0,C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_React$useState, 2),\n    anchorEl = _React$useState2[0],\n    setAnchorEl = _React$useState2[1];\n  var _React$useState3 = react__WEBPACK_IMPORTED_MODULE_2__.useState(-1),\n    _React$useState4 = (0,C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_React$useState3, 2),\n    focusedTag = _React$useState4[0],\n    setFocusedTag = _React$useState4[1];\n  var defaultHighlighted = autoHighlight ? 0 : -1;\n  var highlightedIndexRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(defaultHighlighted);\n  var _useControlled = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useControlled)({\n      controlled: valueProp,\n      \"default\": defaultValue,\n      name: componentName\n    }),\n    _useControlled2 = (0,C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_useControlled, 2),\n    value = _useControlled2[0],\n    setValueState = _useControlled2[1];\n  var _useControlled3 = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useControlled)({\n      controlled: inputValueProp,\n      \"default\": '',\n      name: componentName,\n      state: 'inputValue'\n    }),\n    _useControlled4 = (0,C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_useControlled3, 2),\n    inputValue = _useControlled4[0],\n    setInputValueState = _useControlled4[1];\n  var _React$useState5 = react__WEBPACK_IMPORTED_MODULE_2__.useState(false),\n    _React$useState6 = (0,C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_React$useState5, 2),\n    focused = _React$useState6[0],\n    setFocused = _React$useState6[1];\n  var resetInputValue = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(function (event, newValue) {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    var isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    var newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      var optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  var _useControlled5 = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useControlled)({\n      controlled: openProp,\n      \"default\": false,\n      name: componentName,\n      state: 'open'\n    }),\n    _useControlled6 = (0,C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_useControlled5, 2),\n    open = _useControlled6[0],\n    setOpenState = _useControlled6[1];\n  var _React$useState7 = react__WEBPACK_IMPORTED_MODULE_2__.useState(true),\n    _React$useState8 = (0,C_Users_julia_OneDrive_Documents_GitHub_DojoPool_src_dojopool_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_React$useState7, 2),\n    inputPristine = _React$useState8[0],\n    setInputPristine = _React$useState8[1];\n  var inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  var popupOpen = open && !readOnly;\n  var filteredOptions = popupOpen ? filterOptions(options.filter(function (option) {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(function (value2) {\n      return value2 !== null && isOptionEqualToValue(option, value2);\n    })) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel: getOptionLabel\n  }) : [];\n  var previousProps = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.usePreviousProps)({\n    filteredOptions: filteredOptions,\n    value: value,\n    inputValue: inputValue\n  });\n  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {\n    var valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  var listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (true) {\n    if (value !== null && !freeSolo && options.length > 0) {\n      var missingValue = (multiple ? value : [value]).filter(function (value2) {\n        return !options.some(function (option) {\n          return isOptionEqualToValue(option, value2);\n        });\n      });\n      if (missingValue.length > 0) {\n        console.warn([\"MUI: The value provided to \".concat(componentName, \" is invalid.\"), \"None of the options match with `\".concat(missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0]), \"`.\"), 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  var focusTag = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback)(function (tagToFocus) {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(\"[data-tag-index=\\\"\".concat(tagToFocus, \"\\\"]\")).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    var nextFocus = index;\n    while (true) {\n      var option = listboxRef.current.querySelector(\"[data-option-index=\\\"\".concat(nextFocus, \"\\\"]\"));\n\n      // Same logic as MenuList.js\n      var nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  var setHighlightedIndex = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback)(function (_ref2) {\n    var event = _ref2.event,\n      index = _ref2.index,\n      _ref2$reason = _ref2.reason,\n      reason = _ref2$reason === void 0 ? 'auto' : _ref2$reason;\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', \"\".concat(id, \"-option-\").concat(index));\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    var prev = listboxRef.current.querySelector(\"[role=\\\"option\\\"].\".concat(unstable_classNamePrefix, \"-focused\"));\n    if (prev) {\n      prev.classList.remove(\"\".concat(unstable_classNamePrefix, \"-focused\"));\n      prev.classList.remove(\"\".concat(unstable_classNamePrefix, \"-focusVisible\"));\n    }\n    var listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    var option = listboxRef.current.querySelector(\"[data-option-index=\\\"\".concat(index, \"\\\"]\"));\n    if (!option) {\n      return;\n    }\n    option.classList.add(\"\".concat(unstable_classNamePrefix, \"-focused\"));\n    if (reason === 'keyboard') {\n      option.classList.add(\"\".concat(unstable_classNamePrefix, \"-focusVisible\"));\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      var element = option;\n      var scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      var elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  var changeHighlightedIndex = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback)(function (_ref3) {\n    var event = _ref3.event,\n      diff = _ref3.diff,\n      _ref3$direction = _ref3.direction,\n      direction = _ref3$direction === void 0 ? 'next' : _ref3$direction,\n      _ref3$reason = _ref3.reason,\n      reason = _ref3$reason === void 0 ? 'auto' : _ref3$reason;\n    if (!popupOpen) {\n      return;\n    }\n    var getNextIndex = function getNextIndex() {\n      var maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      var newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    var nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason: reason,\n      event: event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        var option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        var index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  var getPreviousHighlightedOptionIndex = function getPreviousHighlightedOptionIndex() {\n    var isSameValue = function isSameValue(value1, value2) {\n      var label1 = value1 ? getOptionLabel(value1) : '';\n      var label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every(function (val, i) {\n      return getOptionLabel(value[i]) === getOptionLabel(val);\n    }) : isSameValue(previousProps.value, value))) {\n      var previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return findIndex(filteredOptions, function (option) {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  var syncHighlightedIndex = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(function () {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    var previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    var valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      var currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, function (val) {\n        return isOptionEqualToValue(currentOption, val);\n      }) !== -1) {\n        return;\n      }\n      var itemIndex = findIndex(filteredOptions, function (optionItem) {\n        return isOptionEqualToValue(optionItem, valueItem);\n      });\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  var handleListboxRef = (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback)(function (node) {\n    (0,_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_setRef)(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (true) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([\"A textarea element was provided to \".concat(componentName, \" where input was expected.\"), \"This is not a supported scenario but it may work under certain conditions.\", \"A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).\", \"Make sure to test keyboard navigation and add custom event handlers if necessary.\"].join('\\n'));\n        } else {\n          console.error([\"MUI: Unable to find the input element. It was resolved to \".concat(inputRef.current, \" while an HTMLInputElement was expected.\"), \"Instead, \".concat(componentName, \" expects an input element.\"), '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  var handleOpen = function handleOpen(event) {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  var handleClose = function handleClose(event, reason) {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  var handleValue = function handleValue(event, newValue, reason, details) {\n    if (multiple) {\n      if (value.length === newValue.length && value.every(function (val, i) {\n        return val === newValue[i];\n      })) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  var isTouch = react__WEBPACK_IMPORTED_MODULE_2__.useRef(false);\n  var selectNewValue = function selectNewValue(event, option) {\n    var reasonProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'selectOption';\n    var origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'options';\n    var reason = reasonProp;\n    var newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (true) {\n        var matches = newValue.filter(function (val) {\n          return isOptionEqualToValue(option, val);\n        });\n        if (matches.length > 1) {\n          console.error([\"MUI: The `isOptionEqualToValue` method of \".concat(componentName, \" does not handle the arguments correctly.\"), \"The component expects a single value to match a given option but found \".concat(matches.length, \" matches.\")].join('\\n'));\n        }\n      }\n      var itemIndex = findIndex(newValue, function (valueItem) {\n        return isOptionEqualToValue(option, valueItem);\n      });\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option: option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    var nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      var option = anchorEl.querySelector(\"[data-tag-index=\\\"\".concat(nextFocus, \"\\\"]\"));\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  var handleFocusTag = function handleFocusTag(event, direction) {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    var nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  var handleClear = function handleClear(event) {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  var handleKeyDown = function handleKeyDown(other) {\n    return function (event) {\n      if (other.onKeyDown) {\n        other.onKeyDown(event);\n      }\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n      if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n        setFocusedTag(-1);\n        focusTag(-1);\n      }\n\n      // Wait until IME is settled.\n      if (event.which !== 229) {\n        switch (event.key) {\n          case 'Home':\n            if (popupOpen && handleHomeEndKeys) {\n              // Prevent scroll of the page\n              event.preventDefault();\n              changeHighlightedIndex({\n                diff: 'start',\n                direction: 'next',\n                reason: 'keyboard',\n                event: event\n              });\n            }\n            break;\n          case 'End':\n            if (popupOpen && handleHomeEndKeys) {\n              // Prevent scroll of the page\n              event.preventDefault();\n              changeHighlightedIndex({\n                diff: 'end',\n                direction: 'previous',\n                reason: 'keyboard',\n                event: event\n              });\n            }\n            break;\n          case 'PageUp':\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: -pageSize,\n              direction: 'previous',\n              reason: 'keyboard',\n              event: event\n            });\n            handleOpen(event);\n            break;\n          case 'PageDown':\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: pageSize,\n              direction: 'next',\n              reason: 'keyboard',\n              event: event\n            });\n            handleOpen(event);\n            break;\n          case 'ArrowDown':\n            // Prevent cursor move\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 1,\n              direction: 'next',\n              reason: 'keyboard',\n              event: event\n            });\n            handleOpen(event);\n            break;\n          case 'ArrowUp':\n            // Prevent cursor move\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: -1,\n              direction: 'previous',\n              reason: 'keyboard',\n              event: event\n            });\n            handleOpen(event);\n            break;\n          case 'ArrowLeft':\n            handleFocusTag(event, 'previous');\n            break;\n          case 'ArrowRight':\n            handleFocusTag(event, 'next');\n            break;\n          case 'Enter':\n            if (highlightedIndexRef.current !== -1 && popupOpen) {\n              var option = filteredOptions[highlightedIndexRef.current];\n              var disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n              // Avoid early form validation, let the end-users continue filling the form.\n              event.preventDefault();\n              if (disabled) {\n                return;\n              }\n              selectNewValue(event, option, 'selectOption');\n\n              // Move the selection to the end.\n              if (autoComplete) {\n                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n              }\n            } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n              if (multiple) {\n                // Allow people to add new values before they submit the form.\n                event.preventDefault();\n              }\n              selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n            }\n            break;\n          case 'Escape':\n            if (popupOpen) {\n              // Avoid Opera to exit fullscreen mode.\n              event.preventDefault();\n              // Avoid the Modal to handle the event.\n              event.stopPropagation();\n              handleClose(event, 'escape');\n            } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n              // Avoid Opera to exit fullscreen mode.\n              event.preventDefault();\n              // Avoid the Modal to handle the event.\n              event.stopPropagation();\n              handleClear(event);\n            }\n            break;\n          case 'Backspace':\n            // Remove the value on the left of the \"cursor\"\n            if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n              var index = focusedTag === -1 ? value.length - 1 : focusedTag;\n              var newValue = value.slice();\n              newValue.splice(index, 1);\n              handleValue(event, newValue, 'removeOption', {\n                option: value[index]\n              });\n            }\n            break;\n          case 'Delete':\n            // Remove the value on the right of the \"cursor\"\n            if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n              var _index = focusedTag;\n              var _newValue = value.slice();\n              _newValue.splice(_index, 1);\n              handleValue(event, _newValue, 'removeOption', {\n                option: value[_index]\n              });\n            }\n            break;\n          default:\n        }\n      }\n    };\n  };\n  var handleFocus = function handleFocus(event) {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  var handleBlur = function handleBlur(event) {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  var handleInputChange = function handleInputChange(event) {\n    var newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  var handleOptionMouseMove = function handleOptionMouseMove(event) {\n    var index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event: event,\n        index: index,\n        reason: 'mouse'\n      });\n    }\n  };\n  var handleOptionTouchStart = function handleOptionTouchStart(event) {\n    setHighlightedIndex({\n      event: event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  var handleOptionClick = function handleOptionClick(event) {\n    var index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  var handleTagDelete = function handleTagDelete(index) {\n    return function (event) {\n      var newValue = value.slice();\n      newValue.splice(index, 1);\n      handleValue(event, newValue, 'removeOption', {\n        option: value[index]\n      });\n    };\n  };\n  var handlePopupIndicator = function handlePopupIndicator(event) {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  var handleMouseDown = function handleMouseDown(event) {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  var handleClick = function handleClick(event) {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  var handleInputMouseDown = function handleInputMouseDown(event) {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  var dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  var groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    var indexBy = new Map();\n    var warn = false;\n    groupedOptions = filteredOptions.reduce(function (acc, option, index) {\n      var group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (true) {\n          if (indexBy.get(group) && !warn) {\n            console.warn(\"MUI: The options provided combined with the `groupBy` method of \".concat(componentName, \" returns duplicated headers.\"), 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index: index,\n          group: group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: function getRootProps() {\n      var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        'aria-owns': listboxAvailable ? \"\".concat(id, \"-listbox\") : null\n      }, other, {\n        onKeyDown: handleKeyDown(other),\n        onMouseDown: handleMouseDown,\n        onClick: handleClick\n      });\n    },\n    getInputLabelProps: function getInputLabelProps() {\n      return {\n        id: \"\".concat(id, \"-label\"),\n        htmlFor: id\n      };\n    },\n    getInputProps: function getInputProps() {\n      return {\n        id: id,\n        value: inputValue,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        onChange: handleInputChange,\n        onMouseDown: handleInputMouseDown,\n        // if open then this is handled imperatively so don't let react override\n        // only have an opinion about this when closed\n        'aria-activedescendant': popupOpen ? '' : null,\n        'aria-autocomplete': autoComplete ? 'both' : 'list',\n        'aria-controls': listboxAvailable ? \"\".concat(id, \"-listbox\") : undefined,\n        'aria-expanded': listboxAvailable,\n        // Disable browser's suggestion that might overlap with the popup.\n        // Handle autocomplete but not autofill.\n        autoComplete: 'off',\n        ref: inputRef,\n        autoCapitalize: 'none',\n        spellCheck: 'false',\n        role: 'combobox',\n        disabled: disabledProp\n      };\n    },\n    getClearProps: function getClearProps() {\n      return {\n        tabIndex: -1,\n        type: 'button',\n        onClick: handleClear\n      };\n    },\n    getPopupIndicatorProps: function getPopupIndicatorProps() {\n      return {\n        tabIndex: -1,\n        type: 'button',\n        onClick: handlePopupIndicator\n      };\n    },\n    getTagProps: function getTagProps(_ref4) {\n      var index = _ref4.index;\n      return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        key: index,\n        'data-tag-index': index,\n        tabIndex: -1\n      }, !readOnly && {\n        onDelete: handleTagDelete(index)\n      });\n    },\n    getListboxProps: function getListboxProps() {\n      return {\n        role: 'listbox',\n        id: \"\".concat(id, \"-listbox\"),\n        'aria-labelledby': \"\".concat(id, \"-label\"),\n        ref: handleListboxRef,\n        onMouseDown: function onMouseDown(event) {\n          // Prevent blur\n          event.preventDefault();\n        }\n      };\n    },\n    getOptionProps: function getOptionProps(_ref5) {\n      var index = _ref5.index,\n        option = _ref5.option;\n      var _getOptionKey;\n      var selected = (multiple ? value : [value]).some(function (value2) {\n        return value2 != null && isOptionEqualToValue(option, value2);\n      });\n      var disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: \"\".concat(id, \"-option-\").concat(index),\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id: id,\n    inputValue: inputValue,\n    value: value,\n    dirty: dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen: popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl: anchorEl,\n    setAnchorEl: setAnchorEl,\n    focusedTag: focusedTag,\n    groupedOptions: groupedOptions\n  };\n}\n_s(useAutocomplete, \"Sm/rcLJh5pctjrzCPmIrdQSpl0Y=\", false, function () {\n  return [_mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useId, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useControlled, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useControlled, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useControlled, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.usePreviousProps, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback, _mui_utils__WEBPACK_IMPORTED_MODULE_3__.unstable_useEventCallback];\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (useAutocomplete);\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@mui/material/useAutocomplete/useAutocomplete.js\n"));

/***/ })

}]);