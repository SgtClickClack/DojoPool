@use 'variables' as *;

// Media queries
@mixin breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}. Available breakpoints are: #{map-keys($breakpoints)}";
  }
}

// Typography
@mixin font-size($size) {
  @if map-has-key($font-sizes, $size) {
    font-size: map-get($font-sizes, $size);
  } @else {
    @warn "Invalid font size: #{$size}. Available sizes are: #{map-keys($font-sizes)}";
  }
}

@mixin font-weight($weight) {
  @if map-has-key($font-weight, $weight) {
    font-weight: map-get($font-weight, $weight);
  } @else {
    @warn "Invalid font weight: #{$weight}. Available weights are: #{map-keys($font-weight)}";
  }
}

// Colors
@function color($color, $shade: 500) {
  @if map-has-key($colors, $color) {
    $color-map: map-get($colors, $color);
    @if map-has-key($color-map, $shade) {
      @return map-get($color-map, $shade);
    } @else {
      @warn "Invalid shade: #{$shade} for color #{$color}. Available shades are: #{map-keys($color-map)}";
      @return null;
    }
  } @else {
    @warn "Invalid color: #{$color}. Available colors are: #{map-keys($colors)}";
    @return null;
  }
}

// Spacing
@function spacing($size) {
  @if map-has-key($spacing, $size) {
    @return map-get($spacing, $size);
  } @else {
    @warn "Invalid spacing size: #{$size}. Available sizes are: #{map-keys($spacing)}";
    @return null;
  }
}

// Flexbox
@mixin flex(
  $direction: row,
  $justify: flex-start,
  $align: stretch,
  $wrap: nowrap
) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin flex-center {
  @include flex(row, center, center);
}

// Grid
@mixin grid($columns: 1, $gap: spacing(4)) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Positioning
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin fixed-center {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Truncate text
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Transitions
@mixin transition($properties...) {
  $transitions: ();
  @each $property in $properties {
    $transitions: append(
      $transitions,
      $property
        map-get($transition-duration, base)
        map-get($transition-timing, ease-in-out),
      comma
    );
  }
  transition: $transitions;
}

// Shadows
@mixin shadow($size: base) {
  @if map-has-key($shadows, $size) {
    box-shadow: map-get($shadows, $size);
  } @else {
    @warn "Invalid shadow size: #{$size}. Available sizes are: #{map-keys($shadows)}";
  }
}

// Border radius
@mixin rounded($size: base) {
  @if map-has-key($border-radius, $size) {
    border-radius: map-get($border-radius, $size);
  } @else {
    @warn "Invalid border radius size: #{$size}. Available sizes are: #{map-keys($border-radius)}";
  }
}

// Focus ring
@mixin focus-ring($color: primary, $offset: 2px) {
  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 $offset color($color, 500);
  }
}

// Hide visually but keep accessible
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Container
@mixin container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: spacing(4);
  padding-left: spacing(4);

  @each $breakpoint, $width in $container-max-widths {
    @include breakpoint($breakpoint) {
      max-width: $width;
    }
  }
}

// Scrollbar styling
@mixin custom-scrollbar(
  $width: 8px,
  $track-color: color(neutral, 100),
  $thumb-color: color(neutral, 400)
) {
  &::-webkit-scrollbar {
    width: $width;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
    @include rounded(full);
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    @include rounded(full);

    &:hover {
      background: color(neutral, 500);
    }
  }
}

// Aspect ratio
@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;

  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Button base styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: spacing(2) spacing(4);
  border: none;
  @include rounded;
  @include font-weight(medium);
  @include transition(background-color, transform, box-shadow);
  cursor: pointer;

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  &:active:not(:disabled) {
    transform: translateY(1px);
  }
}
