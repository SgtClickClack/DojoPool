import asyncio
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple, Union

from .constants import ErrorCodes, EventTypes
from .log_config import logger
from .utils import format_error_response

class RateLimiter:
    def __init__(self) -> None: ...
    def check_rate_limit(
        self, user_id: str, event_type: str
    ) -> Tuple[bool, Optional[Dict[str, Any]]]: ...
    def record_event(self, user_id: str, event_type: str) -> None: ...
    def get_user_limits(
        self, user_id: str, event_type: Optional[str] = None
    ) -> Dict[str, Any]: ...
    def get_room_limits(
        self, room_id: str, event_type: Optional[str] = None
    ) -> Dict[str, Any]: ...
    def get_global_limits(self, event_type: Optional[str] = None) -> Dict[str, Any]: ...
    def set_user_limit(
        self, user_id: str, event_type: str, max_events: int, time_window: timedelta
    ) -> None: ...
    def set_room_limit(
        self, room_id: str, event_type: str, max_events: int, time_window: timedelta
    ) -> None: ...
    def set_global_limit(
        self, event_type: str, max_events: int, time_window: timedelta
    ) -> None: ...
    def clear_user_limits(self, user_id: str) -> None: ...
    def clear_room_limits(self, room_id: str) -> None: ...
    def clear_all_limits(self) -> None: ...
    def get_rate_limit_stats(self) -> Dict[str, Any]: ...
