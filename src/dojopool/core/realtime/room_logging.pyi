import json
import logging
from datetime import datetime
from logging.handlers import RotatingFileHandler
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from .query_builder import LogQueryBuilder

class RoomLogger:
    def __init__(self, room_id: str, log_dir: Optional[Path] = None) -> None: ...
    def setup_logger(self) -> None: ...
    def log_event(
        self, event_type: str, data: Dict[str, Any], level: int = logging.INFO
    ) -> None: ...
    def log_error(self, error: Exception, event_type: Optional[str] = None) -> None: ...
    def log_user_join(
        self, user_id: str, metadata: Optional[Dict[str, Any]] = None
    ) -> None: ...
    def log_user_leave(self, user_id: str, reason: Optional[str] = None) -> None: ...
    def log_message(
        self, user_id: str, message: str, metadata: Optional[Dict[str, Any]] = None
    ) -> None: ...
    def log_state_change(
        self, old_state: Dict[str, Any], new_state: Dict[str, Any]
    ) -> None: ...
    def get_logs(
        self, query_builder: Optional[LogQueryBuilder] = None
    ) -> List[Dict[str, Any]]: ...
    def get_event_logs(
        self,
        event_type: str,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
    ) -> List[Dict[str, Any]]: ...
    def get_user_logs(self, user_id: str) -> List[Dict[str, Any]]: ...
    def export_logs(self, file_path: Path) -> None: ...
    def clear_logs(self) -> None: ...
