"""
Configuration for the automated vulnerability scanning system.
"""

import os
from pathlib import Path

# Base paths
SECURITY_ROOT = Path("/var/dojopool/security")
SCAN_RESULTS_DIR = SECURITY_ROOT / "scan_results"
SCAN_CONFIGS_DIR = SECURITY_ROOT / "scan_configs"

# Scanner configurations
SCANNER_CONFIG = {
    "scan_frequency": int(os.getenv("VULN_SCAN_FREQUENCY_HOURS", "24")),
    "parallel_scans": int(os.getenv("VULN_PARALLEL_SCANS", "3")),
    "timeout_minutes": int(os.getenv("VULN_SCAN_TIMEOUT_MINUTES", "120")),
    "retries": int(os.getenv("VULN_SCAN_RETRIES", "3")),
}

# Scan targets configuration
SCAN_TARGETS = {
    "api_endpoints": {
        "base_url": os.getenv("API_BASE_URL", "http://localhost:8000"),
        "auth_token": os.getenv("SCAN_AUTH_TOKEN"),
        "excluded_paths": ["/health", "/metrics"],
        "scan_frequency_hours": 12,
    },
    "web_interface": {
        "base_url": os.getenv("WEB_BASE_URL", "http://localhost:3000"),
        "auth_token": os.getenv("SCAN_AUTH_TOKEN"),
        "excluded_paths": ["/static"],
        "scan_frequency_hours": 24,
    },
    "infrastructure": {
        "hosts": os.getenv("INFRA_HOSTS", "localhost").split(","),
        "ports": os.getenv("INFRA_PORTS", "80,443,8000-8010").split(","),
        "scan_frequency_hours": 48,
    },
}

# Vulnerability assessment configuration
VULNERABILITY_SEVERITY = {
    "critical": 5,
    "high": 4,
    "medium": 3,
    "low": 2,
    "info": 1,
}

# Scanner modules configuration
ENABLED_SCANNERS = {
    "dependency_check": True,
    "ssl_tls_check": True,
    "port_scanner": True,
    "web_vulnerability_scanner": True,
    "api_security_scanner": True,
    "docker_security_scanner": True,
    "infrastructure_scanner": True,
}

# Dependency scanning configuration
DEPENDENCY_SCAN_CONFIG = {
    "package_managers": ["pip", "npm", "yarn"],
    "scan_dev_dependencies": False,
    "update_check": True,
    "vulnerability_db_update_frequency_hours": 24,
}

# Web vulnerability scanning configuration
WEB_SCAN_CONFIG = {
    "crawl_depth": int(os.getenv("WEB_CRAWL_DEPTH", "3")),
    "request_timeout": 10,
    "max_requests_per_second": 10,
    "respect_robots_txt": True,
    "check_types": [
        "xss",
        "sql_injection",
        "csrf",
        "ssrf",
        "file_inclusion",
        "command_injection",
    ],
}

# API security scanning configuration
API_SCAN_CONFIG = {
    "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"],
    "auth_types": ["bearer", "basic", "api_key"],
    "check_types": [
        "input_validation",
        "authentication",
        "authorization",
        "rate_limiting",
        "data_exposure",
    ],
}

# Infrastructure scanning configuration
INFRASTRUCTURE_SCAN_CONFIG = {
    "port_scan_type": "syn",
    "service_detection": True,
    "os_detection": True,
    "script_scan": True,
    "aggressive_scan": False,
}

# Notification configuration
NOTIFICATION_CONFIG = {
    "email": {
        "enabled": True,
        "recipients": os.getenv("VULN_SCAN_EMAIL_RECIPIENTS", "").split(","),
        "severity_threshold": "high",
    },
    "slack": {
        "enabled": True,
        "webhook_url": os.getenv("VULN_SCAN_SLACK_WEBHOOK"),
        "severity_threshold": "medium",
    },
    "jira": {
        "enabled": bool(os.getenv("VULN_SCAN_JIRA_ENABLED", False)),
        "project_key": os.getenv("VULN_SCAN_JIRA_PROJECT"),
        "issue_type": "Security",
        "severity_threshold": "medium",
    },
}

# Reporting configuration
REPORT_CONFIG = {
    "formats": ["json", "html", "pdf"],
    "retention_days": 90,
    "include_evidence": True,
    "include_remediation": True,
    "risk_scoring_enabled": True,
}

# Remediation configuration
REMEDIATION_CONFIG = {
    "auto_create_tickets": True,
    "auto_assign": True,
    "priority_mapping": {
        "critical": "P0",
        "high": "P1",
        "medium": "P2",
        "low": "P3",
        "info": "P4",
    },
    "sla_days": {
        "critical": 1,
        "high": 7,
        "medium": 30,
        "low": 90,
        "info": 180,
    },
}

# Compliance checking configuration
COMPLIANCE_CONFIG = {
    "standards": ["OWASP", "CWE", "CVE"],
    "custom_policies": SCAN_CONFIGS_DIR / "custom_policies.yaml",
    "compliance_mapping": SCAN_CONFIGS_DIR / "compliance_mapping.yaml",
}


def setup_directories() -> None:
    """Create required directories for vulnerability scanning."""
    for path in [
        SCAN_RESULTS_DIR,
        SCAN_CONFIGS_DIR,
    ]:
        path.mkdir(parents=True, exist_ok=True)


# Initialize directories
setup_directories()
