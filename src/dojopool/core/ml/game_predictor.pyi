import time
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple, Union

import numpy as np
from sklearn.ensemble import GradientBoostingRegressor, RandomForestClassifier
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

from .ab_testing import ABTest, ModelVariant
from .model_monitor import ModelMonitor
from .model_versioning import ModelVersion

class GamePredictor:
    def __init__(self, model_type: str = "shot") -> None: ...
    def train(self, X: np.ndarray, y: np.ndarray, **kwargs: Any) -> None: ...
    def predict(self, X: np.ndarray) -> np.ndarray: ...
    def evaluate(self, X: np.ndarray, y: np.ndarray) -> Dict[str, float]: ...
    def save_model(self, path: str) -> None: ...
    def load_model(self, path: str) -> None: ...
    def update_model(self, X: np.ndarray, y: np.ndarray) -> None: ...
    def get_feature_importance(self) -> Dict[str, float]: ...
    def get_model_metrics(self) -> Dict[str, Any]: ...
    def get_prediction_confidence(self, X: np.ndarray) -> np.ndarray: ...
    def get_model_version(self) -> ModelVersion: ...
    def set_model_version(self, version: ModelVersion) -> None: ...
    def get_ab_test_results(self) -> Dict[str, Any]: ...
    def start_ab_test(
        self, variant_a: ModelVariant, variant_b: ModelVariant
    ) -> None: ...
    def end_ab_test(self) -> Dict[str, Any]: ...
