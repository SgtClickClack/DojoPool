import { Counter, Gauge, Histogram } from 'prom-client';
import { type VenueAnalyticsData } from '../types';

export class VenueMonitoringService {
  private static instance: VenueMonitoringService;
  private metrics: {
    revenueCounter: Counter;
    gamesCounter: Counter;
    occupancyGauge: Gauge;
    maintenanceCounter: Counter;
    tableUtilizationHistogram: Histogram;
    apiResponseTime: Histogram;
  };

  private constructor() {
    this.metrics = {
      revenueCounter: new Counter({
        name: 'venue_revenue_total',
        help: 'Total revenue generated by venue',
        labelNames: ['venue_id'],
      }),
      gamesCounter: new Counter({
        name: 'venue_games_total',
        help: 'Total number of games played at venue',
        labelNames: ['venue_id'],
      }),
      occupancyGauge: new Gauge({
        name: 'venue_occupancy_percentage',
        help: 'Current occupancy percentage of venue',
        labelNames: ['venue_id'],
      }),
      maintenanceCounter: new Counter({
        name: 'venue_maintenance_events_total',
        help: 'Total number of maintenance events at venue',
        labelNames: ['venue_id', 'reason'],
      }),
      tableUtilizationHistogram: new Histogram({
        name: 'venue_table_utilization',
        help: 'Distribution of table utilization rates',
        labelNames: ['venue_id'],
        buckets: [0, 25, 50, 75, 90, 100],
      }),
      apiResponseTime: new Histogram({
        name: 'venue_analytics_api_response_time',
        help: 'Response time of venue analytics API endpoints',
        labelNames: ['endpoint'],
        buckets: [0.1, 0.5, 1, 2, 5],
      }),
    };
  }

  public static getInstance(): VenueMonitoringService {
    if (!VenueMonitoringService.instance) {
      VenueMonitoringService.instance = new VenueMonitoringService();
    }
    return VenueMonitoringService.instance;
  }

  public recordAnalytics(venueId: string, data: VenueAnalyticsData): void {
    // Record revenue metrics
    this.metrics.revenueCounter.inc({ venue_id: venueId }, data.totalRevenue);

    // Record games metrics
    this.metrics.gamesCounter.inc({ venue_id: venueId }, data.totalGames);

    // Record occupancy metrics
    this.metrics.occupancyGauge.set(
      { venue_id: venueId },
      data.averageOccupancy
    );

    // Record maintenance metrics
    Object.entries(data.maintenanceStats.maintenanceByReason).forEach(
      ([reason, count]) => {
        this.metrics.maintenanceCounter.inc(
          { venue_id: venueId, reason },
          count
        );
      }
    );

    // Record table utilization metrics
    data.tableUtilization.forEach((table) => {
      this.metrics.tableUtilizationHistogram.observe(
        { venue_id: venueId },
        table.utilization
      );
    });
  }

  public recordApiResponseTime(endpoint: string, duration: number): void {
    this.metrics.apiResponseTime.observe({ endpoint }, duration);
  }

  public getMetrics(): string {
    return Object.values(this.metrics)
      .map((metric) => metric.collect())
      .join('\n');
  }

  public async checkAlertConditions(
    venueId: string,
    data: VenueAnalyticsData
  ): Promise<Alert[]> {
    const alerts: Alert[] = [];

    // Check occupancy alerts
    if (data.averageOccupancy > 90) {
      alerts.push({
        type: 'high_occupancy',
        severity: 'warning',
        message: `High occupancy detected: ${data.averageOccupancy}%`,
        venueId,
        timestamp: new Date(),
      });
    }

    // Check maintenance alerts
    if (data.maintenanceStats.totalMaintenance > 5) {
      alerts.push({
        type: 'high_maintenance',
        severity: 'warning',
        message: `High number of maintenance events: ${data.maintenanceStats.totalMaintenance}`,
        venueId,
        timestamp: new Date(),
      });
    }

    // Check table utilization alerts
    const lowUtilizationTables = data.tableUtilization.filter(
      (table) => table.utilization < 20
    );
    if (lowUtilizationTables.length > 0) {
      alerts.push({
        type: 'low_table_utilization',
        severity: 'info',
        message: `${lowUtilizationTables.length} tables have low utilization (<20%)`,
        venueId,
        timestamp: new Date(),
      });
    }

    return alerts;
  }
}

interface Alert {
  type: string;
  severity: 'info' | 'warning' | 'error';
  message: string;
  venueId: string;
  timestamp: Date;
}
