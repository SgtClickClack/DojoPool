version: '3.8'

services:
  db:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dojopool
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dojopool"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    image: dojopool-api:latest
    ports:
      - '3002:3002'
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/dojopool
      - PORT=3002
      - NODE_ENV=production
      - JWT_SECRET=change_this_in_prod
      - CORS_ORIGINS=http://localhost:3000
      - FRONTEND_URL=http://localhost:3000
      - REDIS_URL=redis://redis:6379
      - GOOGLE_OAUTH_CLIENT_ID=dummy_client_id
      - GOOGLE_OAUTH_CLIENT_SECRET=dummy_client_secret
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  web:
    image: dojopool-web:latest
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3002/api/v1
      - NEXT_PUBLIC_WEBSOCKET_URL=http://localhost:3002
      - NODE_ENV=production
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
