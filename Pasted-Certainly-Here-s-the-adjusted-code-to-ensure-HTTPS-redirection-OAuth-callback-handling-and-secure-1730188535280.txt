Certainly! Here’s the adjusted code to ensure HTTPS redirection, OAuth callback handling, and secure logging. This includes modifications to handle each scenario as outlined:

```python
from flask import request, redirect, url_for, current_app
import logging

logger = logging.getLogger(__name__)

# Before request function to enforce HTTPS and handle OAuth callbacks
def before_request():
    # Check if the request is secure (HTTPS) or if it's an OAuth callback
    if not request.is_secure:
        # Skip HTTPS redirect for OAuth callbacks and specific paths
        if request.path.startswith('/auth/') or 'callback' in request.path:
            return  # Skip HTTPS redirection for OAuth flow
        
        # Redirect HTTP requests to HTTPS
        if request.url.startswith('http://'):
            secure_url = request.url.replace('http://', 'https://', 1)
            return redirect(secure_url, code=301)  # Permanent redirect to HTTPS

# Error handling and client ID logging
try:
    if not GOOGLE_CLIENT_ID or not GOOGLE_CLIENT_SECRET:
        raise ValueError("Invalid OAuth client secret configuration")
    # Log a masked client ID to confirm configuration (first 8 chars)
    logger.info(f"Using Google OAuth client ID: {GOOGLE_CLIENT_ID[:8]}...")
except ValueError as e:
    logger.error(f"OAuth configuration error: {str(e)}")

# OAuth callback URL generation
def generate_callback_url():
    # Get the exact domain from the request
    domain = request.headers.get('Host')
    # Generate the callback URL dynamically
    callback_url = url_for('google_auth.callback', _external=True, _scheme='https')
    logger.info(f"Login initiated with callback URL: {callback_url}")
    return callback_url

# OAuth token endpoint and domain handling for logging or other use
def get_token_endpoint():
    # Ensure google_provider_cfg is loaded with configuration from Google
    token_endpoint = google_provider_cfg.get("token_endpoint")
    if token_endpoint:
        domain = request.headers.get('Host')
        logger.info(f"Using token endpoint: {token_endpoint} for domain: {domain}")
    return token_endpoint
```

### Explanation of Key Components

1. **HTTPS Redirection in `before_request`**:
   - Redirects HTTP requests to HTTPS unless they’re part of the OAuth flow (such as `/auth/` paths).
   - This uses `return redirect(secure_url, code=301)` to enforce HTTPS redirection consistently.

2. **Masked Client ID Logging**:
   - Checks for `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` to verify they’re configured. Logs the first 8 characters of the client ID for validation without exposing sensitive information.

3. **Callback URL Generation**:
   - Uses `url_for` with `_external=True` and `_scheme='https'` to ensure the callback URL is generated with HTTPS, making it consistent and secure.

4. **Token Endpoint Logging**:
   - Fetches the token endpoint from `google_provider_cfg` and logs it along with the domain to ensure configuration is correct.

### How to Use This Code

- **Integrate the `before_request` Function**: Add it to your app’s before-request lifecycle in Flask:
  ```python
  app.before_request(before_request)
  ```
- **Generate Callback URL and Token Endpoint**: Call `generate_callback_url()` and `get_token_endpoint()` within your OAuth flow where you need them.

This should address the HTTPS and OAuth issues you’ve been encountering! Let me know if there are any other specific features you’d like to include in this configuration.