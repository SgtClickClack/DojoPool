version: '3.8'

services:
  # PostgreSQL Database (Production-like)
  postgres:
    image: postgres:15-alpine
    container_name: dojopool-staging-postgres
    environment:
      POSTGRES_DB: dojopool_staging
      POSTGRES_USER: dojo_staging_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init-staging.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5433:5432' # Different port for staging
    networks:
      - dojopool-staging-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dojo_staging_user -d dojopool_staging']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache (Production-like)
  redis:
    image: redis:7-alpine
    container_name: dojopool-staging-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - '6380:6379' # Different port for staging
    volumes:
      - redis_staging_data:/data
    networks:
      - dojopool-staging-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # API Service (Production-like)
  api:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.api
    container_name: dojopool-staging-api
    environment:
      NODE_ENV: staging
      PORT: 3001
      DATABASE_URL: postgresql://dojo_staging_user:${POSTGRES_PASSWORD}@postgres:5432/dojopool_staging
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      WS_CORS_ORIGIN: ${FRONTEND_URL}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      MAPBOX_TOKEN: ${MAPBOX_TOKEN}
      # Staging-specific settings
      LOG_LEVEL: info
      METRICS_ENABLED: true
      HEALTH_CHECK_INTERVAL: 30000
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dojopool-staging-network
    volumes:
      - ../../services/api:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Web Service (Production-like)
  web:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.web
    container_name: dojopool-staging-web
    environment:
      NODE_ENV: staging
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      NEXT_PUBLIC_MAPBOX_TOKEN: ${MAPBOX_TOKEN}
      NEXT_PUBLIC_ENVIRONMENT: staging
      # Analytics and monitoring
      NEXT_PUBLIC_ANALYTICS_ID: ${ANALYTICS_ID}
      NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - '3000:3000'
    depends_on:
      - api
    networks:
      - dojopool-staging-network
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy (Production-like)
  nginx:
    image: nginx:alpine
    container_name: dojopool-staging-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - web
    networks:
      - dojopool-staging-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus (Production Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: dojopool-staging-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    networks:
      - dojopool-staging-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana (Production Monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: dojopool-staging-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN}
      GF_SERVER_ROOT_URL: https://${GRAFANA_DOMAIN}
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    ports:
      - '3002:3000'
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - dojopool-staging-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # AlertManager (Production Alerting)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: dojopool-staging-alertmanager
    ports:
      - '9093:9093'
    volumes:
      - ./monitoring/alertmanager-staging.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_staging_data:/alertmanager
    networks:
      - dojopool-staging-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: dojopool-staging-node-exporter
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - dojopool-staging-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # cAdvisor (Container Metrics)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: dojopool-staging-cadvisor
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - dojopool-staging-network
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: dojopool-staging-postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://dojo_staging_user:${POSTGRES_PASSWORD}@postgres:5432/dojopool_staging?sslmode=disable
    ports:
      - '9187:9187'
    networks:
      - dojopool-staging-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: dojopool-staging-redis-exporter
    environment:
      REDIS_ADDR: redis://redis:6379
    ports:
      - '9121:9121'
    networks:
      - dojopool-staging-network
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_staging_data:
  redis_staging_data:
  grafana_staging_data:
  prometheus_staging_data:
  alertmanager_staging_data:

networks:
  dojopool-staging-network:
    driver: bridge
