version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dojopool-staging-postgres
    environment:
      POSTGRES_DB: dojopool_staging
      POSTGRES_USER: dojo_staging_user
      POSTGRES_PASSWORD: staging_password_123
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - dojopool-staging-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dojo_staging_user -d dojopool_staging']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dojopool-staging-redis
    ports:
      - '6380:6379'
    volumes:
      - redis_staging_data:/data
    networks:
      - dojopool-staging-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # API Service
  api:
    build:
      context: ../../
      dockerfile: services/api/Dockerfile
    container_name: dojopool-staging-api
    environment:
      NODE_ENV: staging
      PORT: 3001
      DATABASE_URL: postgresql://dojo_staging_user:staging_password_123@postgres:5432/dojopool_staging
      REDIS_URL: redis://redis:6379
      JWT_SECRET: staging_jwt_secret_key
      FRONTEND_URL: http://localhost:3000
      WS_CORS_ORIGIN: http://localhost:3000
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dojopool-staging-network
    volumes:
      - ../../services/api:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web Service
  web:
    build:
      context: ../../
      dockerfile: apps/web/Dockerfile
    container_name: dojopool-staging-web
    environment:
      NODE_ENV: staging
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_ENVIRONMENT: staging
    ports:
      - '3000:3000'
    depends_on:
      - api
    networks:
      - dojopool-staging-network
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_staging_data:
  redis_staging_data:

networks:
  dojopool-staging-network:
    driver: bridge
