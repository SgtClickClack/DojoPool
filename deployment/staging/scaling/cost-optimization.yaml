apiVersion: v1
kind: ConfigMap
metadata:
  name: dojopool-cost-optimization-config
  namespace: staging
data:
  cost-optimization-rules.yaml: |
    # Cost optimization rules for DojoPool staging
    rules:
      # Scale down during off-peak hours
      off_peak_scaling:
        enabled: true
        timezone: UTC
        off_peak_hours:
          start: "02:00"
          end: "06:00"
        min_replicas:
          api: 2
          web: 1
          tournament: 1
          analytics: 1

      # Scale based on business metrics, not just technical
      business_aware_scaling:
        enabled: true
        scale_up_triggers:
          - metric: active_users
            threshold: 1000
            scale_factor: 1.5
          - metric: tournament_participants
            threshold: 500
            scale_factor: 2.0
          - metric: concurrent_games
            threshold: 200
            scale_factor: 1.8

      # Intelligent resource allocation
      resource_allocation:
        # Allocate more resources during peak gaming hours
        peak_hours_boost:
          enabled: true
          hours: ["19:00", "20:00", "21:00", "22:00"]
          cpu_boost: 1.3
          memory_boost: 1.2

        # Reduce resources for background services during low activity
        background_service_optimization:
          enabled: true
          services: ["analytics", "notification"]
          low_activity_cpu_reduction: 0.7
          low_activity_memory_reduction: 0.8

    # Cost monitoring thresholds
    monitoring:
      daily_budget_limit: 500
      hourly_spike_limit: 50
      cost_anomaly_threshold: 1.5  # Multiplier for normal usage

    # Auto-scaling policies
    autoscaling:
      cooldown_period: 300  # 5 minutes between scaling actions
      stabilization_window: 600  # 10 minutes to stabilize metrics
      predictive_scaling:
        enabled: true
        lookback_period: 168  # 7 days
        forecast_horizon: 24   # 24 hours
        confidence_threshold: 0.8
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dojopool-cost-optimizer
  namespace: staging
  labels:
    app: dojopool-cost-optimizer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dojopool-cost-optimizer
  template:
    metadata:
      labels:
        app: dojopool-cost-optimizer
    spec:
      serviceAccountName: dojopool-cost-optimizer-sa
      containers:
        - name: cost-optimizer
          image: dojopool/cost-optimizer:latest
          env:
            - name: KUBERNETES_NAMESPACE
              value: 'staging'
            - name: PROMETHEUS_URL
              value: 'http://prometheus-service:9090'
            - name: OPTIMIZATION_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: dojopool-cost-optimization-config
                  key: cost-optimization-rules.yaml
            - name: AWS_REGION
              value: 'us-east-1'
          volumeMounts:
            - name: config-volume
              mountPath: /etc/cost-optimizer
          resources:
            requests:
              memory: '128Mi'
              cpu: '50m'
            limits:
              memory: '256Mi'
              cpu: '100m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: config-volume
          configMap:
            name: dojopool-cost-optimization-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dojopool-cost-optimizer-sa
  namespace: staging
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dojopool-cost-optimizer-role
rules:
  - apiGroups: ['apps']
    resources: ['deployments', 'statefulsets']
    verbs: ['get', 'list', 'watch', 'patch', 'update']
  - apiGroups: ['autoscaling']
    resources: ['horizontalpodautoscalers']
    verbs: ['get', 'list', 'watch', 'patch', 'update']
  - apiGroups: ['']
    resources: ['pods', 'nodes']
    verbs: ['get', 'list', 'watch']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dojopool-cost-optimizer-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dojopool-cost-optimizer-role
subjects:
  - kind: ServiceAccount
    name: dojopool-cost-optimizer-sa
    namespace: staging
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dojopool-cost-optimization-job
  namespace: staging
spec:
  schedule: '0 */6 * * *' # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: dojopool-cost-optimizer-sa
          containers:
            - name: cost-analysis
              image: dojopool/cost-analyzer:latest
              env:
                - name: ANALYSIS_PERIOD_HOURS
                  value: '24'
                - name: COST_THRESHOLD_MULTIPLIER
                  value: '1.2'
                - name: AWS_REGION
                  value: 'us-east-1'
              command:
                - /bin/sh
                - -c
                - |
                  echo "Running cost analysis..."
                  # Analyze costs and generate optimization recommendations
                  # This would integrate with cloud provider cost APIs
                  echo "Cost analysis complete"
          restartPolicy: OnFailure
