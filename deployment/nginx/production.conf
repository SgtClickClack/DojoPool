upstream dojopool_app {
    server 127.0.0.1:8000;
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=websocket_limit:10m rate=60r/m;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# SSL configuration
ssl_session_cache shared:SSL:20m;
ssl_session_timeout 10m;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name dojopool.com.au;

    # SSL certificate paths
    ssl_certificate /etc/ssl/certs/dojopool.crt;
    ssl_certificate_key /etc/ssl/private/dojopool.key;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=()" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss:; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
    add_header Cross-Origin-Embedder-Policy require-corp;
    add_header Cross-Origin-Opener-Policy same-origin;
    add_header Cross-Origin-Resource-Policy same-origin;

    # Client body size and timeouts
    client_max_body_size 10M;
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    gzip_disable "MSIE [1-6]\.";

    # Root directory and index
    root /var/www/dojopool;
    index index.html;

    # Static files with enhanced caching
    location /static/ {
        expires 30d;
        add_header Cache-Control "public, no-transform, immutable";
        add_header X-Content-Type-Options "nosniff";
        access_log off;
        
        # Specific file type handling
        location ~* \.(?:css|js)$ {
            expires 7d;
            add_header Cache-Control "public, no-transform";
        }
        
        location ~* \.(?:jpg|jpeg|gif|png|ico|svg|webp)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            try_files $uri @webp;
        }
    }

    # WebP image fallback
    location @webp {
        add_header Vary Accept;
        expires 30d;
        add_header Cache-Control "public, no-transform";
        
        if ($http_accept !~* "webp") {
            rewrite (.*) $1.jpg break;
        }
        rewrite (.*) $1.webp break;
    }

    # Media files
    location /media/ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
        add_header X-Content-Type-Options "nosniff";
        access_log off;
        
        # Limit media file types
        location ~* \.(?:jpg|jpeg|gif|png|ico|svg|webp|mp4|webm)$ {
            expires 30d;
        }
    }

    # API endpoints with improved rate limiting
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;
        
        proxy_pass http://dojopool_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # Error handling
        proxy_intercept_errors on;
        error_page 500 502 503 504 /50x.html;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Response headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }

    # Authentication endpoints with strict rate limiting
    location /api/auth/ {
        limit_req zone=auth_limit burst=5 nodelay;
        limit_conn conn_limit 5;
        
        proxy_pass http://dojopool_app;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Shorter timeouts for auth
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # WebSocket endpoints with dedicated rate limiting
    location /ws/ {
        limit_req zone=websocket_limit burst=10 nodelay;
        limit_conn conn_limit 5;
        
        proxy_pass http://dojopool_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # WebSocket specific headers
        proxy_set_header Sec-WebSocket-Protocol $http_sec_websocket_protocol;
        proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
        proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
        proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;

        # WebSocket timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        
        # WebSocket specific settings
        proxy_buffering off;
        proxy_cache off;
        proxy_redirect off;
    }

    # Health check endpoint with monitoring
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        add_header X-Content-Type-Options "nosniff" always;
        return 200 'OK';
    }

    # Monitoring metrics endpoint
    location /metrics {
        allow 127.0.0.1;
        deny all;
        proxy_pass http://localhost:9113/metrics;
    }

    # Frontend routing with improved caching
    location / {
        try_files $uri $uri/ /index.html;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # SPA routing
        if (!-e $request_filename) {
            rewrite ^(.*)$ /index.html break;
        }
    }

    # Error pages with custom handling
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        root /usr/share/nginx/html;
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
    }
    
    location = /50x.html {
        internal;
        root /usr/share/nginx/html;
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# Redirect HTTP to HTTPS with HSTS preload
server {
    listen 80;
    listen [::]:80;
    server_name dojopool.com.au;
    
    # Security headers for redirect
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    location / {
        return 301 https://$server_name$request_uri;
    }
} 