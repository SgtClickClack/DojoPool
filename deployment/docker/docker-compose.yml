version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dojopool-postgres
    environment:
      POSTGRES_DB: dojopool
      POSTGRES_USER: dojo_user
      POSTGRES_PASSWORD: dojo_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - dojopool-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dojo_user -d dojopool']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dojopool-redis
    ports:
      - '6379:6379'
    networks:
      - dojopool-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3

  # API Service
  api:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.api
    container_name: dojopool-api
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://dojo_user:dojo_password@postgres:5432/dojopool
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-key-change-in-production
      FRONTEND_URL: http://localhost:3000
      WS_CORS_ORIGIN: http://localhost:3000
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: dummy-key
      AWS_SECRET_ACCESS_KEY: dummy-secret
      S3_BUCKET: dojopool-dev-bucket
      GEMINI_API_KEY: dummy-gemini-key
      MAPBOX_TOKEN: dummy-mapbox-token
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dojopool-network
    volumes:
      - ../../services/api:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web Service
  web:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.web
    container_name: dojopool-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_MAPBOX_TOKEN: dummy-mapbox-token
      NEXT_PUBLIC_ENVIRONMENT: development
    ports:
      - '3000:3000'
    depends_on:
      - api
    networks:
      - dojopool-network
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dojopool-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - web
    networks:
      - dojopool-network
    restart: unless-stopped

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dojopool-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - dojopool-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: dojopool-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - '3002:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - dojopool-network
    restart: unless-stopped

  # ELK Stack for Logging (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: dojopool-elasticsearch
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.graph.enabled=false
      - xpack.watcher.enabled=false
      - xpack.ml.enabled=false
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dojopool-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: dojopool-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    ports:
      - '5044:5044'
      - '9600:9600'
    depends_on:
      - elasticsearch
    networks:
      - dojopool-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: dojopool-kibana
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch
    networks:
      - dojopool-network
    restart: unless-stopped

volumes:
  postgres_data:
  grafana_data:
  elasticsearch_data:

networks:
  dojopool-network:
    driver: bridge
