# Flask API endpoint for user feedback and story generation
from flask import Flask, request, jsonify, redirect, abort
import sqlite3
import random
from functools import wraps
import os
import json
from jose import jwt
from urllib.request import urlopen
from flask_cors import CORS
from dotenv import load_dotenv
import threading
import time
import logging
import sys
from ratelimit import limits, sleep_and_retry
import unittest
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

app = Flask(__name__)
CORS(app)
load_dotenv()

# Set up logging
logging.basicConfig(stream=sys.stdout, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
handler = logging.handlers.RotatingFileHandler('app.log', maxBytes=100000, backupCount=3)
handler.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s in %(module)s: %(message)s'))
logger = logging.getLogger(__name__)
logger.addHandler(handler)

db_lock = threading.Lock()

# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///user_feedback.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)

limiter = Limiter(
    app,
    key_func=get_remote_address,
    default_limits=["100 per minute"]
)

ONE_MINUTE = 60
REQUEST_LIMIT = 100

class UserProfile(db.Model):
    __tablename__ = 'user_profiles'
    user_id = db.Column(db.String(50), primary_key=True)
    preferences = db.Column(db.JSON)
    progress = db.Column(db.JSON)
    characters = db.relationship('Character', backref='user_profile', lazy=True)

class Story(db.Model):
    __tablename__ = 'stories'
    story_id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    thumbs_up = db.Column(db.Integer, default=0)
    thumbs_down = db.Column(db.Integer, default=0)
    feedbacks = db.relationship('Feedback', backref='story', lazy=True)

class Feedback(db.Model):
    __tablename__ = 'feedbacks'
    id = db.Column(db.Integer, primary_key=True)
    story_id = db.Column(db.Integer, db.ForeignKey('stories.story_id'), nullable=False)
    rating = db.Column(db.Enum('thumbs_up', 'thumbs_down', name='rating_enum'), nullable=False)
    user_id = db.Column(db.String(50), db.ForeignKey('user_profiles.user_id'), nullable=False)
    feedback_time = db.Column(db.DateTime, server_default=db.func.now())

class Character(db.Model):
    __tablename__ = 'characters'
    character_id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String(50), db.ForeignKey('user_profiles.user_id'), nullable=False)
    character_description = db.Column(db.Text, nullable=False)

db.create_all()

@sleep_and_retry
@limits(calls=REQUEST_LIMIT, period=ONE_MINUTE)
def rate_limited_api():
    pass

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth_header = request.headers.get('Authorization', None)
        if not auth_header:
            logger.error('Authorization header is missing.')
            return jsonify({'error': 'Authorization header is expected.'}), 401

        parts = auth_header.split()
        if parts[0].lower() != 'bearer' or len(parts) != 2:
            logger.error('Authorization header must start with Bearer.')
            return jsonify({'error': 'Invalid authorization header.'}), 401

        token = parts[1]

        jsonurl = urlopen(f"https://{os.environ['AUTH0_DOMAIN']}/.well-known/jwks.json")
        jwks = json.loads(jsonurl.read())
        unverified_header = jwt.get_unverified_header(token)

        rsa_key = {}
        for key in jwks["keys"]:
            if key["kid"] == unverified_header["kid"]:
                rsa_key = {
                    "kty": key["kty"],
                    "kid": key["kid"],
                    "use": key["use"],
                    "n": key["n"],
                    "e": key["e"]
                }

        if not rsa_key:
            logger.error('Unable to find appropriate key.')
            return jsonify({'error': 'Invalid token.'}), 401

        try:
            payload = jwt.decode(
                token,
                rsa_key,
                algorithms=["RS256"],
                audience=os.environ['AUTH0_AUDIENCE'],
                issuer=f"https://{os.environ['AUTH0_DOMAIN']}/"
            )
            request.user = payload
            logger.info(f'Token successfully decoded for user: {payload["sub"]}.')
        except jwt.ExpiredSignatureError:
            logger.error('Token has expired.')
            return jsonify({'error': 'Token has expired.'}), 401
        except jwt.JWTClaimsError:
            logger.error('Incorrect claims, please check the audience and issuer.')
            return jsonify({'error': 'Invalid claims.'}), 401
        except Exception as e:
            logger.error(f'Authentication error: {str(e)}')
            return jsonify({'error': 'Authentication error.'}), 401

        return f(*args, **kwargs)
    return decorated

@app.route('/feedback', methods=['POST'])
@token_required
@limiter.limit("10 per minute")
def submit_feedback():
    data = request.get_json()
    if not data:
        logger.error('Request payload is not valid JSON.')
        abort(400, description='Invalid JSON payload.')

    story_id = data.get('story_id')
    rating = data.get('rating')

    if not story_id:
        logger.error('Story ID is missing.')
        abort(400, description='Story ID is required.')
    if rating not in ('thumbs_up', 'thumbs_down'):
        logger.error('Invalid rating value.')
        abort(400, description='Rating must be "thumbs_up" or "thumbs_down".')

    # Log user feedback to improve future story recommendations
    feedback = Feedback(
        story_id=story_id,
        rating=rating,
        user_id=request.user.get('sub')
    )
    db.session.add(feedback)

    # Update story statistics
    story = Story.query.get_or_404(story_id)
    if rating == 'thumbs_up':
        story.thumbs_up += 1
    else:
        story.thumbs_down += 1

    db.session.commit()

    logger.info(f'Feedback submitted successfully for story_id: {story_id}, user_id: {request.user.get("sub")}, rating: {rating}.')
    return jsonify({'message': 'Feedback submitted successfully!'}), 200

@app.route('/user_profile/<user_id>', methods=['GET'])
@token_required
@rate_limited_api
def get_user_profile(user_id):
    # Retrieve user profile
    user = UserProfile.query.get(user_id)
    if user:
        logger.info(f'User profile retrieved for user_id: {user_id}.')
        return jsonify({'user_id': user_id, 'preferences': user.preferences, 'progress': user.progress}), 200
    else:
        logger.error(f'User profile not found for user_id: {user_id}.')
        return jsonify({'error': 'User not found'}), 404

@app.route('/user_profile', methods=['POST'])
@token_required
@rate_limited_api
def create_user_profile():
    data = request.get_json()
    preferences = data.get('preferences', {})
    progress = data.get('progress', {})
    user_id = request.user.get('sub')

    # Store user profile in the database
    user = UserProfile(user_id=user_id, preferences=preferences, progress=progress)
    db.session.add(user)
    db.session.commit()

    logger.info(f'User profile created/updated successfully for user_id: {user_id}.')
    return jsonify({'message': 'User profile created successfully!', 'user_id': user_id}), 201

@app.route('/generate_character', methods=['POST'])
@token_required
@rate_limited_api
def generate_character():
    data = request.get_json()
    user_id = request.user.get('sub')
    character_description = data.get('character_description', f'Character for user {user_id}')

    # Store character description in the database
    character = Character(user_id=user_id, character_description=character_description)
    db.session.add(character)
    db.session.commit()

    logger.info(f'Character generated successfully for user_id: {user_id}.')
    return jsonify({'character_description': character_description}), 201

@app.route('/match_user', methods=['POST'])
@token_required
@rate_limited_api
def match_user():
    data = request.get_json()
    other_user_id = data.get('other_user_id')
    user_id = request.user.get('sub')

    # Retrieve both user characters
    user_character = Character.query.filter_by(user_id=user_id).first()
    other_user_character = Character.query.filter_by(user_id=other_user_id).first()

    if not user_character or not other_user_character:
        logger.error(f'Character not found for user_id: {user_id} or other_user_id: {other_user_id}.')
        return jsonify({'error': 'Character not found for one or both users'}), 404

    # Generate a story scenario where both characters meet
    scenario = f"{user_character.character_description} meets {other_user_character.character_description} at a bustling marketplace in a distant land."

    logger.info(f'Match scenario generated for user_id: {user_id} and other_user_id: {other_user_id}.')
    return jsonify({'scenario': scenario}), 200

if __name__ == '__main__':
    app.run(debug=True)

# Unit testing the API endpoints
class APITestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_generate_story_user_not_found(self):
        response = self.app.post('/generate_story', json={})
        self.assertEqual(response.status_code, 401)

    def test_submit_feedback_invalid_data(self):
        response = self.app.post('/feedback', json={'story_id': None, 'rating': 'invalid'})
        self.assertEqual(response.status_code, 400)

    def test_top_stories(self):
        response = self.app.get('/top_stories')
        self.assertEqual(response.status_code, 200)

    def test_missing_token(self):
        response = self.app.post('/feedback', json={'story_id': 1, 'rating': 'thumbs_up'})
        self.assertEqual(response.status_code, 401)

if __name__ == '__main__':
    unittest.main()
