version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.alternative
      target: api
    image: dojopool-api
    ports:
      - "3002:3002"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/dojopool
      - PORT=3002
      - NODE_ENV=development
      - CORS_ORIGINS=http://localhost:3000
      - FRONTEND_URL=http://localhost:3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./services/api:/app
      - /app/node_modules
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1

  web:
    build:
      context: .
      dockerfile: Dockerfile.alternative
      target: web
    image: dojopool-web
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3002/api/v1
      - NEXT_PUBLIC_WEBSOCKET_URL=http://localhost:3002
      - NODE_ENV=development
    depends_on:
      - api
    restart: unless-stopped
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1

  db:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dojopool
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dojopool"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
